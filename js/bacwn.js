var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.DEBUG = true;
goog.LOCALE = "en";
goog.provide = function(name) {
  if(!COMPILED) {
    if(goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while(namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if(goog.getObjectByName(namespace)) {
        break
      }
      goog.implicitNamespaces_[namespace] = true
    }
  }
  goog.exportPath_(name)
};
goog.setTestOnly = function(opt_message) {
  if(COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
if(!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && !!goog.getObjectByName(name)
  };
  goog.implicitNamespaces_ = {}
}
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if(!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0])
  }
  for(var part;parts.length && (part = parts.shift());) {
    if(!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object
    }else {
      if(cur[part]) {
        cur = cur[part]
      }else {
        cur = cur[part] = {}
      }
    }
  }
};
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for(var part;part = parts.shift();) {
    if(goog.isDefAndNotNull(cur[part])) {
      cur = cur[part]
    }else {
      return null
    }
  }
  return cur
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for(var x in obj) {
    global[x] = obj[x]
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if(!COMPILED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for(var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if(!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {}
      }
      deps.pathToNames[path][provide] = true
    }
    for(var j = 0;require = requires[j];j++) {
      if(!(path in deps.requires)) {
        deps.requires[path] = {}
      }
      deps.requires[path][require] = true
    }
  }
};
goog.ENABLE_DEBUG_LOADER = true;
goog.require = function(name) {
  if(!COMPILED) {
    if(goog.isProvided_(name)) {
      return
    }
    if(goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if(path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if(goog.global.console) {
      goog.global.console["error"](errorMessage)
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if(ctor.instance_) {
      return ctor.instance_
    }
    if(goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor
    }
    return ctor.instance_ = new ctor
  }
};
goog.instantiatedSingletons_ = [];
if(!COMPILED && goog.ENABLE_DEBUG_LOADER) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc
  };
  goog.findBasePath_ = function() {
    if(goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return
    }else {
      if(!goog.inHtmlDocument_()) {
        return
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for(var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if(src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if(!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true
    }
  };
  goog.writeScriptTag_ = function(src) {
    if(goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      doc.write('<script type="text/javascript" src="' + src + '"></' + "script>");
      return true
    }else {
      return false
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if(path in deps.written) {
        return
      }
      if(path in deps.visited) {
        if(!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path)
        }
        return
      }
      deps.visited[path] = true;
      if(path in deps.requires) {
        for(var requireName in deps.requires[path]) {
          if(!goog.isProvided_(requireName)) {
            if(requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName])
            }else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if(!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path)
      }
    }
    for(var path in goog.included_) {
      if(!deps.written[path]) {
        visitNode(path)
      }
    }
    for(var i = 0;i < scripts.length;i++) {
      if(scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i])
      }else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if(rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule]
    }else {
      return null
    }
  };
  goog.findBasePath_();
  if(!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js")
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if(s == "object") {
    if(value) {
      if(value instanceof Array) {
        return"array"
      }else {
        if(value instanceof Object) {
          return s
        }
      }
      var className = Object.prototype.toString.call(value);
      if(className == "[object Window]") {
        return"object"
      }
      if(className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return"array"
      }
      if(className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return"function"
      }
    }else {
      return"null"
    }
  }else {
    if(s == "function" && typeof value.call == "undefined") {
      return"object"
    }
  }
  return s
};
goog.isDef = function(val) {
  return val !== undefined
};
goog.isNull = function(val) {
  return val === null
};
goog.isDefAndNotNull = function(val) {
  return val != null
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array"
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number"
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function"
};
goog.isString = function(val) {
  return typeof val == "string"
};
goog.isBoolean = function(val) {
  return typeof val == "boolean"
};
goog.isNumber = function(val) {
  return typeof val == "number"
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function"
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function"
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_)
};
goog.removeUid = function(obj) {
  if("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_)
  }
  try {
    delete obj[goog.UID_PROPERTY_]
  }catch(ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + Math.floor(Math.random() * 2147483648).toString(36);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if(type == "object" || type == "array") {
    if(obj.clone) {
      return obj.clone()
    }
    var clone = type == "array" ? [] : {};
    for(var key in obj) {
      clone[key] = goog.cloneObject(obj[key])
    }
    return clone
  }
  return obj
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return fn.call.apply(fn.bind, arguments)
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if(!fn) {
    throw new Error;
  }
  if(arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs)
    }
  }else {
    return function() {
      return fn.apply(selfObj, arguments)
    }
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if(Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_
  }else {
    goog.bind = goog.bindJs_
  }
  return goog.bind.apply(null, arguments)
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.unshift.apply(newArgs, args);
    return fn.apply(this, newArgs)
  }
};
goog.mixin = function(target, source) {
  for(var x in source) {
    target[x] = source[x]
  }
};
goog.now = Date.now || function() {
  return+new Date
};
goog.globalEval = function(script) {
  if(goog.global.execScript) {
    goog.global.execScript(script, "JavaScript")
  }else {
    if(goog.global.eval) {
      if(goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ = 1;");
        if(typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true
        }else {
          goog.evalWorksForGlobals_ = false
        }
      }
      if(goog.evalWorksForGlobals_) {
        goog.global.eval(script)
      }else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt)
      }
    }else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for(var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]))
    }
    return mapped.join("-")
  };
  var rename;
  if(goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts
  }else {
    rename = function(a) {
      return a
    }
  }
  if(opt_modifier) {
    return className + "-" + rename(opt_modifier)
  }else {
    return rename(className)
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if(!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for(var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value)
  }
  return str
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo)
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if(caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1))
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for(var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if(ctor.prototype[opt_methodName] === caller) {
      foundCaller = true
    }else {
      if(foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args)
      }
    }
  }
  if(me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args)
  }else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global)
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0
};
goog.string.subs = function(str, var_args) {
  for(var i = 1;i < arguments.length;i++) {
    var replacement = String(arguments[i]).replace(/\$/g, "$$$$");
    str = str.replace(/\%s/, replacement)
  }
  return str
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "")
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str)
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str))
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str)
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str)
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str)
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str)
};
goog.string.isSpace = function(ch) {
  return ch == " "
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd"
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ")
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n")
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ")
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ")
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "")
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "")
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "")
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "")
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if(test1 < test2) {
    return-1
  }else {
    if(test1 == test2) {
      return 0
    }else {
      return 1
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if(str1 == str2) {
    return 0
  }
  if(!str1) {
    return-1
  }
  if(!str2) {
    return 1
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for(var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if(a != b) {
      var num1 = parseInt(a, 10);
      if(!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if(!isNaN(num2) && num1 - num2) {
          return num1 - num2
        }
      }
      return a < b ? -1 : 1
    }
  }
  if(tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length
  }
  return str1 < str2 ? -1 : 1
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str))
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "))
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "<br />" : "<br>")
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if(opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "&amp;").replace(goog.string.ltRe_, "&lt;").replace(goog.string.gtRe_, "&gt;").replace(goog.string.quotRe_, "&quot;")
  }else {
    if(!goog.string.allRe_.test(str)) {
      return str
    }
    if(str.indexOf("&") != -1) {
      str = str.replace(goog.string.amperRe_, "&amp;")
    }
    if(str.indexOf("<") != -1) {
      str = str.replace(goog.string.ltRe_, "&lt;")
    }
    if(str.indexOf(">") != -1) {
      str = str.replace(goog.string.gtRe_, "&gt;")
    }
    if(str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "&quot;")
    }
    return str
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /\"/g;
goog.string.allRe_ = /[&<>\"]/;
goog.string.unescapeEntities = function(str) {
  if(goog.string.contains(str, "&")) {
    if("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str)
    }else {
      return goog.string.unescapePureXmlEntities_(str)
    }
  }
  return str
};
goog.string.unescapeEntitiesUsingDom_ = function(str) {
  var seen = {"&amp;":"&", "&lt;":"<", "&gt;":">", "&quot;":'"'};
  var div = document.createElement("div");
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if(value) {
      return value
    }
    if(entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if(!isNaN(n)) {
        value = String.fromCharCode(n)
      }
    }
    if(!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1)
    }
    return seen[s] = value
  })
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return"&";
      case "lt":
        return"<";
      case "gt":
        return">";
      case "quot":
        return'"';
      default:
        if(entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if(!isNaN(n)) {
            return String.fromCharCode(n)
          }
        }
        return s
    }
  })
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " &#160;"), opt_xml)
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for(var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if(str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1)
    }
  }
  return str
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if(opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str)
  }
  if(str.length > chars) {
    str = str.substring(0, chars - 3) + "..."
  }
  if(opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str)
  }
  return str
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if(opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str)
  }
  if(opt_trailingChars && str.length > chars) {
    if(opt_trailingChars > chars) {
      opt_trailingChars = chars
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint)
  }else {
    if(str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos)
    }
  }
  if(opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str)
  }
  return str
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if(s.quote) {
    return s.quote()
  }else {
    var sb = ['"'];
    for(var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch))
    }
    sb.push('"');
    return sb.join("")
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for(var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i))
  }
  return sb.join("")
};
goog.string.escapeChar = function(c) {
  if(c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c]
  }
  if(c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c]
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if(cc > 31 && cc < 127) {
    rv = c
  }else {
    if(cc < 256) {
      rv = "\\x";
      if(cc < 16 || cc > 256) {
        rv += "0"
      }
    }else {
      rv = "\\u";
      if(cc < 4096) {
        rv += "0"
      }
    }
    rv += cc.toString(16).toUpperCase()
  }
  return goog.string.jsEscapeCache_[c] = rv
};
goog.string.toMap = function(s) {
  var rv = {};
  for(var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true
  }
  return rv
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if(index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength)
  }
  return resultStr
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "")
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "")
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08")
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string)
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if(index == -1) {
    index = s.length
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj)
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "")
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36)
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for(var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if(v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2])
    }while(order == 0)
  }
  return order
};
goog.string.compareElements_ = function(left, right) {
  if(left < right) {
    return-1
  }else {
    if(left > right) {
      return 1
    }
  }
  return 0
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for(var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_
  }
  return result
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return"goog_" + goog.string.uniqueStringCounter_++
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if(num == 0 && goog.string.isEmpty(str)) {
    return NaN
  }
  return num
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase()
  })
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase()
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase()
  })
};
goog.string.parseInt = function(value) {
  if(isFinite(value)) {
    value = String(value)
  }
  if(goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10)
  }
  return NaN
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if(Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error)
  }else {
    this.stack = (new Error).stack || ""
  }
  if(opt_msg) {
    this.message = String(opt_msg)
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.string");
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if(givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs
  }else {
    if(defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return condition
};
goog.asserts.fail = function(opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3))
  }
  return value
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.NATIVE_ARRAY_PROTOTYPES = true;
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1]
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.indexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex)
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if(goog.isString(arr)) {
    if(!goog.isString(obj) || obj.length != 1) {
      return-1
    }
    return arr.indexOf(obj, fromIndex)
  }
  for(var i = fromIndex;i < arr.length;i++) {
    if(i in arr && arr[i] === obj) {
      return i
    }
  }
  return-1
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.lastIndexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex)
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if(fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex)
  }
  if(goog.isString(arr)) {
    if(!goog.isString(obj) || obj.length != 1) {
      return-1
    }
    return arr.lastIndexOf(obj, fromIndex)
  }
  for(var i = fromIndex;i >= 0;i--) {
    if(i in arr && arr[i] === obj) {
      return i
    }
  }
  return-1
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.forEach ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2) {
      f.call(opt_obj, arr2[i], i, arr)
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = l - 1;i >= 0;--i) {
    if(i in arr2) {
      f.call(opt_obj, arr2[i], i, arr)
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.filter ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2) {
      var val = arr2[i];
      if(f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val
      }
    }
  }
  return res
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.map ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr)
    }
  }
  return res
};
goog.array.reduce = function(arr, f, val, opt_obj) {
  if(arr.reduce) {
    if(opt_obj) {
      return arr.reduce(goog.bind(f, opt_obj), val)
    }else {
      return arr.reduce(f, val)
    }
  }
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr)
  });
  return rval
};
goog.array.reduceRight = function(arr, f, val, opt_obj) {
  if(arr.reduceRight) {
    if(opt_obj) {
      return arr.reduceRight(goog.bind(f, opt_obj), val)
    }else {
      return arr.reduceRight(f, val)
    }
  }
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr)
  });
  return rval
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.some ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true
    }
  }
  return false
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.every ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false
    }
  }
  return true
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i]
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i
    }
  }
  return-1
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i]
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = l - 1;i >= 0;i--) {
    if(i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i
    }
  }
  return-1
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0
};
goog.array.clear = function(arr) {
  if(!goog.isArray(arr)) {
    for(var i = arr.length - 1;i >= 0;i--) {
      delete arr[i]
    }
  }
  arr.length = 0
};
goog.array.insert = function(arr, obj) {
  if(!goog.array.contains(arr, obj)) {
    arr.push(obj)
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj)
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd)
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if(arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj)
  }else {
    goog.array.insertAt(arr, obj, i)
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if(rv = i >= 0) {
    goog.array.removeAt(arr, i)
  }
  return rv
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if(i >= 0) {
    goog.array.removeAt(arr, i);
    return true
  }
  return false
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments)
};
goog.array.toArray = function(object) {
  var length = object.length;
  if(length > 0) {
    var rv = new Array(length);
    for(var i = 0;i < length;i++) {
      rv[i] = object[i]
    }
    return rv
  }
  return[]
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for(var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if(goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && arr2.hasOwnProperty("callee")) {
      arr1.push.apply(arr1, arr2)
    }else {
      if(isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for(var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j]
        }
      }else {
        arr1.push(arr2)
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1))
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if(arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start)
  }else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end)
  }
};
goog.array.removeDuplicates = function(arr, opt_rv) {
  var returnArray = opt_rv || arr;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while(cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
    if(!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current
    }
  }
  returnArray.length = cursorInsert
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target)
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj)
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while(left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if(isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr)
    }else {
      compareResult = compareFn(opt_target, arr[middle])
    }
    if(compareResult > 0) {
      left = middle + 1
    }else {
      right = middle;
      found = !compareResult
    }
  }
  return found ? left : ~left
};
goog.array.sort = function(arr, opt_compareFn) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.sort.call(arr, opt_compareFn || goog.array.defaultCompare)
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for(var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]}
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index
  }
  goog.array.sort(arr, stableCompareFn);
  for(var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key])
  })
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for(var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if(compareResult > 0 || compareResult == 0 && opt_strict) {
      return false
    }
  }
  return true
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if(!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for(var i = 0;i < l;i++) {
    if(!equalsFn(arr1[i], arr2[i])) {
      return false
    }
  }
  return true
};
goog.array.compare = function(arr1, arr2, opt_equalsFn) {
  return goog.array.equals(arr1, arr2, opt_equalsFn)
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for(var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if(result != 0) {
      return result
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length)
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if(index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true
  }
  return false
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false
};
goog.array.bucket = function(array, sorter) {
  var buckets = {};
  for(var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter(value, i, array);
    if(goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value)
    }
  }
  return buckets
};
goog.array.repeat = function(value, n) {
  var array = [];
  for(var i = 0;i < n;i++) {
    array[i] = value
  }
  return array
};
goog.array.flatten = function(var_args) {
  var result = [];
  for(var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if(goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element))
    }else {
      result.push(element)
    }
  }
  return result
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if(array.length) {
    n %= array.length;
    if(n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n))
    }else {
      if(n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n))
      }
    }
  }
  return array
};
goog.array.zip = function(var_args) {
  if(!arguments.length) {
    return[]
  }
  var result = [];
  for(var i = 0;true;i++) {
    var value = [];
    for(var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if(i >= arr.length) {
        return result
      }
      value.push(arr[i])
    }
    result.push(value)
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for(var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp
  }
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for(var key in obj) {
    f.call(opt_obj, obj[key], key, obj)
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for(var key in obj) {
    if(f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key]
    }
  }
  return res
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for(var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj)
  }
  return res
};
goog.object.some = function(obj, f, opt_obj) {
  for(var key in obj) {
    if(f.call(opt_obj, obj[key], key, obj)) {
      return true
    }
  }
  return false
};
goog.object.every = function(obj, f, opt_obj) {
  for(var key in obj) {
    if(!f.call(opt_obj, obj[key], key, obj)) {
      return false
    }
  }
  return true
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for(var key in obj) {
    rv++
  }
  return rv
};
goog.object.getAnyKey = function(obj) {
  for(var key in obj) {
    return key
  }
};
goog.object.getAnyValue = function(obj) {
  for(var key in obj) {
    return obj[key]
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val)
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for(var key in obj) {
    res[i++] = obj[key]
  }
  return res
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for(var key in obj) {
    res[i++] = key
  }
  return res
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for(var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if(!goog.isDef(obj)) {
      break
    }
  }
  return obj
};
goog.object.containsKey = function(obj, key) {
  return key in obj
};
goog.object.containsValue = function(obj, val) {
  for(var key in obj) {
    if(obj[key] == val) {
      return true
    }
  }
  return false
};
goog.object.findKey = function(obj, f, opt_this) {
  for(var key in obj) {
    if(f.call(opt_this, obj[key], key, obj)) {
      return key
    }
  }
  return undefined
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key]
};
goog.object.isEmpty = function(obj) {
  for(var key in obj) {
    return false
  }
  return true
};
goog.object.clear = function(obj) {
  for(var i in obj) {
    delete obj[i]
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if(rv = key in obj) {
    delete obj[key]
  }
  return rv
};
goog.object.add = function(obj, key, val) {
  if(key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val)
};
goog.object.get = function(obj, key, opt_val) {
  if(key in obj) {
    return obj[key]
  }
  return opt_val
};
goog.object.set = function(obj, key, value) {
  obj[key] = value
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value
};
goog.object.clone = function(obj) {
  var res = {};
  for(var key in obj) {
    res[key] = obj[key]
  }
  return res
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if(type == "object" || type == "array") {
    if(obj.clone) {
      return obj.clone()
    }
    var clone = type == "array" ? [] : {};
    for(var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key])
    }
    return clone
  }
  return obj
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for(var key in obj) {
    transposed[obj[key]] = key
  }
  return transposed
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for(var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for(key in source) {
      target[key] = source[key]
    }
    for(var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if(Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key]
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if(argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0])
  }
  if(argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for(var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1]
  }
  return rv
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if(argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0])
  }
  var rv = {};
  for(var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true
  }
  return rv
};
goog.provide("goog.string.format");
goog.require("goog.string");
goog.string.format = function(formatString, var_args) {
  var args = Array.prototype.slice.call(arguments);
  var template = args.shift();
  if(typeof template == "undefined") {
    throw Error("[goog.string.format] Template required");
  }
  var formatRe = /%([0\-\ \+]*)(\d+)?(\.(\d+))?([%sfdiu])/g;
  function replacerDemuxer(match, flags, width, dotp, precision, type, offset, wholeString) {
    if(type == "%") {
      return"%"
    }
    var value = args.shift();
    if(typeof value == "undefined") {
      throw Error("[goog.string.format] Not enough arguments");
    }
    arguments[0] = value;
    return goog.string.format.demuxes_[type].apply(null, arguments)
  }
  return template.replace(formatRe, replacerDemuxer)
};
goog.string.format.demuxes_ = {};
goog.string.format.demuxes_["s"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value;
  if(isNaN(width) || width == "" || replacement.length >= width) {
    return replacement
  }
  if(flags.indexOf("-", 0) > -1) {
    replacement = replacement + goog.string.repeat(" ", width - replacement.length)
  }else {
    replacement = goog.string.repeat(" ", width - replacement.length) + replacement
  }
  return replacement
};
goog.string.format.demuxes_["f"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value.toString();
  if(!(isNaN(precision) || precision == "")) {
    replacement = value.toFixed(precision)
  }
  var sign;
  if(value < 0) {
    sign = "-"
  }else {
    if(flags.indexOf("+") >= 0) {
      sign = "+"
    }else {
      if(flags.indexOf(" ") >= 0) {
        sign = " "
      }else {
        sign = ""
      }
    }
  }
  if(value >= 0) {
    replacement = sign + replacement
  }
  if(isNaN(width) || replacement.length >= width) {
    return replacement
  }
  replacement = isNaN(precision) ? Math.abs(value).toString() : Math.abs(value).toFixed(precision);
  var padCount = width - replacement.length - sign.length;
  if(flags.indexOf("-", 0) >= 0) {
    replacement = sign + replacement + goog.string.repeat(" ", padCount)
  }else {
    var paddingChar = flags.indexOf("0", 0) >= 0 ? "0" : " ";
    replacement = sign + goog.string.repeat(paddingChar, padCount) + replacement
  }
  return replacement
};
goog.string.format.demuxes_["d"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  return goog.string.format.demuxes_["f"](parseInt(value, 10), flags, width, dotp, 0, type, offset, wholeString)
};
goog.string.format.demuxes_["i"] = goog.string.format.demuxes_["d"];
goog.string.format.demuxes_["u"] = goog.string.format.demuxes_["d"];
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if(opt_a1 != null) {
    this.append.apply(this, arguments)
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if(opt_a2 != null) {
    for(var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i]
    }
  }
  return this
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = ""
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.string.format");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core._STAR_1 = undefined;
cljs.core._STAR_2 = undefined;
cljs.core._STAR_3 = undefined;
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false
};
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null
};
cljs.core.not = function not(x) {
  if(cljs.core.truth_(x)) {
    return false
  }else {
    return true
  }
};
cljs.core.type_satisfies_ = function type_satisfies_(p, x) {
  var x__$1 = x == null ? null : x;
  if(p[goog.typeOf(x__$1)]) {
    return true
  }else {
    if(p["_"]) {
      return true
    }else {
      if("\ufdd0:else") {
        return false
      }else {
        return null
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  return Error(["No protocol method ", proto, " defined for type ", goog.typeOf(obj), ": ", obj].join(""))
};
cljs.core.aclone = function aclone(array_like) {
  return array_like.slice()
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments)
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size)
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size)
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$lang$arity$1 = make_array__1;
  make_array.cljs$lang$arity$2 = make_array__2;
  return make_array
}();
cljs.core.apply = undefined;
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i]
  };
  var aget__3 = function() {
    var G__5402__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs)
    };
    var G__5402 = function(array, i, var_args) {
      var idxs = null;
      if(goog.isDef(var_args)) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__5402__delegate.call(this, array, i, idxs)
    };
    G__5402.cljs$lang$maxFixedArity = 2;
    G__5402.cljs$lang$applyTo = function(arglist__5403) {
      var array = cljs.core.first(arglist__5403);
      var i = cljs.core.first(cljs.core.next(arglist__5403));
      var idxs = cljs.core.rest(cljs.core.next(arglist__5403));
      return G__5402__delegate(array, i, idxs)
    };
    G__5402.cljs$lang$arity$variadic = G__5402__delegate;
    return G__5402
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$lang$arity$variadic(array, i, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$lang$arity$2 = aget__2;
  aget.cljs$lang$arity$variadic = aget__3.cljs$lang$arity$variadic;
  return aget
}();
cljs.core.aset = function aset(array, i, val) {
  return array[i] = val
};
cljs.core.alength = function alength(array) {
  return array.length
};
cljs.core.reduce = undefined;
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq)
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a
    }, [], aseq)
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$lang$arity$1 = into_array__1;
  into_array.cljs$lang$arity$2 = into_array__2;
  return into_array
}();
cljs.core.Fn = {};
cljs.core.IFn = {};
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$)
    }else {
      var x__4090__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$)
    }
  };
  var _invoke__2 = function(this$, a) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a)
    }else {
      var x__4090__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a)
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b)
    }else {
      var x__4090__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b)
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c)
    }else {
      var x__4090__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c)
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d)
    }else {
      var x__4090__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d)
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e)
    }else {
      var x__4090__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e)
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f)
    }else {
      var x__4090__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f)
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g)
    }else {
      var x__4090__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g)
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h)
    }else {
      var x__4090__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h)
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i)
    }else {
      var x__4090__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i)
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j)
    }else {
      var x__4090__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j)
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k)
    }else {
      var x__4090__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k)
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l)
    }else {
      var x__4090__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l)
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m)
    }else {
      var x__4090__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m)
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n)
    }else {
      var x__4090__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n)
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
    }else {
      var x__4090__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p)
    }else {
      var x__4090__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p)
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    }else {
      var x__4090__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s)
    }else {
      var x__4090__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s)
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t)
    }else {
      var x__4090__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t)
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest)
    }else {
      var x__4090__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest)
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$lang$arity$1 = _invoke__1;
  _invoke.cljs$lang$arity$2 = _invoke__2;
  _invoke.cljs$lang$arity$3 = _invoke__3;
  _invoke.cljs$lang$arity$4 = _invoke__4;
  _invoke.cljs$lang$arity$5 = _invoke__5;
  _invoke.cljs$lang$arity$6 = _invoke__6;
  _invoke.cljs$lang$arity$7 = _invoke__7;
  _invoke.cljs$lang$arity$8 = _invoke__8;
  _invoke.cljs$lang$arity$9 = _invoke__9;
  _invoke.cljs$lang$arity$10 = _invoke__10;
  _invoke.cljs$lang$arity$11 = _invoke__11;
  _invoke.cljs$lang$arity$12 = _invoke__12;
  _invoke.cljs$lang$arity$13 = _invoke__13;
  _invoke.cljs$lang$arity$14 = _invoke__14;
  _invoke.cljs$lang$arity$15 = _invoke__15;
  _invoke.cljs$lang$arity$16 = _invoke__16;
  _invoke.cljs$lang$arity$17 = _invoke__17;
  _invoke.cljs$lang$arity$18 = _invoke__18;
  _invoke.cljs$lang$arity$19 = _invoke__19;
  _invoke.cljs$lang$arity$20 = _invoke__20;
  _invoke.cljs$lang$arity$21 = _invoke__21;
  return _invoke
}();
cljs.core.ICounted = {};
cljs.core._count = function _count(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._count[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._count["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IEmptyableCollection = {};
cljs.core._empty = function _empty(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._empty[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._empty["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ICollection = {};
cljs.core._conj = function _conj(coll, o) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._conj[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._conj["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o)
  }
};
cljs.core.IIndexed = {};
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if(function() {
      var and__3941__auto__ = coll;
      if(and__3941__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2
      }else {
        return and__3941__auto__
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n)
    }else {
      var x__4090__auto__ = coll == null ? null : coll;
      return function() {
        var or__3943__auto__ = cljs.core._nth[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._nth["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n)
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if(function() {
      var and__3941__auto__ = coll;
      if(and__3941__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3
      }else {
        return and__3941__auto__
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found)
    }else {
      var x__4090__auto__ = coll == null ? null : coll;
      return function() {
        var or__3943__auto__ = cljs.core._nth[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._nth["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found)
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$lang$arity$2 = _nth__2;
  _nth.cljs$lang$arity$3 = _nth__3;
  return _nth
}();
cljs.core.ASeq = {};
cljs.core.ISeq = {};
cljs.core._first = function _first(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._first[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._first["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._rest = function _rest(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._rest[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._rest["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.INext = {};
cljs.core._next = function _next(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$INext$_next$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._next[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._next["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ILookup = {};
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if(function() {
      var and__3941__auto__ = o;
      if(and__3941__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2
      }else {
        return and__3941__auto__
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k)
    }else {
      var x__4090__auto__ = o == null ? null : o;
      return function() {
        var or__3943__auto__ = cljs.core._lookup[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._lookup["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k)
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if(function() {
      var and__3941__auto__ = o;
      if(and__3941__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3
      }else {
        return and__3941__auto__
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found)
    }else {
      var x__4090__auto__ = o == null ? null : o;
      return function() {
        var or__3943__auto__ = cljs.core._lookup[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._lookup["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found)
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$lang$arity$2 = _lookup__2;
  _lookup.cljs$lang$arity$3 = _lookup__3;
  return _lookup
}();
cljs.core.IAssociative = {};
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k)
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._assoc[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._assoc["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v)
  }
};
cljs.core.IMap = {};
cljs.core._dissoc = function _dissoc(coll, k) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._dissoc[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._dissoc["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k)
  }
};
cljs.core.IMapEntry = {};
cljs.core._key = function _key(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._key[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._key["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._val = function _val(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._val[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._val["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ISet = {};
cljs.core._disjoin = function _disjoin(coll, v) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._disjoin[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._disjoin["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v)
  }
};
cljs.core.IStack = {};
cljs.core._peek = function _peek(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._peek[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._peek["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._pop = function _pop(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._pop[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._pop["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IVector = {};
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._assoc_n[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._assoc_n["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val)
  }
};
cljs.core.IDeref = {};
cljs.core._deref = function _deref(o) {
  if(function() {
    var and__3941__auto__ = o;
    if(and__3941__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o)
  }else {
    var x__4090__auto__ = o == null ? null : o;
    return function() {
      var or__3943__auto__ = cljs.core._deref[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._deref["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.IDerefWithTimeout = {};
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if(function() {
    var and__3941__auto__ = o;
    if(and__3941__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val)
  }else {
    var x__4090__auto__ = o == null ? null : o;
    return function() {
      var or__3943__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._deref_with_timeout["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val)
  }
};
cljs.core.IMeta = {};
cljs.core._meta = function _meta(o) {
  if(function() {
    var and__3941__auto__ = o;
    if(and__3941__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o)
  }else {
    var x__4090__auto__ = o == null ? null : o;
    return function() {
      var or__3943__auto__ = cljs.core._meta[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._meta["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.IWithMeta = {};
cljs.core._with_meta = function _with_meta(o, meta) {
  if(function() {
    var and__3941__auto__ = o;
    if(and__3941__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta)
  }else {
    var x__4090__auto__ = o == null ? null : o;
    return function() {
      var or__3943__auto__ = cljs.core._with_meta[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._with_meta["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta)
  }
};
cljs.core.IReduce = {};
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if(function() {
      var and__3941__auto__ = coll;
      if(and__3941__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2
      }else {
        return and__3941__auto__
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f)
    }else {
      var x__4090__auto__ = coll == null ? null : coll;
      return function() {
        var or__3943__auto__ = cljs.core._reduce[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._reduce["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f)
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if(function() {
      var and__3941__auto__ = coll;
      if(and__3941__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3
      }else {
        return and__3941__auto__
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start)
    }else {
      var x__4090__auto__ = coll == null ? null : coll;
      return function() {
        var or__3943__auto__ = cljs.core._reduce[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._reduce["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start)
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$lang$arity$2 = _reduce__2;
  _reduce.cljs$lang$arity$3 = _reduce__3;
  return _reduce
}();
cljs.core.IKVReduce = {};
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._kv_reduce["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init)
  }
};
cljs.core.IEquiv = {};
cljs.core._equiv = function _equiv(o, other) {
  if(function() {
    var and__3941__auto__ = o;
    if(and__3941__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other)
  }else {
    var x__4090__auto__ = o == null ? null : o;
    return function() {
      var or__3943__auto__ = cljs.core._equiv[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._equiv["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other)
  }
};
cljs.core.IHash = {};
cljs.core._hash = function _hash(o) {
  if(function() {
    var and__3941__auto__ = o;
    if(and__3941__auto__) {
      return o.cljs$core$IHash$_hash$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o)
  }else {
    var x__4090__auto__ = o == null ? null : o;
    return function() {
      var or__3943__auto__ = cljs.core._hash[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._hash["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.ISeqable = {};
cljs.core._seq = function _seq(o) {
  if(function() {
    var and__3941__auto__ = o;
    if(and__3941__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o)
  }else {
    var x__4090__auto__ = o == null ? null : o;
    return function() {
      var or__3943__auto__ = cljs.core._seq[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._seq["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.ISequential = {};
cljs.core.IList = {};
cljs.core.IRecord = {};
cljs.core.IReversible = {};
cljs.core._rseq = function _rseq(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._rseq[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._rseq["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ISorted = {};
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._sorted_seq["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_)
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._sorted_seq_from["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_)
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._entry_key[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._entry_key["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry)
  }
};
cljs.core._comparator = function _comparator(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._comparator[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._comparator["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IPrintable = {};
cljs.core._pr_seq = function _pr_seq(o, opts) {
  if(function() {
    var and__3941__auto__ = o;
    if(and__3941__auto__) {
      return o.cljs$core$IPrintable$_pr_seq$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return o.cljs$core$IPrintable$_pr_seq$arity$2(o, opts)
  }else {
    var x__4090__auto__ = o == null ? null : o;
    return function() {
      var or__3943__auto__ = cljs.core._pr_seq[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._pr_seq["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IPrintable.-pr-seq", o);
        }
      }
    }().call(null, o, opts)
  }
};
cljs.core.IWriter = {};
cljs.core._write = function _write(writer, s) {
  if(function() {
    var and__3941__auto__ = writer;
    if(and__3941__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s)
  }else {
    var x__4090__auto__ = writer == null ? null : writer;
    return function() {
      var or__3943__auto__ = cljs.core._write[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._write["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s)
  }
};
cljs.core._flush = function _flush(writer) {
  if(function() {
    var and__3941__auto__ = writer;
    if(and__3941__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer)
  }else {
    var x__4090__auto__ = writer == null ? null : writer;
    return function() {
      var or__3943__auto__ = cljs.core._flush[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._flush["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer)
  }
};
cljs.core.IPrintWithWriter = {};
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if(function() {
    var and__3941__auto__ = o;
    if(and__3941__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts)
  }else {
    var x__4090__auto__ = o == null ? null : o;
    return function() {
      var or__3943__auto__ = cljs.core._pr_writer[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._pr_writer["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts)
  }
};
cljs.core.IPending = {};
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if(function() {
    var and__3941__auto__ = d;
    if(and__3941__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d)
  }else {
    var x__4090__auto__ = d == null ? null : d;
    return function() {
      var or__3943__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._realized_QMARK_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d)
  }
};
cljs.core.IWatchable = {};
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if(function() {
    var and__3941__auto__ = this$;
    if(and__3941__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval)
  }else {
    var x__4090__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3943__auto__ = cljs.core._notify_watches[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._notify_watches["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval)
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if(function() {
    var and__3941__auto__ = this$;
    if(and__3941__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f)
  }else {
    var x__4090__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3943__auto__ = cljs.core._add_watch[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._add_watch["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f)
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if(function() {
    var and__3941__auto__ = this$;
    if(and__3941__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key)
  }else {
    var x__4090__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3943__auto__ = cljs.core._remove_watch[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._remove_watch["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key)
  }
};
cljs.core.IEditableCollection = {};
cljs.core._as_transient = function _as_transient(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._as_transient[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._as_transient["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ITransientCollection = {};
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if(function() {
    var and__3941__auto__ = tcoll;
    if(and__3941__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val)
  }else {
    var x__4090__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3943__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._conj_BANG_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val)
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if(function() {
    var and__3941__auto__ = tcoll;
    if(and__3941__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll)
  }else {
    var x__4090__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3943__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._persistent_BANG_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll)
  }
};
cljs.core.ITransientAssociative = {};
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if(function() {
    var and__3941__auto__ = tcoll;
    if(and__3941__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val)
  }else {
    var x__4090__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3943__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._assoc_BANG_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val)
  }
};
cljs.core.ITransientMap = {};
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if(function() {
    var and__3941__auto__ = tcoll;
    if(and__3941__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key)
  }else {
    var x__4090__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3943__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key)
  }
};
cljs.core.ITransientVector = {};
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if(function() {
    var and__3941__auto__ = tcoll;
    if(and__3941__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val)
  }else {
    var x__4090__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3943__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val)
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if(function() {
    var and__3941__auto__ = tcoll;
    if(and__3941__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll)
  }else {
    var x__4090__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3943__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._pop_BANG_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll)
  }
};
cljs.core.ITransientSet = {};
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if(function() {
    var and__3941__auto__ = tcoll;
    if(and__3941__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v)
  }else {
    var x__4090__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3943__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v)
  }
};
cljs.core.IComparable = {};
cljs.core._compare = function _compare(x, y) {
  if(function() {
    var and__3941__auto__ = x;
    if(and__3941__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y)
  }else {
    var x__4090__auto__ = x == null ? null : x;
    return function() {
      var or__3943__auto__ = cljs.core._compare[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._compare["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y)
  }
};
cljs.core.IChunk = {};
cljs.core._drop_first = function _drop_first(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._drop_first[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._drop_first["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IChunkedSeq = {};
cljs.core._chunked_first = function _chunked_first(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._chunked_first[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._chunked_first["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._chunked_rest["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IChunkedNext = {};
cljs.core._chunked_next = function _chunked_next(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll)
  }else {
    var x__4090__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._chunked_next[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._chunked_next["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.seq = function seq(coll) {
  if(coll == null) {
    return null
  }else {
    if(cljs.core.truth_(function() {
      var G__5405 = coll;
      if(G__5405) {
        if(cljs.core.truth_(function() {
          var or__3943__auto__ = G__5405.cljs$lang$protocol_mask$partition0$ & 32;
          if(or__3943__auto__) {
            return or__3943__auto__
          }else {
            return G__5405.cljs$core$ASeq$
          }
        }())) {
          return true
        }else {
          if(!G__5405.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.ASeq, G__5405)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.ASeq, G__5405)
      }
    }())) {
      return coll
    }else {
      return cljs.core._seq.call(null, coll)
    }
  }
};
cljs.core.first = function first(coll) {
  if(coll == null) {
    return null
  }else {
    if(cljs.core.truth_(function() {
      var G__5407 = coll;
      if(G__5407) {
        if(cljs.core.truth_(function() {
          var or__3943__auto__ = G__5407.cljs$lang$protocol_mask$partition0$ & 64;
          if(or__3943__auto__) {
            return or__3943__auto__
          }else {
            return G__5407.cljs$core$ISeq$
          }
        }())) {
          return true
        }else {
          if(!G__5407.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__5407)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__5407)
      }
    }())) {
      return cljs.core._first.call(null, coll)
    }else {
      var s = cljs.core.seq.call(null, coll);
      if(s == null) {
        return null
      }else {
        return cljs.core._first.call(null, s)
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if(!(coll == null)) {
    if(cljs.core.truth_(function() {
      var G__5409 = coll;
      if(G__5409) {
        if(cljs.core.truth_(function() {
          var or__3943__auto__ = G__5409.cljs$lang$protocol_mask$partition0$ & 64;
          if(or__3943__auto__) {
            return or__3943__auto__
          }else {
            return G__5409.cljs$core$ISeq$
          }
        }())) {
          return true
        }else {
          if(!G__5409.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__5409)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__5409)
      }
    }())) {
      return cljs.core._rest.call(null, coll)
    }else {
      var s = cljs.core.seq.call(null, coll);
      if(!(s == null)) {
        return cljs.core._rest.call(null, s)
      }else {
        return cljs.core.List.EMPTY
      }
    }
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.next = function next(coll) {
  if(coll == null) {
    return null
  }else {
    if(cljs.core.truth_(function() {
      var G__5411 = coll;
      if(G__5411) {
        if(cljs.core.truth_(function() {
          var or__3943__auto__ = G__5411.cljs$lang$protocol_mask$partition0$ & 128;
          if(or__3943__auto__) {
            return or__3943__auto__
          }else {
            return G__5411.cljs$core$INext$
          }
        }())) {
          return true
        }else {
          if(!G__5411.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.INext, G__5411)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.INext, G__5411)
      }
    }())) {
      return cljs.core._next.call(null, coll)
    }else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll))
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true
  };
  var _EQ___2 = function(x, y) {
    var or__3943__auto__ = x === y;
    if(or__3943__auto__) {
      return or__3943__auto__
    }else {
      return cljs.core._equiv.call(null, x, y)
    }
  };
  var _EQ___3 = function() {
    var G__5412__delegate = function(x, y, more) {
      while(true) {
        if(cljs.core.truth_(_EQ_.call(null, x, y))) {
          if(cljs.core.next.call(null, more)) {
            var G__5413 = y;
            var G__5414 = cljs.core.first.call(null, more);
            var G__5415 = cljs.core.next.call(null, more);
            x = G__5413;
            y = G__5414;
            more = G__5415;
            continue
          }else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more))
          }
        }else {
          return false
        }
        break
      }
    };
    var G__5412 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__5412__delegate.call(this, x, y, more)
    };
    G__5412.cljs$lang$maxFixedArity = 2;
    G__5412.cljs$lang$applyTo = function(arglist__5416) {
      var x = cljs.core.first(arglist__5416);
      var y = cljs.core.first(cljs.core.next(arglist__5416));
      var more = cljs.core.rest(cljs.core.next(arglist__5416));
      return G__5412__delegate(x, y, more)
    };
    G__5412.cljs$lang$arity$variadic = G__5412__delegate;
    return G__5412
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$lang$arity$1 = _EQ___1;
  _EQ_.cljs$lang$arity$2 = _EQ___2;
  _EQ_.cljs$lang$arity$variadic = _EQ___3.cljs$lang$arity$variadic;
  return _EQ_
}();
cljs.core.type = function type(x) {
  if(x == null) {
    return null
  }else {
    return x.constructor
  }
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t
};
cljs.core.hash_map = undefined;
cljs.core.list = undefined;
cljs.core.equiv_sequential = undefined;
cljs.core.IHash["null"] = true;
cljs.core._hash["null"] = function(o) {
  return 0
};
cljs.core.ILookup["null"] = true;
cljs.core._lookup["null"] = function() {
  var G__5417 = null;
  var G__5417__2 = function(o, k) {
    return null
  };
  var G__5417__3 = function(o, k, not_found) {
    return not_found
  };
  G__5417 = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5417__2.call(this, o, k);
      case 3:
        return G__5417__3.call(this, o, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5417
}();
cljs.core.IAssociative["null"] = true;
cljs.core._assoc["null"] = function(_, k, v) {
  return cljs.core.hash_map.call(null, k, v)
};
cljs.core.INext["null"] = true;
cljs.core._next["null"] = function(_) {
  return null
};
cljs.core.IPrintWithWriter["null"] = true;
cljs.core._pr_writer["null"] = function(o, writer, _) {
  return cljs.core._write.call(null, writer, "nil")
};
cljs.core.ICollection["null"] = true;
cljs.core._conj["null"] = function(_, o) {
  return cljs.core.list.call(null, o)
};
cljs.core.IReduce["null"] = true;
cljs.core._reduce["null"] = function() {
  var G__5418 = null;
  var G__5418__2 = function(_, f) {
    return f.call(null)
  };
  var G__5418__3 = function(_, f, start) {
    return start
  };
  G__5418 = function(_, f, start) {
    switch(arguments.length) {
      case 2:
        return G__5418__2.call(this, _, f);
      case 3:
        return G__5418__3.call(this, _, f, start)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5418
}();
cljs.core.IPrintable["null"] = true;
cljs.core._pr_seq["null"] = function(o) {
  return cljs.core.list.call(null, "nil")
};
cljs.core.ISet["null"] = true;
cljs.core._disjoin["null"] = function(_, v) {
  return null
};
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0
};
cljs.core.IStack["null"] = true;
cljs.core._peek["null"] = function(_) {
  return null
};
cljs.core._pop["null"] = function(_) {
  return null
};
cljs.core.ISeq["null"] = true;
cljs.core._first["null"] = function(_) {
  return null
};
cljs.core._rest["null"] = function(_) {
  return cljs.core.list.call(null)
};
cljs.core.IEquiv["null"] = true;
cljs.core._equiv["null"] = function(_, o) {
  return o == null
};
cljs.core.IWithMeta["null"] = true;
cljs.core._with_meta["null"] = function(_, meta) {
  return null
};
cljs.core.IMeta["null"] = true;
cljs.core._meta["null"] = function(_) {
  return null
};
cljs.core.IIndexed["null"] = true;
cljs.core._nth["null"] = function() {
  var G__5419 = null;
  var G__5419__2 = function(_, n) {
    return null
  };
  var G__5419__3 = function(_, n, not_found) {
    return not_found
  };
  G__5419 = function(_, n, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5419__2.call(this, _, n);
      case 3:
        return G__5419__3.call(this, _, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5419
}();
cljs.core.IEmptyableCollection["null"] = true;
cljs.core._empty["null"] = function(_) {
  return null
};
cljs.core.IMap["null"] = true;
cljs.core._dissoc["null"] = function(_, k) {
  return null
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var and__3941__auto__ = cljs.core.instance_QMARK_.call(null, Date, other);
  if(and__3941__auto__) {
    return o.toString() === other.toString()
  }else {
    return and__3941__auto__
  }
};
cljs.core.IHash["number"] = true;
cljs.core._hash["number"] = function(o) {
  return Math.floor(o) % 2147483647
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o
};
cljs.core.IHash["boolean"] = true;
cljs.core._hash["boolean"] = function(o) {
  if(o === true) {
    return 1
  }else {
    return 0
  }
};
cljs.core.with_meta = undefined;
cljs.core.IWithMeta["function"] = true;
cljs.core._with_meta["function"] = function(f, meta) {
  return cljs.core.with_meta.call(null, function() {
    if(void 0 === cljs.core.t5420) {
      goog.provide("cljs.core.t5420");
      cljs.core.t5420 = function(meta, f, meta5421) {
        this.meta = meta;
        this.f = f;
        this.meta5421 = meta5421;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393217
      };
      cljs.core.t5420.cljs$lang$type = true;
      cljs.core.t5420.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
        return cljs.core.list.call(null, "cljs.core/t5420")
      };
      cljs.core.t5420.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
        return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/t5420")
      };
      cljs.core.t5420.prototype.call = function() {
        var G__5424__delegate = function(self__, args) {
          var self____$1 = this;
          var _ = self____$1;
          return cljs.core.apply.call(null, self__.f, args)
        };
        var G__5424 = function(self__, var_args) {
          var self__ = this;
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
          }
          return G__5424__delegate.call(this, self__, args)
        };
        G__5424.cljs$lang$maxFixedArity = 1;
        G__5424.cljs$lang$applyTo = function(arglist__5425) {
          var self__ = cljs.core.first(arglist__5425);
          var args = cljs.core.rest(arglist__5425);
          return G__5424__delegate(self__, args)
        };
        G__5424.cljs$lang$arity$variadic = G__5424__delegate;
        return G__5424
      }();
      cljs.core.t5420.prototype.apply = function(self__, args5423) {
        var self__ = this;
        return self__.call.apply(self__, [self__].concat(args5423.slice()))
      };
      cljs.core.t5420.prototype.cljs$core$Fn$ = true;
      cljs.core.t5420.prototype.cljs$core$IMeta$_meta$arity$1 = function(_5422) {
        var self__ = this;
        return self__.meta5421
      };
      cljs.core.t5420.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_5422, meta5421__$1) {
        var self__ = this;
        return new cljs.core.t5420(self__.meta, self__.f, meta5421__$1)
      }
    }else {
    }
    return new cljs.core.t5420(meta, f, null)
  }(), meta)
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o)
};
cljs.core.inc = function inc(x) {
  return x + 1
};
cljs.core.deref = undefined;
goog.provide("cljs.core.Reduced");
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/Reduced")
};
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/Reduced")
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  return self__.val
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x)
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return cljs.core.instance_QMARK_.call(null, cljs.core.Reduced, r)
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if(cnt === 0) {
      return f.call(null)
    }else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while(true) {
        if(n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if(cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval)
          }else {
            var G__5426 = nval;
            var G__5427 = n + 1;
            val = G__5426;
            n = G__5427;
            continue
          }
        }else {
          return val
        }
        break
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__5428 = nval;
          var G__5429 = n + 1;
          val__$1 = G__5428;
          n = G__5429;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__5430 = nval;
          var G__5431 = n + 1;
          val__$1 = G__5430;
          n = G__5431;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$lang$arity$2 = ci_reduce__2;
  ci_reduce.cljs$lang$arity$3 = ci_reduce__3;
  ci_reduce.cljs$lang$arity$4 = ci_reduce__4;
  return ci_reduce
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if(arr.length === 0) {
      return f.call(null)
    }else {
      var val = arr[0];
      var n = 1;
      while(true) {
        if(n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if(cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval)
          }else {
            var G__5432 = nval;
            var G__5433 = n + 1;
            val = G__5432;
            n = G__5433;
            continue
          }
        }else {
          return val
        }
        break
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__5434 = nval;
          var G__5435 = n + 1;
          val__$1 = G__5434;
          n = G__5435;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__5436 = nval;
          var G__5437 = n + 1;
          val__$1 = G__5436;
          n = G__5437;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$lang$arity$2 = array_reduce__2;
  array_reduce.cljs$lang$arity$3 = array_reduce__3;
  array_reduce.cljs$lang$arity$4 = array_reduce__4;
  return array_reduce
}();
cljs.core.hash_coll = undefined;
cljs.core.cons = undefined;
cljs.core.pr_str = undefined;
cljs.core.RSeq = undefined;
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__5439 = x;
  if(G__5439) {
    if(cljs.core.truth_(function() {
      var or__3943__auto__ = G__5439.cljs$lang$protocol_mask$partition0$ & 2;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return G__5439.cljs$core$ICounted$
      }
    }())) {
      return true
    }else {
      if(!G__5439.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.ICounted, G__5439)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.ICounted, G__5439)
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__5441 = x;
  if(G__5441) {
    if(cljs.core.truth_(function() {
      var or__3943__auto__ = G__5441.cljs$lang$protocol_mask$partition0$ & 16;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return G__5441.cljs$core$IIndexed$
      }
    }())) {
      return true
    }else {
      if(!G__5441.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IIndexed, G__5441)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IIndexed, G__5441)
  }
};
goog.provide("cljs.core.IndexedSeq");
cljs.core.IndexedSeq = function(a, i) {
  this.a = a;
  this.i = i;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 166199550
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/IndexedSeq")
};
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/IndexedSeq")
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.hash_coll.call(null, coll)
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  if(self__.i + 1 < self__.a.length) {
    return new cljs.core.IndexedSeq(self__.a, self__.i + 1)
  }else {
    return null
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var c = coll.cljs$core$ICounted$_count$arity$1(coll);
  if(c > 0) {
    return new cljs.core.RSeq(coll, c - 1, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  if(cljs.core.counted_QMARK_.call(null, self__.a)) {
    return cljs.core.ci_reduce.call(null, self__.a, f, self__.a[self__.i], self__.i + 1)
  }else {
    return cljs.core.ci_reduce.call(null, coll, f, self__.a[self__.i], 0)
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  if(cljs.core.counted_QMARK_.call(null, self__.a)) {
    return cljs.core.ci_reduce.call(null, self__.a, f, start, self__.i)
  }else {
    return cljs.core.ci_reduce.call(null, coll, f, start, 0)
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  return this$
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  return self__.a.length - self__.i
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  return self__.a[self__.i]
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  if(self__.i + 1 < self__.a.length) {
    return new cljs.core.IndexedSeq(self__.a, self__.i + 1)
  }else {
    return cljs.core.list.call(null)
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var i__$1 = n + self__.i;
  if(i__$1 < self__.a.length) {
    return self__.a[i__$1]
  }else {
    return null
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var i__$1 = n + self__.i;
  if(i__$1 < self__.a.length) {
    return self__.a[i__$1]
  }else {
    return not_found
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.List.EMPTY
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0)
  };
  var prim_seq__2 = function(prim, i) {
    if(i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i)
    }else {
      return null
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$lang$arity$1 = prim_seq__1;
  prim_seq.cljs$lang$arity$2 = prim_seq__2;
  return prim_seq
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0)
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i)
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$lang$arity$1 = array_seq__1;
  array_seq.cljs$lang$arity$2 = array_seq__2;
  return array_seq
}();
cljs.core.IReduce["array"] = true;
cljs.core._reduce["array"] = function() {
  var G__5442 = null;
  var G__5442__2 = function(array, f) {
    return cljs.core.ci_reduce.call(null, array, f)
  };
  var G__5442__3 = function(array, f, start) {
    return cljs.core.ci_reduce.call(null, array, f, start)
  };
  G__5442 = function(array, f, start) {
    switch(arguments.length) {
      case 2:
        return G__5442__2.call(this, array, f);
      case 3:
        return G__5442__3.call(this, array, f, start)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5442
}();
cljs.core.ILookup["array"] = true;
cljs.core._lookup["array"] = function() {
  var G__5443 = null;
  var G__5443__2 = function(array, k) {
    return array[k]
  };
  var G__5443__3 = function(array, k, not_found) {
    return cljs.core._nth.call(null, array, k, not_found)
  };
  G__5443 = function(array, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5443__2.call(this, array, k);
      case 3:
        return G__5443__3.call(this, array, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5443
}();
cljs.core.IIndexed["array"] = true;
cljs.core._nth["array"] = function() {
  var G__5444 = null;
  var G__5444__2 = function(array, n) {
    if(n < array.length) {
      return array[n]
    }else {
      return null
    }
  };
  var G__5444__3 = function(array, n, not_found) {
    if(n < array.length) {
      return array[n]
    }else {
      return not_found
    }
  };
  G__5444 = function(array, n, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5444__2.call(this, array, n);
      case 3:
        return G__5444__3.call(this, array, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5444
}();
cljs.core.ICounted["array"] = true;
cljs.core._count["array"] = function(a) {
  return a.length
};
cljs.core.ISeqable["array"] = true;
cljs.core._seq["array"] = function(array) {
  return cljs.core.array_seq.call(null, array, 0)
};
cljs.core.with_meta = undefined;
goog.provide("cljs.core.RSeq");
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850574
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/RSeq")
};
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/RSeq")
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.hash_coll.call(null, coll)
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.i + 1
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._nth.call(null, self__.ci, self__.i)
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  if(self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta)
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll))
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll))
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll))
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll))
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll))
};
cljs.core.last = function last(s) {
  while(true) {
    var sn = cljs.core.next.call(null, s);
    if(!(sn == null)) {
      var G__5445 = sn;
      s = G__5445;
      continue
    }else {
      return cljs.core.first.call(null, s)
    }
    break
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    return cljs.core._conj.call(null, coll, x)
  };
  var conj__3 = function() {
    var G__5446__delegate = function(coll, x, xs) {
      while(true) {
        if(cljs.core.truth_(xs)) {
          var G__5447 = conj.call(null, coll, x);
          var G__5448 = cljs.core.first.call(null, xs);
          var G__5449 = cljs.core.next.call(null, xs);
          coll = G__5447;
          x = G__5448;
          xs = G__5449;
          continue
        }else {
          return conj.call(null, coll, x)
        }
        break
      }
    };
    var G__5446 = function(coll, x, var_args) {
      var xs = null;
      if(goog.isDef(var_args)) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__5446__delegate.call(this, coll, x, xs)
    };
    G__5446.cljs$lang$maxFixedArity = 2;
    G__5446.cljs$lang$applyTo = function(arglist__5450) {
      var coll = cljs.core.first(arglist__5450);
      var x = cljs.core.first(cljs.core.next(arglist__5450));
      var xs = cljs.core.rest(cljs.core.next(arglist__5450));
      return G__5446__delegate(coll, x, xs)
    };
    G__5446.cljs$lang$arity$variadic = G__5446__delegate;
    return G__5446
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$lang$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$lang$arity$2 = conj__2;
  conj.cljs$lang$arity$variadic = conj__3.cljs$lang$arity$variadic;
  return conj
}();
cljs.core.empty = function empty(coll) {
  return cljs.core._empty.call(null, coll)
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while(true) {
    if(cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s)
    }else {
      var G__5451 = cljs.core.next.call(null, s);
      var G__5452 = acc + 1;
      s = G__5451;
      acc = G__5452;
      continue
    }
    break
  }
};
cljs.core.count = function count(coll) {
  if(cljs.core.counted_QMARK_.call(null, coll)) {
    return cljs.core._count.call(null, coll)
  }else {
    return cljs.core.accumulating_seq_count.call(null, coll)
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while(true) {
      if(coll == null) {
        throw new Error("Index out of bounds");
      }else {
        if(n === 0) {
          if(cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll)
          }else {
            throw new Error("Index out of bounds");
          }
        }else {
          if(cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n)
          }else {
            if(cljs.core.seq.call(null, coll)) {
              var G__5453 = cljs.core.next.call(null, coll);
              var G__5454 = n - 1;
              coll = G__5453;
              n = G__5454;
              continue
            }else {
              if("\ufdd0:else") {
                throw new Error("Index out of bounds");
              }else {
                return null
              }
            }
          }
        }
      }
      break
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while(true) {
      if(coll == null) {
        return not_found
      }else {
        if(n === 0) {
          if(cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll)
          }else {
            return not_found
          }
        }else {
          if(cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found)
          }else {
            if(cljs.core.seq.call(null, coll)) {
              var G__5455 = cljs.core.next.call(null, coll);
              var G__5456 = n - 1;
              var G__5457 = not_found;
              coll = G__5455;
              n = G__5456;
              not_found = G__5457;
              continue
            }else {
              if("\ufdd0:else") {
                return not_found
              }else {
                return null
              }
            }
          }
        }
      }
      break
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$lang$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$lang$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if(coll == null) {
      return null
    }else {
      if(cljs.core.truth_(function() {
        var G__5460 = coll;
        if(G__5460) {
          if(cljs.core.truth_(function() {
            var or__3943__auto__ = G__5460.cljs$lang$protocol_mask$partition0$ & 16;
            if(or__3943__auto__) {
              return or__3943__auto__
            }else {
              return G__5460.cljs$core$IIndexed$
            }
          }())) {
            return true
          }else {
            if(!G__5460.cljs$lang$protocol_mask$partition0$) {
              return cljs.core.type_satisfies_.call(null, cljs.core.IIndexed, G__5460)
            }else {
              return false
            }
          }
        }else {
          return cljs.core.type_satisfies_.call(null, cljs.core.IIndexed, G__5460)
        }
      }())) {
        return cljs.core._nth.call(null, coll, Math.floor(n))
      }else {
        return cljs.core.linear_traversal_nth.call(null, coll, Math.floor(n))
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if(!(coll == null)) {
      if(cljs.core.truth_(function() {
        var G__5461 = coll;
        if(G__5461) {
          if(cljs.core.truth_(function() {
            var or__3943__auto__ = G__5461.cljs$lang$protocol_mask$partition0$ & 16;
            if(or__3943__auto__) {
              return or__3943__auto__
            }else {
              return G__5461.cljs$core$IIndexed$
            }
          }())) {
            return true
          }else {
            if(!G__5461.cljs$lang$protocol_mask$partition0$) {
              return cljs.core.type_satisfies_.call(null, cljs.core.IIndexed, G__5461)
            }else {
              return false
            }
          }
        }else {
          return cljs.core.type_satisfies_.call(null, cljs.core.IIndexed, G__5461)
        }
      }())) {
        return cljs.core._nth.call(null, coll, Math.floor(n), not_found)
      }else {
        return cljs.core.linear_traversal_nth.call(null, coll, Math.floor(n), not_found)
      }
    }else {
      return not_found
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$lang$arity$2 = nth__2;
  nth.cljs$lang$arity$3 = nth__3;
  return nth
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    return cljs.core._lookup.call(null, o, k)
  };
  var get__3 = function(o, k, not_found) {
    return cljs.core._lookup.call(null, o, k, not_found)
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$lang$arity$2 = get__2;
  get.cljs$lang$arity$3 = get__3;
  return get
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    return cljs.core._assoc.call(null, coll, k, v)
  };
  var assoc__4 = function() {
    var G__5462__delegate = function(coll, k, v, kvs) {
      while(true) {
        var ret = assoc.call(null, coll, k, v);
        if(cljs.core.truth_(kvs)) {
          var G__5463 = ret;
          var G__5464 = cljs.core.first.call(null, kvs);
          var G__5465 = cljs.core.second.call(null, kvs);
          var G__5466 = cljs.core.nnext.call(null, kvs);
          coll = G__5463;
          k = G__5464;
          v = G__5465;
          kvs = G__5466;
          continue
        }else {
          return ret
        }
        break
      }
    };
    var G__5462 = function(coll, k, v, var_args) {
      var kvs = null;
      if(goog.isDef(var_args)) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__5462__delegate.call(this, coll, k, v, kvs)
    };
    G__5462.cljs$lang$maxFixedArity = 3;
    G__5462.cljs$lang$applyTo = function(arglist__5467) {
      var coll = cljs.core.first(arglist__5467);
      var k = cljs.core.first(cljs.core.next(arglist__5467));
      var v = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5467)));
      var kvs = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5467)));
      return G__5462__delegate(coll, k, v, kvs)
    };
    G__5462.cljs$lang$arity$variadic = G__5462__delegate;
    return G__5462
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$lang$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$lang$arity$3 = assoc__3;
  assoc.cljs$lang$arity$variadic = assoc__4.cljs$lang$arity$variadic;
  return assoc
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll
  };
  var dissoc__2 = function(coll, k) {
    return cljs.core._dissoc.call(null, coll, k)
  };
  var dissoc__3 = function() {
    var G__5468__delegate = function(coll, k, ks) {
      while(true) {
        var ret = dissoc.call(null, coll, k);
        if(cljs.core.truth_(ks)) {
          var G__5469 = ret;
          var G__5470 = cljs.core.first.call(null, ks);
          var G__5471 = cljs.core.next.call(null, ks);
          coll = G__5469;
          k = G__5470;
          ks = G__5471;
          continue
        }else {
          return ret
        }
        break
      }
    };
    var G__5468 = function(coll, k, var_args) {
      var ks = null;
      if(goog.isDef(var_args)) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__5468__delegate.call(this, coll, k, ks)
    };
    G__5468.cljs$lang$maxFixedArity = 2;
    G__5468.cljs$lang$applyTo = function(arglist__5472) {
      var coll = cljs.core.first(arglist__5472);
      var k = cljs.core.first(cljs.core.next(arglist__5472));
      var ks = cljs.core.rest(cljs.core.next(arglist__5472));
      return G__5468__delegate(coll, k, ks)
    };
    G__5468.cljs$lang$arity$variadic = G__5468__delegate;
    return G__5468
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$lang$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$lang$arity$1 = dissoc__1;
  dissoc.cljs$lang$arity$2 = dissoc__2;
  dissoc.cljs$lang$arity$variadic = dissoc__3.cljs$lang$arity$variadic;
  return dissoc
}();
cljs.core.with_meta = function with_meta(o, meta) {
  return cljs.core._with_meta.call(null, o, meta)
};
cljs.core.meta = function meta(o) {
  if(cljs.core.truth_(function() {
    var G__5474 = o;
    if(G__5474) {
      if(cljs.core.truth_(function() {
        var or__3943__auto__ = G__5474.cljs$lang$protocol_mask$partition0$ & 131072;
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          return G__5474.cljs$core$IMeta$
        }
      }())) {
        return true
      }else {
        if(!G__5474.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.IMeta, G__5474)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.IMeta, G__5474)
    }
  }())) {
    return cljs.core._meta.call(null, o)
  }else {
    return null
  }
};
cljs.core.peek = function peek(coll) {
  return cljs.core._peek.call(null, coll)
};
cljs.core.pop = function pop(coll) {
  return cljs.core._pop.call(null, coll)
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll
  };
  var disj__2 = function(coll, k) {
    return cljs.core._disjoin.call(null, coll, k)
  };
  var disj__3 = function() {
    var G__5475__delegate = function(coll, k, ks) {
      while(true) {
        var ret = disj.call(null, coll, k);
        if(cljs.core.truth_(ks)) {
          var G__5476 = ret;
          var G__5477 = cljs.core.first.call(null, ks);
          var G__5478 = cljs.core.next.call(null, ks);
          coll = G__5476;
          k = G__5477;
          ks = G__5478;
          continue
        }else {
          return ret
        }
        break
      }
    };
    var G__5475 = function(coll, k, var_args) {
      var ks = null;
      if(goog.isDef(var_args)) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__5475__delegate.call(this, coll, k, ks)
    };
    G__5475.cljs$lang$maxFixedArity = 2;
    G__5475.cljs$lang$applyTo = function(arglist__5479) {
      var coll = cljs.core.first(arglist__5479);
      var k = cljs.core.first(cljs.core.next(arglist__5479));
      var ks = cljs.core.rest(cljs.core.next(arglist__5479));
      return G__5475__delegate(coll, k, ks)
    };
    G__5475.cljs$lang$arity$variadic = G__5475__delegate;
    return G__5475
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$lang$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$lang$arity$1 = disj__1;
  disj.cljs$lang$arity$2 = disj__2;
  disj.cljs$lang$arity$variadic = disj__3.cljs$lang$arity$variadic;
  return disj
}();
cljs.core.string_hash_cache = {};
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if(cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = {};
    cljs.core.string_hash_cache_count = 0
  }else {
  }
  var h = cljs.core.string_hash_cache[k];
  if(!(h == null)) {
    return h
  }else {
    return cljs.core.add_to_string_hash_cache.call(null, k)
  }
};
cljs.core.hash = function() {
  var hash = null;
  var hash__1 = function(o) {
    return hash.call(null, o, true)
  };
  var hash__2 = function(o, check_cache) {
    if(cljs.core.truth_(function() {
      var and__3941__auto__ = goog.isString(o);
      if(and__3941__auto__) {
        return check_cache
      }else {
        return and__3941__auto__
      }
    }())) {
      return cljs.core.check_string_hash_cache.call(null, o)
    }else {
      return cljs.core._hash.call(null, o)
    }
  };
  hash = function(o, check_cache) {
    switch(arguments.length) {
      case 1:
        return hash__1.call(this, o);
      case 2:
        return hash__2.call(this, o, check_cache)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash.cljs$lang$arity$1 = hash__1;
  hash.cljs$lang$arity$2 = hash__2;
  return hash
}();
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  var or__3943__auto__ = coll == null;
  if(or__3943__auto__) {
    return or__3943__auto__
  }else {
    return cljs.core.not.call(null, cljs.core.seq.call(null, coll))
  }
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if(x == null) {
    return false
  }else {
    var G__5481 = x;
    if(G__5481) {
      if(cljs.core.truth_(function() {
        var or__3943__auto__ = G__5481.cljs$lang$protocol_mask$partition0$ & 8;
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          return G__5481.cljs$core$ICollection$
        }
      }())) {
        return true
      }else {
        if(!G__5481.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.ICollection, G__5481)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.ICollection, G__5481)
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if(x == null) {
    return false
  }else {
    var G__5483 = x;
    if(G__5483) {
      if(cljs.core.truth_(function() {
        var or__3943__auto__ = G__5483.cljs$lang$protocol_mask$partition0$ & 4096;
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          return G__5483.cljs$core$ISet$
        }
      }())) {
        return true
      }else {
        if(!G__5483.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.ISet, G__5483)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.ISet, G__5483)
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__5485 = x;
  if(G__5485) {
    if(cljs.core.truth_(function() {
      var or__3943__auto__ = G__5485.cljs$lang$protocol_mask$partition0$ & 512;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return G__5485.cljs$core$IAssociative$
      }
    }())) {
      return true
    }else {
      if(!G__5485.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IAssociative, G__5485)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IAssociative, G__5485)
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__5487 = x;
  if(G__5487) {
    if(cljs.core.truth_(function() {
      var or__3943__auto__ = G__5487.cljs$lang$protocol_mask$partition0$ & 16777216;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return G__5487.cljs$core$ISequential$
      }
    }())) {
      return true
    }else {
      if(!G__5487.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.ISequential, G__5487)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.ISequential, G__5487)
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__5489 = x;
  if(G__5489) {
    if(cljs.core.truth_(function() {
      var or__3943__auto__ = G__5489.cljs$lang$protocol_mask$partition0$ & 524288;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return G__5489.cljs$core$IReduce$
      }
    }())) {
      return true
    }else {
      if(!G__5489.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IReduce, G__5489)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IReduce, G__5489)
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if(x == null) {
    return false
  }else {
    var G__5491 = x;
    if(G__5491) {
      if(cljs.core.truth_(function() {
        var or__3943__auto__ = G__5491.cljs$lang$protocol_mask$partition0$ & 1024;
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          return G__5491.cljs$core$IMap$
        }
      }())) {
        return true
      }else {
        if(!G__5491.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.IMap, G__5491)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.IMap, G__5491)
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__5493 = x;
  if(G__5493) {
    if(cljs.core.truth_(function() {
      var or__3943__auto__ = G__5493.cljs$lang$protocol_mask$partition0$ & 16384;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return G__5493.cljs$core$IVector$
      }
    }())) {
      return true
    }else {
      if(!G__5493.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IVector, G__5493)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IVector, G__5493)
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__5495 = x;
  if(G__5495) {
    if(cljs.core.truth_(function() {
      var or__3943__auto__ = G__5495.cljs$lang$protocol_mask$partition1$ & 512;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return G__5495.cljs$core$IChunkedSeq$
      }
    }())) {
      return true
    }else {
      if(!G__5495.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IChunkedSeq, G__5495)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IChunkedSeq, G__5495)
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    return{}
  };
  var js_obj__1 = function() {
    var G__5496__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals)
    };
    var G__5496 = function(var_args) {
      var keyvals = null;
      if(goog.isDef(var_args)) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__5496__delegate.call(this, keyvals)
    };
    G__5496.cljs$lang$maxFixedArity = 0;
    G__5496.cljs$lang$applyTo = function(arglist__5497) {
      var keyvals = cljs.core.seq(arglist__5497);
      return G__5496__delegate(keyvals)
    };
    G__5496.cljs$lang$arity$variadic = G__5496__delegate;
    return G__5496
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$lang$arity$variadic(cljs.core.array_seq(arguments, 0))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$lang$arity$0 = js_obj__0;
  js_obj.cljs$lang$arity$variadic = js_obj__1.cljs$lang$arity$variadic;
  return js_obj
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(val, key, obj__$1) {
    return keys.push(key)
  });
  return keys
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key]
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while(true) {
    if(len__$1 === 0) {
      return to
    }else {
      to[j__$1] = from[i__$1];
      var G__5498 = i__$1 + 1;
      var G__5499 = j__$1 + 1;
      var G__5500 = len__$1 - 1;
      i__$1 = G__5498;
      j__$1 = G__5499;
      len__$1 = G__5500;
      continue
    }
    break
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while(true) {
    if(len__$1 === 0) {
      return to
    }else {
      to[j__$1] = from[i__$1];
      var G__5501 = i__$1 - 1;
      var G__5502 = j__$1 - 1;
      var G__5503 = len__$1 - 1;
      i__$1 = G__5501;
      j__$1 = G__5502;
      len__$1 = G__5503;
      continue
    }
    break
  }
};
cljs.core.lookup_sentinel = {};
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if(s == null) {
    return false
  }else {
    var G__5505 = s;
    if(G__5505) {
      if(cljs.core.truth_(function() {
        var or__3943__auto__ = G__5505.cljs$lang$protocol_mask$partition0$ & 64;
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          return G__5505.cljs$core$ISeq$
        }
      }())) {
        return true
      }else {
        if(!G__5505.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__5505)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__5505)
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__5507 = s;
  if(G__5507) {
    if(cljs.core.truth_(function() {
      var or__3943__auto__ = G__5507.cljs$lang$protocol_mask$partition0$ & 8388608;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return G__5507.cljs$core$ISeqable$
      }
    }())) {
      return true
    }else {
      if(!G__5507.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.ISeqable, G__5507)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.ISeqable, G__5507)
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if(cljs.core.truth_(x)) {
    return true
  }else {
    return false
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  var and__3941__auto__ = goog.isString(x);
  if(and__3941__auto__) {
    return cljs.core.not.call(null, function() {
      var or__3943__auto__ = x.charAt(0) === "\ufdd0";
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return x.charAt(0) === "\ufdd1"
      }
    }())
  }else {
    return and__3941__auto__
  }
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  var and__3941__auto__ = goog.isString(x);
  if(and__3941__auto__) {
    return x.charAt(0) === "\ufdd0"
  }else {
    return and__3941__auto__
  }
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  var and__3941__auto__ = goog.isString(x);
  if(and__3941__auto__) {
    return x.charAt(0) === "\ufdd1"
  }else {
    return and__3941__auto__
  }
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return goog.isNumber(n)
};
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3943__auto__ = goog.isFunction(f);
  if(or__3943__auto__) {
    return or__3943__auto__
  }else {
    var G__5509 = f;
    if(G__5509) {
      if(cljs.core.truth_(function() {
        var or__3943__auto____$1 = null;
        if(cljs.core.truth_(or__3943__auto____$1)) {
          return or__3943__auto____$1
        }else {
          return G__5509.cljs$core$Fn$
        }
      }())) {
        return true
      }else {
        if(!G__5509.cljs$lang$protocol_mask$partition$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.Fn, G__5509)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.Fn, G__5509)
    }
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3943__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if(or__3943__auto__) {
    return or__3943__auto__
  }else {
    var G__5511 = f;
    if(G__5511) {
      if(cljs.core.truth_(function() {
        var or__3943__auto____$1 = G__5511.cljs$lang$protocol_mask$partition0$ & 1;
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          return G__5511.cljs$core$IFn$
        }
      }())) {
        return true
      }else {
        if(!G__5511.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.IFn, G__5511)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.IFn, G__5511)
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  var and__3941__auto__ = cljs.core.number_QMARK_.call(null, n);
  if(and__3941__auto__) {
    var and__3941__auto____$1 = !isNaN(n);
    if(and__3941__auto____$1) {
      var and__3941__auto____$2 = !(n === Infinity);
      if(and__3941__auto____$2) {
        return parseFloat(n) === parseInt(n, 10)
      }else {
        return and__3941__auto____$2
      }
    }else {
      return and__3941__auto____$1
    }
  }else {
    return and__3941__auto__
  }
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if(cljs.core._lookup.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false
  }else {
    return true
  }
};
cljs.core.find = function find(coll, k) {
  if(cljs.core.truth_(function() {
    var and__3941__auto__ = !(coll == null);
    if(and__3941__auto__) {
      var and__3941__auto____$1 = cljs.core.associative_QMARK_.call(null, coll);
      if(and__3941__auto____$1) {
        return cljs.core.contains_QMARK_.call(null, coll, k)
      }else {
        return and__3941__auto____$1
      }
    }else {
      return and__3941__auto__
    }
  }())) {
    return cljs.core.PersistentVector.fromArray([k, cljs.core._lookup.call(null, coll, k)], true)
  }else {
    return null
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y)
  };
  var distinct_QMARK___3 = function() {
    var G__5512__delegate = function(x, y, more) {
      if(!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([y, x]);
        var xs = more;
        while(true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if(cljs.core.truth_(xs)) {
            if(cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false
            }else {
              var G__5513 = cljs.core.conj.call(null, s, x__$1);
              var G__5514 = etc;
              s = G__5513;
              xs = G__5514;
              continue
            }
          }else {
            return true
          }
          break
        }
      }else {
        return false
      }
    };
    var G__5512 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__5512__delegate.call(this, x, y, more)
    };
    G__5512.cljs$lang$maxFixedArity = 2;
    G__5512.cljs$lang$applyTo = function(arglist__5515) {
      var x = cljs.core.first(arglist__5515);
      var y = cljs.core.first(cljs.core.next(arglist__5515));
      var more = cljs.core.rest(cljs.core.next(arglist__5515));
      return G__5512__delegate(x, y, more)
    };
    G__5512.cljs$lang$arity$variadic = G__5512__delegate;
    return G__5512
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$lang$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$lang$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$lang$arity$variadic = distinct_QMARK___3.cljs$lang$arity$variadic;
  return distinct_QMARK_
}();
cljs.core.compare = function compare(x, y) {
  if(x === y) {
    return 0
  }else {
    if(x == null) {
      return-1
    }else {
      if(y == null) {
        return 1
      }else {
        if(cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if(cljs.core.truth_(function() {
            var G__5517 = x;
            if(G__5517) {
              if(cljs.core.truth_(function() {
                var or__3943__auto__ = G__5517.cljs$lang$protocol_mask$partition1$ & 2048;
                if(or__3943__auto__) {
                  return or__3943__auto__
                }else {
                  return G__5517.cljs$core$IComparable$
                }
              }())) {
                return true
              }else {
                if(!G__5517.cljs$lang$protocol_mask$partition1$) {
                  return cljs.core.type_satisfies_.call(null, cljs.core.IComparable, G__5517)
                }else {
                  return false
                }
              }
            }else {
              return cljs.core.type_satisfies_.call(null, cljs.core.IComparable, G__5517)
            }
          }())) {
            return cljs.core._compare.call(null, x, y)
          }else {
            return goog.array.defaultCompare(x, y)
          }
        }else {
          if("\ufdd0:else") {
            throw new Error("compare on non-nil objects of different types");
          }else {
            return null
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if(xl < yl) {
      return-1
    }else {
      if(xl > yl) {
        return 1
      }else {
        if("\ufdd0:else") {
          return compare_indexed.call(null, xs, ys, xl, 0)
        }else {
          return null
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while(true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if(cljs.core.truth_(function() {
        var and__3941__auto__ = d === 0;
        if(and__3941__auto__) {
          return n + 1 < len
        }else {
          return and__3941__auto__
        }
      }())) {
        var G__5518 = xs;
        var G__5519 = ys;
        var G__5520 = len;
        var G__5521 = n + 1;
        xs = G__5518;
        ys = G__5519;
        len = G__5520;
        n = G__5521;
        continue
      }else {
        return d
      }
      break
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$lang$arity$2 = compare_indexed__2;
  compare_indexed.cljs$lang$arity$4 = compare_indexed__4;
  return compare_indexed
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if(cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare
  }else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if(cljs.core.number_QMARK_.call(null, r)) {
        return r
      }else {
        if(cljs.core.truth_(r)) {
          return-1
        }else {
          if(cljs.core.truth_(f.call(null, y, x))) {
            return 1
          }else {
            return 0
          }
        }
      }
    }
  }
};
cljs.core.to_array = undefined;
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll)
  };
  var sort__2 = function(comp, coll) {
    if(cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a)
    }else {
      return cljs.core.List.EMPTY
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$lang$arity$1 = sort__1;
  sort.cljs$lang$arity$2 = sort__2;
  return sort
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll)
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y))
    }, coll)
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$lang$arity$2 = sort_by__2;
  sort_by.cljs$lang$arity$3 = sort_by__3;
  return sort_by
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4090__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4090__auto__) {
      var s = temp__4090__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s))
    }else {
      return f.call(null)
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while(true) {
      if(coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__5522 = nval;
          var G__5523 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__5522;
          coll__$1 = G__5523;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$lang$arity$2 = seq_reduce__2;
  seq_reduce.cljs$lang$arity$3 = seq_reduce__3;
  return seq_reduce
}();
cljs.core.vec = undefined;
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a)
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if(cljs.core.truth_(function() {
      var G__5526 = coll;
      if(G__5526) {
        if(cljs.core.truth_(function() {
          var or__3943__auto__ = G__5526.cljs$lang$protocol_mask$partition0$ & 524288;
          if(or__3943__auto__) {
            return or__3943__auto__
          }else {
            return G__5526.cljs$core$IReduce$
          }
        }())) {
          return true
        }else {
          if(!G__5526.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.IReduce, G__5526)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.IReduce, G__5526)
      }
    }())) {
      return cljs.core._reduce.call(null, coll, f)
    }else {
      return cljs.core.seq_reduce.call(null, f, coll)
    }
  };
  var reduce__3 = function(f, val, coll) {
    if(cljs.core.truth_(function() {
      var G__5527 = coll;
      if(G__5527) {
        if(cljs.core.truth_(function() {
          var or__3943__auto__ = G__5527.cljs$lang$protocol_mask$partition0$ & 524288;
          if(or__3943__auto__) {
            return or__3943__auto__
          }else {
            return G__5527.cljs$core$IReduce$
          }
        }())) {
          return true
        }else {
          if(!G__5527.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.IReduce, G__5527)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.IReduce, G__5527)
      }
    }())) {
      return cljs.core._reduce.call(null, coll, f, val)
    }else {
      return cljs.core.seq_reduce.call(null, f, val, coll)
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$lang$arity$2 = reduce__2;
  reduce.cljs$lang$arity$3 = reduce__3;
  return reduce
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  return cljs.core._kv_reduce.call(null, coll, f, init)
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0
  };
  var _PLUS___1 = function(x) {
    return x
  };
  var _PLUS___2 = function(x, y) {
    return x + y
  };
  var _PLUS___3 = function() {
    var G__5528__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more)
    };
    var G__5528 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__5528__delegate.call(this, x, y, more)
    };
    G__5528.cljs$lang$maxFixedArity = 2;
    G__5528.cljs$lang$applyTo = function(arglist__5529) {
      var x = cljs.core.first(arglist__5529);
      var y = cljs.core.first(cljs.core.next(arglist__5529));
      var more = cljs.core.rest(cljs.core.next(arglist__5529));
      return G__5528__delegate(x, y, more)
    };
    G__5528.cljs$lang$arity$variadic = G__5528__delegate;
    return G__5528
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$lang$arity$0 = _PLUS___0;
  _PLUS_.cljs$lang$arity$1 = _PLUS___1;
  _PLUS_.cljs$lang$arity$2 = _PLUS___2;
  _PLUS_.cljs$lang$arity$variadic = _PLUS___3.cljs$lang$arity$variadic;
  return _PLUS_
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x
  };
  var ___2 = function(x, y) {
    return x - y
  };
  var ___3 = function() {
    var G__5530__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more)
    };
    var G__5530 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__5530__delegate.call(this, x, y, more)
    };
    G__5530.cljs$lang$maxFixedArity = 2;
    G__5530.cljs$lang$applyTo = function(arglist__5531) {
      var x = cljs.core.first(arglist__5531);
      var y = cljs.core.first(cljs.core.next(arglist__5531));
      var more = cljs.core.rest(cljs.core.next(arglist__5531));
      return G__5530__delegate(x, y, more)
    };
    G__5530.cljs$lang$arity$variadic = G__5530__delegate;
    return G__5530
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$lang$arity$1 = ___1;
  _.cljs$lang$arity$2 = ___2;
  _.cljs$lang$arity$variadic = ___3.cljs$lang$arity$variadic;
  return _
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1
  };
  var _STAR___1 = function(x) {
    return x
  };
  var _STAR___2 = function(x, y) {
    return x * y
  };
  var _STAR___3 = function() {
    var G__5532__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more)
    };
    var G__5532 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__5532__delegate.call(this, x, y, more)
    };
    G__5532.cljs$lang$maxFixedArity = 2;
    G__5532.cljs$lang$applyTo = function(arglist__5533) {
      var x = cljs.core.first(arglist__5533);
      var y = cljs.core.first(cljs.core.next(arglist__5533));
      var more = cljs.core.rest(cljs.core.next(arglist__5533));
      return G__5532__delegate(x, y, more)
    };
    G__5532.cljs$lang$arity$variadic = G__5532__delegate;
    return G__5532
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$lang$arity$0 = _STAR___0;
  _STAR_.cljs$lang$arity$1 = _STAR___1;
  _STAR_.cljs$lang$arity$2 = _STAR___2;
  _STAR_.cljs$lang$arity$variadic = _STAR___3.cljs$lang$arity$variadic;
  return _STAR_
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x)
  };
  var _SLASH___2 = function(x, y) {
    return x / y
  };
  var _SLASH___3 = function() {
    var G__5534__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more)
    };
    var G__5534 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__5534__delegate.call(this, x, y, more)
    };
    G__5534.cljs$lang$maxFixedArity = 2;
    G__5534.cljs$lang$applyTo = function(arglist__5535) {
      var x = cljs.core.first(arglist__5535);
      var y = cljs.core.first(cljs.core.next(arglist__5535));
      var more = cljs.core.rest(cljs.core.next(arglist__5535));
      return G__5534__delegate(x, y, more)
    };
    G__5534.cljs$lang$arity$variadic = G__5534__delegate;
    return G__5534
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$lang$arity$1 = _SLASH___1;
  _SLASH_.cljs$lang$arity$2 = _SLASH___2;
  _SLASH_.cljs$lang$arity$variadic = _SLASH___3.cljs$lang$arity$variadic;
  return _SLASH_
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true
  };
  var _LT___2 = function(x, y) {
    return x < y
  };
  var _LT___3 = function() {
    var G__5536__delegate = function(x, y, more) {
      while(true) {
        if(x < y) {
          if(cljs.core.next.call(null, more)) {
            var G__5537 = y;
            var G__5538 = cljs.core.first.call(null, more);
            var G__5539 = cljs.core.next.call(null, more);
            x = G__5537;
            y = G__5538;
            more = G__5539;
            continue
          }else {
            return y < cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__5536 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__5536__delegate.call(this, x, y, more)
    };
    G__5536.cljs$lang$maxFixedArity = 2;
    G__5536.cljs$lang$applyTo = function(arglist__5540) {
      var x = cljs.core.first(arglist__5540);
      var y = cljs.core.first(cljs.core.next(arglist__5540));
      var more = cljs.core.rest(cljs.core.next(arglist__5540));
      return G__5536__delegate(x, y, more)
    };
    G__5536.cljs$lang$arity$variadic = G__5536__delegate;
    return G__5536
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$lang$arity$1 = _LT___1;
  _LT_.cljs$lang$arity$2 = _LT___2;
  _LT_.cljs$lang$arity$variadic = _LT___3.cljs$lang$arity$variadic;
  return _LT_
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y
  };
  var _LT__EQ___3 = function() {
    var G__5541__delegate = function(x, y, more) {
      while(true) {
        if(x <= y) {
          if(cljs.core.next.call(null, more)) {
            var G__5542 = y;
            var G__5543 = cljs.core.first.call(null, more);
            var G__5544 = cljs.core.next.call(null, more);
            x = G__5542;
            y = G__5543;
            more = G__5544;
            continue
          }else {
            return y <= cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__5541 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__5541__delegate.call(this, x, y, more)
    };
    G__5541.cljs$lang$maxFixedArity = 2;
    G__5541.cljs$lang$applyTo = function(arglist__5545) {
      var x = cljs.core.first(arglist__5545);
      var y = cljs.core.first(cljs.core.next(arglist__5545));
      var more = cljs.core.rest(cljs.core.next(arglist__5545));
      return G__5541__delegate(x, y, more)
    };
    G__5541.cljs$lang$arity$variadic = G__5541__delegate;
    return G__5541
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$lang$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$lang$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$lang$arity$variadic = _LT__EQ___3.cljs$lang$arity$variadic;
  return _LT__EQ_
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true
  };
  var _GT___2 = function(x, y) {
    return x > y
  };
  var _GT___3 = function() {
    var G__5546__delegate = function(x, y, more) {
      while(true) {
        if(x > y) {
          if(cljs.core.next.call(null, more)) {
            var G__5547 = y;
            var G__5548 = cljs.core.first.call(null, more);
            var G__5549 = cljs.core.next.call(null, more);
            x = G__5547;
            y = G__5548;
            more = G__5549;
            continue
          }else {
            return y > cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__5546 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__5546__delegate.call(this, x, y, more)
    };
    G__5546.cljs$lang$maxFixedArity = 2;
    G__5546.cljs$lang$applyTo = function(arglist__5550) {
      var x = cljs.core.first(arglist__5550);
      var y = cljs.core.first(cljs.core.next(arglist__5550));
      var more = cljs.core.rest(cljs.core.next(arglist__5550));
      return G__5546__delegate(x, y, more)
    };
    G__5546.cljs$lang$arity$variadic = G__5546__delegate;
    return G__5546
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$lang$arity$1 = _GT___1;
  _GT_.cljs$lang$arity$2 = _GT___2;
  _GT_.cljs$lang$arity$variadic = _GT___3.cljs$lang$arity$variadic;
  return _GT_
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y
  };
  var _GT__EQ___3 = function() {
    var G__5551__delegate = function(x, y, more) {
      while(true) {
        if(x >= y) {
          if(cljs.core.next.call(null, more)) {
            var G__5552 = y;
            var G__5553 = cljs.core.first.call(null, more);
            var G__5554 = cljs.core.next.call(null, more);
            x = G__5552;
            y = G__5553;
            more = G__5554;
            continue
          }else {
            return y >= cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__5551 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__5551__delegate.call(this, x, y, more)
    };
    G__5551.cljs$lang$maxFixedArity = 2;
    G__5551.cljs$lang$applyTo = function(arglist__5555) {
      var x = cljs.core.first(arglist__5555);
      var y = cljs.core.first(cljs.core.next(arglist__5555));
      var more = cljs.core.rest(cljs.core.next(arglist__5555));
      return G__5551__delegate(x, y, more)
    };
    G__5551.cljs$lang$arity$variadic = G__5551__delegate;
    return G__5551
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$lang$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$lang$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$lang$arity$variadic = _GT__EQ___3.cljs$lang$arity$variadic;
  return _GT__EQ_
}();
cljs.core.dec = function dec(x) {
  return x - 1
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x
  };
  var max__2 = function(x, y) {
    return x > y ? x : y
  };
  var max__3 = function() {
    var G__5556__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, x > y ? x : y, more)
    };
    var G__5556 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__5556__delegate.call(this, x, y, more)
    };
    G__5556.cljs$lang$maxFixedArity = 2;
    G__5556.cljs$lang$applyTo = function(arglist__5557) {
      var x = cljs.core.first(arglist__5557);
      var y = cljs.core.first(cljs.core.next(arglist__5557));
      var more = cljs.core.rest(cljs.core.next(arglist__5557));
      return G__5556__delegate(x, y, more)
    };
    G__5556.cljs$lang$arity$variadic = G__5556__delegate;
    return G__5556
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$lang$arity$1 = max__1;
  max.cljs$lang$arity$2 = max__2;
  max.cljs$lang$arity$variadic = max__3.cljs$lang$arity$variadic;
  return max
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x
  };
  var min__2 = function(x, y) {
    return x < y ? x : y
  };
  var min__3 = function() {
    var G__5558__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, x < y ? x : y, more)
    };
    var G__5558 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__5558__delegate.call(this, x, y, more)
    };
    G__5558.cljs$lang$maxFixedArity = 2;
    G__5558.cljs$lang$applyTo = function(arglist__5559) {
      var x = cljs.core.first(arglist__5559);
      var y = cljs.core.first(cljs.core.next(arglist__5559));
      var more = cljs.core.rest(cljs.core.next(arglist__5559));
      return G__5558__delegate(x, y, more)
    };
    G__5558.cljs$lang$arity$variadic = G__5558__delegate;
    return G__5558
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$lang$arity$1 = min__1;
  min.cljs$lang$arity$2 = min__2;
  min.cljs$lang$arity$variadic = min__3.cljs$lang$arity$variadic;
  return min
}();
cljs.core.fix = function fix(q) {
  if(q >= 0) {
    return Math.floor.call(null, q)
  }else {
    return Math.ceil.call(null, q)
  }
};
cljs.core.int$ = function int$(x) {
  return cljs.core.fix.call(null, x)
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x)
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d)
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null)
  };
  var rand__1 = function(n) {
    return n * rand.call(null)
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$lang$arity$0 = rand__0;
  rand.cljs$lang$arity$1 = rand__1;
  return rand
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n))
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n)
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n
};
cljs.core.bit_not = function bit_not(x) {
  return~x
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y)
  };
  var _EQ__EQ___3 = function() {
    var G__5560__delegate = function(x, y, more) {
      while(true) {
        if(cljs.core.truth_(_EQ__EQ_.call(null, x, y))) {
          if(cljs.core.next.call(null, more)) {
            var G__5561 = y;
            var G__5562 = cljs.core.first.call(null, more);
            var G__5563 = cljs.core.next.call(null, more);
            x = G__5561;
            y = G__5562;
            more = G__5563;
            continue
          }else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more))
          }
        }else {
          return false
        }
        break
      }
    };
    var G__5560 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__5560__delegate.call(this, x, y, more)
    };
    G__5560.cljs$lang$maxFixedArity = 2;
    G__5560.cljs$lang$applyTo = function(arglist__5564) {
      var x = cljs.core.first(arglist__5564);
      var y = cljs.core.first(cljs.core.next(arglist__5564));
      var more = cljs.core.rest(cljs.core.next(arglist__5564));
      return G__5560__delegate(x, y, more)
    };
    G__5560.cljs$lang$arity$variadic = G__5560__delegate;
    return G__5560
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$lang$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$lang$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$lang$arity$variadic = _EQ__EQ___3.cljs$lang$arity$variadic;
  return _EQ__EQ_
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while(true) {
    if(cljs.core.truth_(function() {
      var and__3941__auto__ = xs;
      if(and__3941__auto__) {
        return n__$1 > 0
      }else {
        return and__3941__auto__
      }
    }())) {
      var G__5565 = n__$1 - 1;
      var G__5566 = cljs.core.next.call(null, xs);
      n__$1 = G__5565;
      xs = G__5566;
      continue
    }else {
      return xs
    }
    break
  }
};
cljs.core.str_STAR_ = function() {
  var str_STAR_ = null;
  var str_STAR___0 = function() {
    return""
  };
  var str_STAR___1 = function(x) {
    if(x == null) {
      return""
    }else {
      if("\ufdd0:else") {
        return x.toString()
      }else {
        return null
      }
    }
  };
  var str_STAR___2 = function() {
    var G__5567__delegate = function(x, ys) {
      return function(sb, more) {
        while(true) {
          if(cljs.core.truth_(more)) {
            var G__5568 = sb.append(str_STAR_.call(null, cljs.core.first.call(null, more)));
            var G__5569 = cljs.core.next.call(null, more);
            sb = G__5568;
            more = G__5569;
            continue
          }else {
            return str_STAR_.call(null, sb)
          }
          break
        }
      }.call(null, new goog.string.StringBuffer(str_STAR_.call(null, x)), ys)
    };
    var G__5567 = function(x, var_args) {
      var ys = null;
      if(goog.isDef(var_args)) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__5567__delegate.call(this, x, ys)
    };
    G__5567.cljs$lang$maxFixedArity = 1;
    G__5567.cljs$lang$applyTo = function(arglist__5570) {
      var x = cljs.core.first(arglist__5570);
      var ys = cljs.core.rest(arglist__5570);
      return G__5567__delegate(x, ys)
    };
    G__5567.cljs$lang$arity$variadic = G__5567__delegate;
    return G__5567
  }();
  str_STAR_ = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str_STAR___0.call(this);
      case 1:
        return str_STAR___1.call(this, x);
      default:
        return str_STAR___2.cljs$lang$arity$variadic(x, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str_STAR_.cljs$lang$maxFixedArity = 1;
  str_STAR_.cljs$lang$applyTo = str_STAR___2.cljs$lang$applyTo;
  str_STAR_.cljs$lang$arity$0 = str_STAR___0;
  str_STAR_.cljs$lang$arity$1 = str_STAR___1;
  str_STAR_.cljs$lang$arity$variadic = str_STAR___2.cljs$lang$arity$variadic;
  return str_STAR_
}();
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return""
  };
  var str__1 = function(x) {
    if(cljs.core.symbol_QMARK_.call(null, x)) {
      return x.substring(2, x.length)
    }else {
      if(cljs.core.keyword_QMARK_.call(null, x)) {
        return cljs.core.str_STAR_.call(null, ":", x.substring(2, x.length))
      }else {
        if(x == null) {
          return""
        }else {
          if("\ufdd0:else") {
            return x.toString()
          }else {
            return null
          }
        }
      }
    }
  };
  var str__2 = function() {
    var G__5571__delegate = function(x, ys) {
      return function(sb, more) {
        while(true) {
          if(cljs.core.truth_(more)) {
            var G__5572 = sb.append(str.call(null, cljs.core.first.call(null, more)));
            var G__5573 = cljs.core.next.call(null, more);
            sb = G__5572;
            more = G__5573;
            continue
          }else {
            return cljs.core.str_STAR_.call(null, sb)
          }
          break
        }
      }.call(null, new goog.string.StringBuffer(str.call(null, x)), ys)
    };
    var G__5571 = function(x, var_args) {
      var ys = null;
      if(goog.isDef(var_args)) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__5571__delegate.call(this, x, ys)
    };
    G__5571.cljs$lang$maxFixedArity = 1;
    G__5571.cljs$lang$applyTo = function(arglist__5574) {
      var x = cljs.core.first(arglist__5574);
      var ys = cljs.core.rest(arglist__5574);
      return G__5571__delegate(x, ys)
    };
    G__5571.cljs$lang$arity$variadic = G__5571__delegate;
    return G__5571
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$lang$arity$variadic(x, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$lang$arity$0 = str__0;
  str.cljs$lang$arity$1 = str__1;
  str.cljs$lang$arity$variadic = str__2.cljs$lang$arity$variadic;
  return str
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start)
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end)
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$lang$arity$2 = subs__2;
  subs.cljs$lang$arity$3 = subs__3;
  return subs
}();
cljs.core.map = undefined;
cljs.core.format = function() {
  var format__delegate = function(fmt, args) {
    var args__$1 = cljs.core.map.call(null, function(x) {
      if(cljs.core.truth_(function() {
        var or__3943__auto__ = cljs.core.keyword_QMARK_.call(null, x);
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          return cljs.core.symbol_QMARK_.call(null, x)
        }
      }())) {
        return[cljs.core.str(x)].join("")
      }else {
        return x
      }
    }, args);
    return cljs.core.apply.call(null, goog.string.format, fmt, args__$1)
  };
  var format = function(fmt, var_args) {
    var args = null;
    if(goog.isDef(var_args)) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return format__delegate.call(this, fmt, args)
  };
  format.cljs$lang$maxFixedArity = 1;
  format.cljs$lang$applyTo = function(arglist__5575) {
    var fmt = cljs.core.first(arglist__5575);
    var args = cljs.core.rest(arglist__5575);
    return format__delegate(fmt, args)
  };
  format.cljs$lang$arity$variadic = format__delegate;
  return format
}();
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if(cljs.core.symbol_QMARK_.call(null, name)) {
      return name
    }else {
      if(cljs.core.keyword_QMARK_.call(null, name)) {
        return cljs.core.str_STAR_.call(null, "\ufdd1", "'", cljs.core.subs.call(null, name, 2))
      }else {
        if("\ufdd0:else") {
          return cljs.core.str_STAR_.call(null, "\ufdd1", "'", name)
        }else {
          return null
        }
      }
    }
  };
  var symbol__2 = function(ns, name) {
    return symbol.call(null, cljs.core.str_STAR_.call(null, ns, "/", name))
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$lang$arity$1 = symbol__1;
  symbol.cljs$lang$arity$2 = symbol__2;
  return symbol
}();
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if(cljs.core.keyword_QMARK_.call(null, name)) {
      return name
    }else {
      if(cljs.core.symbol_QMARK_.call(null, name)) {
        return cljs.core.str_STAR_.call(null, "\ufdd0", ":", cljs.core.subs.call(null, name, 2))
      }else {
        if("\ufdd0:else") {
          return cljs.core.str_STAR_.call(null, "\ufdd0", ":", name)
        }else {
          return null
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return keyword.call(null, cljs.core.str_STAR_.call(null, ns, "/", name))
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$lang$arity$1 = keyword__1;
  keyword.cljs$lang$arity$2 = keyword__2;
  return keyword
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while(true) {
      if(xs == null) {
        return ys == null
      }else {
        if(ys == null) {
          return false
        }else {
          if(cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__5576 = cljs.core.next.call(null, xs);
            var G__5577 = cljs.core.next.call(null, ys);
            xs = G__5576;
            ys = G__5577;
            continue
          }else {
            if("\ufdd0:else") {
              return false
            }else {
              return null
            }
          }
        }
      }
      break
    }
  }() : null)
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2)
};
cljs.core.hash_coll = function hash_coll(coll) {
  return cljs.core.reduce.call(null, function(p1__5578_SHARP_, p2__5579_SHARP_) {
    return cljs.core.hash_combine.call(null, p1__5578_SHARP_, cljs.core.hash.call(null, p2__5579_SHARP_, false))
  }, cljs.core.hash.call(null, cljs.core.first.call(null, coll), false), cljs.core.next.call(null, coll))
};
cljs.core.key = undefined;
cljs.core.val = undefined;
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while(true) {
    if(s) {
      var e = cljs.core.first.call(null, s);
      var G__5580 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__5581 = cljs.core.next.call(null, s);
      h = G__5580;
      s = G__5581;
      continue
    }else {
      return h
    }
    break
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while(true) {
    if(s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__5582 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__5583 = cljs.core.next.call(null, s__$1);
      h = G__5582;
      s__$1 = G__5583;
      continue
    }else {
      return h
    }
    break
  }
};
cljs.core.name = undefined;
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var G__5586_5588 = cljs.core.seq.call(null, fn_map);
  while(true) {
    if(G__5586_5588) {
      var vec__5587_5589 = cljs.core.first.call(null, G__5586_5588);
      var key_name_5590 = cljs.core.nth.call(null, vec__5587_5589, 0, null);
      var f_5591 = cljs.core.nth.call(null, vec__5587_5589, 1, null);
      var str_name_5592 = cljs.core.name.call(null, key_name_5590);
      obj[str_name_5592] = f_5591;
      var G__5593 = cljs.core.next.call(null, G__5586_5588);
      G__5586_5588 = G__5593;
      continue
    }else {
    }
    break
  }
  return obj
};
goog.provide("cljs.core.List");
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65413358
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/List")
};
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/List")
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  if(self__.count === 1) {
    return null
  }else {
    return self__.rest
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return new cljs.core.List(self__.meta, o, coll, self__.count + 1, null)
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.count
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  return self__.first
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  return coll.cljs$core$ISeq$_rest$arity$1(coll)
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return self__.first
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  if(self__.count === 1) {
    return cljs.core.List.EMPTY
  }else {
    return self__.rest
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash)
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.List.EMPTY
};
goog.provide("cljs.core.EmptyList");
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65413326
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/EmptyList")
};
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/EmptyList")
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  return 0
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return new cljs.core.List(self__.meta, o, null, 1, null)
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return 0
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.List.EMPTY
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.EmptyList(meta__$1)
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__5595 = coll;
  if(G__5595) {
    if(cljs.core.truth_(function() {
      var or__3943__auto__ = G__5595.cljs$lang$protocol_mask$partition0$ & 134217728;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return G__5595.cljs$core$IReversible$
      }
    }())) {
      return true
    }else {
      if(!G__5595.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IReversible, G__5595)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IReversible, G__5595)
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll)
};
cljs.core.reverse = function reverse(coll) {
  if(cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll)
  }else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll)
  }
};
cljs.core.list = function() {
  var list = null;
  var list__0 = function() {
    return cljs.core.List.EMPTY
  };
  var list__1 = function(x) {
    return cljs.core.conj.call(null, cljs.core.List.EMPTY, x)
  };
  var list__2 = function(x, y) {
    return cljs.core.conj.call(null, list.call(null, y), x)
  };
  var list__3 = function(x, y, z) {
    return cljs.core.conj.call(null, list.call(null, y, z), x)
  };
  var list__4 = function() {
    var G__5596__delegate = function(x, y, z, items) {
      return cljs.core.conj.call(null, cljs.core.conj.call(null, cljs.core.conj.call(null, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, cljs.core.reverse.call(null, items)), z), y), x)
    };
    var G__5596 = function(x, y, z, var_args) {
      var items = null;
      if(goog.isDef(var_args)) {
        items = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__5596__delegate.call(this, x, y, z, items)
    };
    G__5596.cljs$lang$maxFixedArity = 3;
    G__5596.cljs$lang$applyTo = function(arglist__5597) {
      var x = cljs.core.first(arglist__5597);
      var y = cljs.core.first(cljs.core.next(arglist__5597));
      var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5597)));
      var items = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5597)));
      return G__5596__delegate(x, y, z, items)
    };
    G__5596.cljs$lang$arity$variadic = G__5596__delegate;
    return G__5596
  }();
  list = function(x, y, z, var_args) {
    var items = var_args;
    switch(arguments.length) {
      case 0:
        return list__0.call(this);
      case 1:
        return list__1.call(this, x);
      case 2:
        return list__2.call(this, x, y);
      case 3:
        return list__3.call(this, x, y, z);
      default:
        return list__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list.cljs$lang$maxFixedArity = 3;
  list.cljs$lang$applyTo = list__4.cljs$lang$applyTo;
  list.cljs$lang$arity$0 = list__0;
  list.cljs$lang$arity$1 = list__1;
  list.cljs$lang$arity$2 = list__2;
  list.cljs$lang$arity$3 = list__3;
  list.cljs$lang$arity$variadic = list__4.cljs$lang$arity$variadic;
  return list
}();
goog.provide("cljs.core.Cons");
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65405164
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/Cons")
};
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/Cons")
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  if(self__.rest == null) {
    return null
  }else {
    return cljs.core._seq.call(null, self__.rest)
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return new cljs.core.Cons(null, o, coll, self__.__hash)
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return self__.first
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  if(self__.rest == null) {
    return cljs.core.List.EMPTY
  }else {
    return self__.rest
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash)
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.cons = function cons(x, coll) {
  if(cljs.core.truth_(function() {
    var or__3943__auto__ = coll == null;
    if(or__3943__auto__) {
      return or__3943__auto__
    }else {
      var G__5599 = coll;
      if(G__5599) {
        if(cljs.core.truth_(function() {
          var or__3943__auto____$1 = G__5599.cljs$lang$protocol_mask$partition0$ & 64;
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            return G__5599.cljs$core$ISeq$
          }
        }())) {
          return true
        }else {
          if(!G__5599.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__5599)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__5599)
      }
    }
  }())) {
    return new cljs.core.Cons(null, x, coll, null)
  }else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null)
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__5601 = x;
  if(G__5601) {
    if(cljs.core.truth_(function() {
      var or__3943__auto__ = G__5601.cljs$lang$protocol_mask$partition0$ & 33554432;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return G__5601.cljs$core$IList$
      }
    }())) {
      return true
    }else {
      if(!G__5601.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IList, G__5601)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IList, G__5601)
  }
};
cljs.core.IReduce["string"] = true;
cljs.core._reduce["string"] = function() {
  var G__5602 = null;
  var G__5602__2 = function(string, f) {
    return cljs.core.ci_reduce.call(null, string, f)
  };
  var G__5602__3 = function(string, f, start) {
    return cljs.core.ci_reduce.call(null, string, f, start)
  };
  G__5602 = function(string, f, start) {
    switch(arguments.length) {
      case 2:
        return G__5602__2.call(this, string, f);
      case 3:
        return G__5602__3.call(this, string, f, start)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5602
}();
cljs.core.ILookup["string"] = true;
cljs.core._lookup["string"] = function() {
  var G__5603 = null;
  var G__5603__2 = function(string, k) {
    return cljs.core._nth.call(null, string, k)
  };
  var G__5603__3 = function(string, k, not_found) {
    return cljs.core._nth.call(null, string, k, not_found)
  };
  G__5603 = function(string, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5603__2.call(this, string, k);
      case 3:
        return G__5603__3.call(this, string, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5603
}();
cljs.core.IIndexed["string"] = true;
cljs.core._nth["string"] = function() {
  var G__5604 = null;
  var G__5604__2 = function(string, n) {
    if(n < cljs.core._count.call(null, string)) {
      return string.charAt(n)
    }else {
      return null
    }
  };
  var G__5604__3 = function(string, n, not_found) {
    if(n < cljs.core._count.call(null, string)) {
      return string.charAt(n)
    }else {
      return not_found
    }
  };
  G__5604 = function(string, n, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5604__2.call(this, string, n);
      case 3:
        return G__5604__3.call(this, string, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5604
}();
cljs.core.ICounted["string"] = true;
cljs.core._count["string"] = function(s) {
  return s.length
};
cljs.core.ISeqable["string"] = true;
cljs.core._seq["string"] = function(string) {
  return cljs.core.prim_seq.call(null, string, 0)
};
cljs.core.IHash["string"] = true;
cljs.core._hash["string"] = function(o) {
  return goog.string.hashCode(o)
};
goog.provide("cljs.core.Keyword");
cljs.core.Keyword = function(k) {
  this.k = k;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/Keyword")
};
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/Keyword")
};
cljs.core.Keyword.prototype.call = function() {
  var G__5606 = null;
  var G__5606__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    if(coll == null) {
      return null
    }else {
      var strobj = coll.strobj;
      if(strobj == null) {
        return cljs.core._lookup.call(null, coll, self__.k, null)
      }else {
        return strobj[self__.k]
      }
    }
  };
  var G__5606__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    if(coll == null) {
      return not_found
    }else {
      return cljs.core._lookup.call(null, coll, self__.k, not_found)
    }
  };
  G__5606 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5606__2.call(this, self__, coll);
      case 3:
        return G__5606__3.call(this, self__, coll, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5606
}();
cljs.core.Keyword.prototype.apply = function(self__, args5605) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args5605.slice()))
};
String.prototype.cljs$core$IFn$ = true;
String.prototype.call = function() {
  var G__5608 = null;
  var G__5608__2 = function(self__, coll) {
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, coll, this$.toString(), null)
  };
  var G__5608__3 = function(self__, coll, not_found) {
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, coll, this$.toString(), not_found)
  };
  G__5608 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5608__2.call(this, self__, coll);
      case 3:
        return G__5608__3.call(this, self__, coll, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5608
}();
String.prototype.apply = function(self__, args5607) {
  return self__.call.apply(self__, [self__].concat(args5607.slice()))
};
String.prototype.apply = function(s, args) {
  if(cljs.core.count.call(null, args) < 2) {
    return cljs.core._lookup.call(null, args[0], s, null)
  }else {
    return cljs.core._lookup.call(null, args[0], s, args[1])
  }
};
cljs.core.lazy_seq_value = function lazy_seq_value(lazy_seq) {
  var x = lazy_seq.x;
  if(lazy_seq.realized) {
    return x
  }else {
    lazy_seq.x = x.call(null);
    lazy_seq.realized = true;
    return lazy_seq.x
  }
};
goog.provide("cljs.core.LazySeq");
cljs.core.LazySeq = function(meta, realized, x, __hash) {
  this.meta = meta;
  this.realized = realized;
  this.x = x;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850700
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/LazySeq")
};
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/LazySeq")
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._seq.call(null, coll.cljs$core$ISeq$_rest$arity$1(coll))
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.seq.call(null, cljs.core.lazy_seq_value.call(null, coll))
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.first.call(null, cljs.core.lazy_seq_value.call(null, coll))
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.rest.call(null, cljs.core.lazy_seq_value.call(null, coll))
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.LazySeq(meta__$1, self__.realized, self__.x, self__.__hash)
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.ArrayChunk = undefined;
goog.provide("cljs.core.ChunkBuffer");
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/ChunkBuffer")
};
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/ChunkBuffer")
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  return self__.end
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(cljs.core.make_array.call(null, capacity), 0)
};
goog.provide("cljs.core.ArrayChunk");
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/ArrayChunk")
};
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/ArrayChunk")
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1)
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off)
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  if(self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  }else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end)
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  return self__.arr[self__.off + i]
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  if(cljs.core.truth_(function() {
    var and__3941__auto__ = i >= 0;
    if(and__3941__auto__) {
      return i < self__.end - self__.off
    }else {
      return and__3941__auto__
    }
  }())) {
    return self__.arr[self__.off + i]
  }else {
    return not_found
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  return self__.end - self__.off
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return array_chunk.call(null, arr, 0, arr.length)
  };
  var array_chunk__2 = function(arr, off) {
    return array_chunk.call(null, arr, off, arr.length)
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end)
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$lang$arity$1 = array_chunk__1;
  array_chunk.cljs$lang$arity$2 = array_chunk__2;
  array_chunk.cljs$lang$arity$3 = array_chunk__3;
  return array_chunk
}();
goog.provide("cljs.core.ChunkedCons");
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850604;
  this.cljs$lang$protocol_mask$partition1$ = 1536
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/ChunkedCons")
};
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/ChunkedCons")
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, this$)
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._nth.call(null, self__.chunk, 0)
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  if(cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null)
  }else {
    if(self__.more == null) {
      return cljs.core.List.EMPTY
    }else {
      return self__.more
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  if(self__.more == null) {
    return null
  }else {
    return self__.more
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash)
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  return self__.chunk
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  if(self__.more == null) {
    return cljs.core.List.EMPTY
  }else {
    return self__.more
  }
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if(cljs.core._count.call(null, chunk) === 0) {
    return rest
  }else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null)
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x)
};
cljs.core.chunk = function chunk(b) {
  return b.chunk()
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s)
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s)
};
cljs.core.chunk_next = function chunk_next(s) {
  if(cljs.core.truth_(function() {
    var G__5610 = s;
    if(G__5610) {
      if(cljs.core.truth_(function() {
        var or__3943__auto__ = G__5610.cljs$lang$protocol_mask$partition1$ & 1024;
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          return G__5610.cljs$core$IChunkedNext$
        }
      }())) {
        return true
      }else {
        if(!G__5610.cljs$lang$protocol_mask$partition1$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.IChunkedNext, G__5610)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.IChunkedNext, G__5610)
    }
  }())) {
    return cljs.core._chunked_next.call(null, s)
  }else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s))
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while(true) {
    if(cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__5611 = cljs.core.next.call(null, s__$1);
      s__$1 = G__5611;
      continue
    }else {
      return ary
    }
    break
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = cljs.core.make_array.call(null, cljs.core.count.call(null, coll));
  var i_5612 = 0;
  var xs_5613 = cljs.core.seq.call(null, coll);
  while(true) {
    if(xs_5613) {
      ret[i_5612] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_5613));
      var G__5614 = i_5612 + 1;
      var G__5615 = cljs.core.next.call(null, xs_5613);
      i_5612 = G__5614;
      xs_5613 = G__5615;
      continue
    }else {
    }
    break
  }
  return ret
};
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if(cljs.core.number_QMARK_.call(null, size_or_seq)) {
      return long_array.call(null, size_or_seq, null)
    }else {
      if(cljs.core.seq_QMARK_.call(null, size_or_seq)) {
        return cljs.core.into_array.call(null, size_or_seq)
      }else {
        if("\ufdd0:else") {
          throw new Error("long-array called with something other than size or ISeq");
        }else {
          return null
        }
      }
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = cljs.core.make_array.call(null, size);
    if(cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while(true) {
        if(cljs.core.truth_(function() {
          var and__3941__auto__ = s__$1;
          if(and__3941__auto__) {
            return i < size
          }else {
            return and__3941__auto__
          }
        }())) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__5616 = i + 1;
          var G__5617 = cljs.core.next.call(null, s__$1);
          i = G__5616;
          s__$1 = G__5617;
          continue
        }else {
          return a
        }
        break
      }
    }else {
      var n__4252__auto___5618 = size;
      var i_5619 = 0;
      while(true) {
        if(i_5619 < n__4252__auto___5618) {
          a[i_5619] = init_val_or_seq;
          var G__5620 = i_5619 + 1;
          i_5619 = G__5620;
          continue
        }else {
        }
        break
      }
      return a
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$lang$arity$1 = long_array__1;
  long_array.cljs$lang$arity$2 = long_array__2;
  return long_array
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if(cljs.core.number_QMARK_.call(null, size_or_seq)) {
      return double_array.call(null, size_or_seq, null)
    }else {
      if(cljs.core.seq_QMARK_.call(null, size_or_seq)) {
        return cljs.core.into_array.call(null, size_or_seq)
      }else {
        if("\ufdd0:else") {
          throw new Error("double-array called with something other than size or ISeq");
        }else {
          return null
        }
      }
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = cljs.core.make_array.call(null, size);
    if(cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while(true) {
        if(cljs.core.truth_(function() {
          var and__3941__auto__ = s__$1;
          if(and__3941__auto__) {
            return i < size
          }else {
            return and__3941__auto__
          }
        }())) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__5621 = i + 1;
          var G__5622 = cljs.core.next.call(null, s__$1);
          i = G__5621;
          s__$1 = G__5622;
          continue
        }else {
          return a
        }
        break
      }
    }else {
      var n__4252__auto___5623 = size;
      var i_5624 = 0;
      while(true) {
        if(i_5624 < n__4252__auto___5623) {
          a[i_5624] = init_val_or_seq;
          var G__5625 = i_5624 + 1;
          i_5624 = G__5625;
          continue
        }else {
        }
        break
      }
      return a
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$lang$arity$1 = double_array__1;
  double_array.cljs$lang$arity$2 = double_array__2;
  return double_array
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if(cljs.core.number_QMARK_.call(null, size_or_seq)) {
      return object_array.call(null, size_or_seq, null)
    }else {
      if(cljs.core.seq_QMARK_.call(null, size_or_seq)) {
        return cljs.core.into_array.call(null, size_or_seq)
      }else {
        if("\ufdd0:else") {
          throw new Error("object-array called with something other than size or ISeq");
        }else {
          return null
        }
      }
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = cljs.core.make_array.call(null, size);
    if(cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while(true) {
        if(cljs.core.truth_(function() {
          var and__3941__auto__ = s__$1;
          if(and__3941__auto__) {
            return i < size
          }else {
            return and__3941__auto__
          }
        }())) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__5626 = i + 1;
          var G__5627 = cljs.core.next.call(null, s__$1);
          i = G__5626;
          s__$1 = G__5627;
          continue
        }else {
          return a
        }
        break
      }
    }else {
      var n__4252__auto___5628 = size;
      var i_5629 = 0;
      while(true) {
        if(i_5629 < n__4252__auto___5628) {
          a[i_5629] = init_val_or_seq;
          var G__5630 = i_5629 + 1;
          i_5629 = G__5630;
          continue
        }else {
        }
        break
      }
      return a
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$lang$arity$1 = object_array__1;
  object_array.cljs$lang$arity$2 = object_array__2;
  return object_array
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if(cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s)
  }else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while(true) {
      if(cljs.core.truth_(function() {
        var and__3941__auto__ = i > 0;
        if(and__3941__auto__) {
          return cljs.core.seq.call(null, s__$1)
        }else {
          return and__3941__auto__
        }
      }())) {
        var G__5631 = cljs.core.next.call(null, s__$1);
        var G__5632 = i - 1;
        var G__5633 = sum + 1;
        s__$1 = G__5631;
        i = G__5632;
        sum = G__5633;
        continue
      }else {
        return sum
      }
      break
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if(arglist == null) {
    return null
  }else {
    if(cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist))
    }else {
      if("\ufdd0:else") {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)))
      }else {
        return null
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, false, function() {
      return null
    }, null)
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, false, function() {
      return x
    }, null)
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, false, function() {
      var s = cljs.core.seq.call(null, x);
      if(s) {
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y))
        }else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y))
        }
      }else {
        return y
      }
    }, null)
  };
  var concat__3 = function() {
    var G__5634__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, false, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if(xys__$1) {
            if(cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1))
            }else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1))
            }
          }else {
            if(cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1))
            }else {
              return null
            }
          }
        }, null)
      };
      return cat.call(null, concat.call(null, x, y), zs)
    };
    var G__5634 = function(x, y, var_args) {
      var zs = null;
      if(goog.isDef(var_args)) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__5634__delegate.call(this, x, y, zs)
    };
    G__5634.cljs$lang$maxFixedArity = 2;
    G__5634.cljs$lang$applyTo = function(arglist__5635) {
      var x = cljs.core.first(arglist__5635);
      var y = cljs.core.first(cljs.core.next(arglist__5635));
      var zs = cljs.core.rest(cljs.core.next(arglist__5635));
      return G__5634__delegate(x, y, zs)
    };
    G__5634.cljs$lang$arity$variadic = G__5634__delegate;
    return G__5634
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$lang$arity$0 = concat__0;
  concat.cljs$lang$arity$1 = concat__1;
  concat.cljs$lang$arity$2 = concat__2;
  concat.cljs$lang$arity$variadic = concat__3.cljs$lang$arity$variadic;
  return concat
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args)
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args)
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args))
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)))
  };
  var list_STAR___5 = function() {
    var G__5636__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))))
    };
    var G__5636 = function(a, b, c, d, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__5636__delegate.call(this, a, b, c, d, more)
    };
    G__5636.cljs$lang$maxFixedArity = 4;
    G__5636.cljs$lang$applyTo = function(arglist__5637) {
      var a = cljs.core.first(arglist__5637);
      var b = cljs.core.first(cljs.core.next(arglist__5637));
      var c = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5637)));
      var d = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(arglist__5637))));
      var more = cljs.core.rest(cljs.core.next(cljs.core.next(cljs.core.next(arglist__5637))));
      return G__5636__delegate(a, b, c, d, more)
    };
    G__5636.cljs$lang$arity$variadic = G__5636__delegate;
    return G__5636
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$lang$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$lang$arity$1 = list_STAR___1;
  list_STAR_.cljs$lang$arity$2 = list_STAR___2;
  list_STAR_.cljs$lang$arity$3 = list_STAR___3;
  list_STAR_.cljs$lang$arity$4 = list_STAR___4;
  list_STAR_.cljs$lang$arity$variadic = list_STAR___5.cljs$lang$arity$variadic;
  return list_STAR_
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll)
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll)
};
cljs.core.conj_BANG_ = function conj_BANG_(tcoll, val) {
  return cljs.core._conj_BANG_.call(null, tcoll, val)
};
cljs.core.assoc_BANG_ = function assoc_BANG_(tcoll, key, val) {
  return cljs.core._assoc_BANG_.call(null, tcoll, key, val)
};
cljs.core.dissoc_BANG_ = function dissoc_BANG_(tcoll, key) {
  return cljs.core._dissoc_BANG_.call(null, tcoll, key)
};
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll)
};
cljs.core.disj_BANG_ = function disj_BANG_(tcoll, val) {
  return cljs.core._disjoin_BANG_.call(null, tcoll, val)
};
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if(argc === 0) {
    return f.call(null)
  }else {
    var a = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if(argc === 1) {
      if(f.cljs$lang$arity$1) {
        return f.cljs$lang$arity$1(a)
      }else {
        return f.call(null, a)
      }
    }else {
      var b = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if(argc === 2) {
        if(f.cljs$lang$arity$2) {
          return f.cljs$lang$arity$2(a, b)
        }else {
          return f.call(null, a, b)
        }
      }else {
        var c = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if(argc === 3) {
          if(f.cljs$lang$arity$3) {
            return f.cljs$lang$arity$3(a, b, c)
          }else {
            return f.call(null, a, b, c)
          }
        }else {
          var d = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if(argc === 4) {
            if(f.cljs$lang$arity$4) {
              return f.cljs$lang$arity$4(a, b, c, d)
            }else {
              return f.call(null, a, b, c, d)
            }
          }else {
            var e = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if(argc === 5) {
              if(f.cljs$lang$arity$5) {
                return f.cljs$lang$arity$5(a, b, c, d, e)
              }else {
                return f.call(null, a, b, c, d, e)
              }
            }else {
              var f__$1 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if(argc === 6) {
                if(f__$1.cljs$lang$arity$6) {
                  return f__$1.cljs$lang$arity$6(a, b, c, d, e, f__$1)
                }else {
                  return f__$1.call(null, a, b, c, d, e, f__$1)
                }
              }else {
                var g = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if(argc === 7) {
                  if(f__$1.cljs$lang$arity$7) {
                    return f__$1.cljs$lang$arity$7(a, b, c, d, e, f__$1, g)
                  }else {
                    return f__$1.call(null, a, b, c, d, e, f__$1, g)
                  }
                }else {
                  var h = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if(argc === 8) {
                    if(f__$1.cljs$lang$arity$8) {
                      return f__$1.cljs$lang$arity$8(a, b, c, d, e, f__$1, g, h)
                    }else {
                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h)
                    }
                  }else {
                    var i = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if(argc === 9) {
                      if(f__$1.cljs$lang$arity$9) {
                        return f__$1.cljs$lang$arity$9(a, b, c, d, e, f__$1, g, h, i)
                      }else {
                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i)
                      }
                    }else {
                      var j = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if(argc === 10) {
                        if(f__$1.cljs$lang$arity$10) {
                          return f__$1.cljs$lang$arity$10(a, b, c, d, e, f__$1, g, h, i, j)
                        }else {
                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j)
                        }
                      }else {
                        var k = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if(argc === 11) {
                          if(f__$1.cljs$lang$arity$11) {
                            return f__$1.cljs$lang$arity$11(a, b, c, d, e, f__$1, g, h, i, j, k)
                          }else {
                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k)
                          }
                        }else {
                          var l = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if(argc === 12) {
                            if(f__$1.cljs$lang$arity$12) {
                              return f__$1.cljs$lang$arity$12(a, b, c, d, e, f__$1, g, h, i, j, k, l)
                            }else {
                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l)
                            }
                          }else {
                            var m = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if(argc === 13) {
                              if(f__$1.cljs$lang$arity$13) {
                                return f__$1.cljs$lang$arity$13(a, b, c, d, e, f__$1, g, h, i, j, k, l, m)
                              }else {
                                return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m)
                              }
                            }else {
                              var n = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if(argc === 14) {
                                if(f__$1.cljs$lang$arity$14) {
                                  return f__$1.cljs$lang$arity$14(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n)
                                }else {
                                  return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n)
                                }
                              }else {
                                var o = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if(argc === 15) {
                                  if(f__$1.cljs$lang$arity$15) {
                                    return f__$1.cljs$lang$arity$15(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o)
                                  }else {
                                    return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o)
                                  }
                                }else {
                                  var p = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if(argc === 16) {
                                    if(f__$1.cljs$lang$arity$16) {
                                      return f__$1.cljs$lang$arity$16(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p)
                                    }else {
                                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p)
                                    }
                                  }else {
                                    var q = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if(argc === 17) {
                                      if(f__$1.cljs$lang$arity$17) {
                                        return f__$1.cljs$lang$arity$17(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q)
                                      }else {
                                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q)
                                      }
                                    }else {
                                      var r = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if(argc === 18) {
                                        if(f__$1.cljs$lang$arity$18) {
                                          return f__$1.cljs$lang$arity$18(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r)
                                        }else {
                                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r)
                                        }
                                      }else {
                                        var s = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if(argc === 19) {
                                          if(f__$1.cljs$lang$arity$19) {
                                            return f__$1.cljs$lang$arity$19(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s)
                                          }else {
                                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s)
                                          }
                                        }else {
                                          var t = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if(argc === 20) {
                                            if(f__$1.cljs$lang$arity$20) {
                                              return f__$1.cljs$lang$arity$20(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t)
                                            }else {
                                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t)
                                            }
                                          }else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args)
      }else {
        return f.cljs$lang$applyTo(args)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, args))
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist)
      }else {
        return f.cljs$lang$applyTo(arglist)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, arglist))
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist)
      }else {
        return f.cljs$lang$applyTo(arglist)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, arglist))
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist)
      }else {
        return f.cljs$lang$applyTo(arglist)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, arglist))
    }
  };
  var apply__6 = function() {
    var G__5638__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if(f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if(bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist)
        }else {
          return f.cljs$lang$applyTo(arglist)
        }
      }else {
        return f.apply(f, cljs.core.to_array.call(null, arglist))
      }
    };
    var G__5638 = function(f, a, b, c, d, var_args) {
      var args = null;
      if(goog.isDef(var_args)) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0)
      }
      return G__5638__delegate.call(this, f, a, b, c, d, args)
    };
    G__5638.cljs$lang$maxFixedArity = 5;
    G__5638.cljs$lang$applyTo = function(arglist__5639) {
      var f = cljs.core.first(arglist__5639);
      var a = cljs.core.first(cljs.core.next(arglist__5639));
      var b = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5639)));
      var c = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(arglist__5639))));
      var d = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(cljs.core.next(arglist__5639)))));
      var args = cljs.core.rest(cljs.core.next(cljs.core.next(cljs.core.next(cljs.core.next(arglist__5639)))));
      return G__5638__delegate(f, a, b, c, d, args)
    };
    G__5638.cljs$lang$arity$variadic = G__5638__delegate;
    return G__5638
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$lang$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$lang$arity$2 = apply__2;
  apply.cljs$lang$arity$3 = apply__3;
  apply.cljs$lang$arity$4 = apply__4;
  apply.cljs$lang$arity$5 = apply__5;
  apply.cljs$lang$arity$variadic = apply__6.cljs$lang$arity$variadic;
  return apply
}();
cljs.core.vary_meta = function() {
  var vary_meta__delegate = function(obj, f, args) {
    return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), args))
  };
  var vary_meta = function(obj, f, var_args) {
    var args = null;
    if(goog.isDef(var_args)) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
    }
    return vary_meta__delegate.call(this, obj, f, args)
  };
  vary_meta.cljs$lang$maxFixedArity = 2;
  vary_meta.cljs$lang$applyTo = function(arglist__5640) {
    var obj = cljs.core.first(arglist__5640);
    var f = cljs.core.first(cljs.core.next(arglist__5640));
    var args = cljs.core.rest(cljs.core.next(arglist__5640));
    return vary_meta__delegate(obj, f, args)
  };
  vary_meta.cljs$lang$arity$variadic = vary_meta__delegate;
  return vary_meta
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y)
  };
  var not_EQ___3 = function() {
    var G__5641__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more))
    };
    var G__5641 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__5641__delegate.call(this, x, y, more)
    };
    G__5641.cljs$lang$maxFixedArity = 2;
    G__5641.cljs$lang$applyTo = function(arglist__5642) {
      var x = cljs.core.first(arglist__5642);
      var y = cljs.core.first(cljs.core.next(arglist__5642));
      var more = cljs.core.rest(cljs.core.next(arglist__5642));
      return G__5641__delegate(x, y, more)
    };
    G__5641.cljs$lang$arity$variadic = G__5641__delegate;
    return G__5641
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$lang$arity$1 = not_EQ___1;
  not_EQ_.cljs$lang$arity$2 = not_EQ___2;
  not_EQ_.cljs$lang$arity$variadic = not_EQ___3.cljs$lang$arity$variadic;
  return not_EQ_
}();
cljs.core.not_empty = function not_empty(coll) {
  if(cljs.core.seq.call(null, coll)) {
    return coll
  }else {
    return null
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while(true) {
    if(cljs.core.seq.call(null, coll) == null) {
      return true
    }else {
      if(cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__5643 = pred;
        var G__5644 = cljs.core.next.call(null, coll);
        pred = G__5643;
        coll = G__5644;
        continue
      }else {
        if("\ufdd0:else") {
          return false
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll)
};
cljs.core.some = function some(pred, coll) {
  while(true) {
    if(cljs.core.seq.call(null, coll)) {
      var or__3943__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if(cljs.core.truth_(or__3943__auto__)) {
        return or__3943__auto__
      }else {
        var G__5645 = pred;
        var G__5646 = cljs.core.next.call(null, coll);
        pred = G__5645;
        coll = G__5646;
        continue
      }
    }else {
      return null
    }
    break
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll))
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if(cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0
  }else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n)
};
cljs.core.identity = function identity(x) {
  return x
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__5647 = null;
    var G__5647__0 = function() {
      return cljs.core.not.call(null, f.call(null))
    };
    var G__5647__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x))
    };
    var G__5647__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y))
    };
    var G__5647__3 = function() {
      var G__5648__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs))
      };
      var G__5648 = function(x, y, var_args) {
        var zs = null;
        if(goog.isDef(var_args)) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
        }
        return G__5648__delegate.call(this, x, y, zs)
      };
      G__5648.cljs$lang$maxFixedArity = 2;
      G__5648.cljs$lang$applyTo = function(arglist__5649) {
        var x = cljs.core.first(arglist__5649);
        var y = cljs.core.first(cljs.core.next(arglist__5649));
        var zs = cljs.core.rest(cljs.core.next(arglist__5649));
        return G__5648__delegate(x, y, zs)
      };
      G__5648.cljs$lang$arity$variadic = G__5648__delegate;
      return G__5648
    }();
    G__5647 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__5647__0.call(this);
        case 1:
          return G__5647__1.call(this, x);
        case 2:
          return G__5647__2.call(this, x, y);
        default:
          return G__5647__3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__5647.cljs$lang$maxFixedArity = 2;
    G__5647.cljs$lang$applyTo = G__5647__3.cljs$lang$applyTo;
    return G__5647
  }()
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__5650__delegate = function(args) {
      return x
    };
    var G__5650 = function(var_args) {
      var args = null;
      if(goog.isDef(var_args)) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__5650__delegate.call(this, args)
    };
    G__5650.cljs$lang$maxFixedArity = 0;
    G__5650.cljs$lang$applyTo = function(arglist__5651) {
      var args = cljs.core.seq(arglist__5651);
      return G__5650__delegate(args)
    };
    G__5650.cljs$lang$arity$variadic = G__5650__delegate;
    return G__5650
  }()
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity
  };
  var comp__1 = function(f) {
    return f
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__5652 = null;
      var G__5652__0 = function() {
        return f.call(null, g.call(null))
      };
      var G__5652__1 = function(x) {
        return f.call(null, g.call(null, x))
      };
      var G__5652__2 = function(x, y) {
        return f.call(null, g.call(null, x, y))
      };
      var G__5652__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z))
      };
      var G__5652__4 = function() {
        var G__5653__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args))
        };
        var G__5653 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__5653__delegate.call(this, x, y, z, args)
        };
        G__5653.cljs$lang$maxFixedArity = 3;
        G__5653.cljs$lang$applyTo = function(arglist__5654) {
          var x = cljs.core.first(arglist__5654);
          var y = cljs.core.first(cljs.core.next(arglist__5654));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5654)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5654)));
          return G__5653__delegate(x, y, z, args)
        };
        G__5653.cljs$lang$arity$variadic = G__5653__delegate;
        return G__5653
      }();
      G__5652 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__5652__0.call(this);
          case 1:
            return G__5652__1.call(this, x);
          case 2:
            return G__5652__2.call(this, x, y);
          case 3:
            return G__5652__3.call(this, x, y, z);
          default:
            return G__5652__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__5652.cljs$lang$maxFixedArity = 3;
      G__5652.cljs$lang$applyTo = G__5652__4.cljs$lang$applyTo;
      return G__5652
    }()
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__5655 = null;
      var G__5655__0 = function() {
        return f.call(null, g.call(null, h.call(null)))
      };
      var G__5655__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)))
      };
      var G__5655__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)))
      };
      var G__5655__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)))
      };
      var G__5655__4 = function() {
        var G__5656__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)))
        };
        var G__5656 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__5656__delegate.call(this, x, y, z, args)
        };
        G__5656.cljs$lang$maxFixedArity = 3;
        G__5656.cljs$lang$applyTo = function(arglist__5657) {
          var x = cljs.core.first(arglist__5657);
          var y = cljs.core.first(cljs.core.next(arglist__5657));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5657)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5657)));
          return G__5656__delegate(x, y, z, args)
        };
        G__5656.cljs$lang$arity$variadic = G__5656__delegate;
        return G__5656
      }();
      G__5655 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__5655__0.call(this);
          case 1:
            return G__5655__1.call(this, x);
          case 2:
            return G__5655__2.call(this, x, y);
          case 3:
            return G__5655__3.call(this, x, y, z);
          default:
            return G__5655__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__5655.cljs$lang$maxFixedArity = 3;
      G__5655.cljs$lang$applyTo = G__5655__4.cljs$lang$applyTo;
      return G__5655
    }()
  };
  var comp__4 = function() {
    var G__5658__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function() {
        var G__5659__delegate = function(args) {
          var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
          var fs__$2 = cljs.core.next.call(null, fs__$1);
          while(true) {
            if(fs__$2) {
              var G__5660 = cljs.core.first.call(null, fs__$2).call(null, ret);
              var G__5661 = cljs.core.next.call(null, fs__$2);
              ret = G__5660;
              fs__$2 = G__5661;
              continue
            }else {
              return ret
            }
            break
          }
        };
        var G__5659 = function(var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
          }
          return G__5659__delegate.call(this, args)
        };
        G__5659.cljs$lang$maxFixedArity = 0;
        G__5659.cljs$lang$applyTo = function(arglist__5662) {
          var args = cljs.core.seq(arglist__5662);
          return G__5659__delegate(args)
        };
        G__5659.cljs$lang$arity$variadic = G__5659__delegate;
        return G__5659
      }()
    };
    var G__5658 = function(f1, f2, f3, var_args) {
      var fs = null;
      if(goog.isDef(var_args)) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__5658__delegate.call(this, f1, f2, f3, fs)
    };
    G__5658.cljs$lang$maxFixedArity = 3;
    G__5658.cljs$lang$applyTo = function(arglist__5663) {
      var f1 = cljs.core.first(arglist__5663);
      var f2 = cljs.core.first(cljs.core.next(arglist__5663));
      var f3 = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5663)));
      var fs = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5663)));
      return G__5658__delegate(f1, f2, f3, fs)
    };
    G__5658.cljs$lang$arity$variadic = G__5658__delegate;
    return G__5658
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$lang$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$lang$arity$0 = comp__0;
  comp.cljs$lang$arity$1 = comp__1;
  comp.cljs$lang$arity$2 = comp__2;
  comp.cljs$lang$arity$3 = comp__3;
  comp.cljs$lang$arity$variadic = comp__4.cljs$lang$arity$variadic;
  return comp
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__2 = function(f, arg1) {
    return function() {
      var G__5664__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args)
      };
      var G__5664 = function(var_args) {
        var args = null;
        if(goog.isDef(var_args)) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
        }
        return G__5664__delegate.call(this, args)
      };
      G__5664.cljs$lang$maxFixedArity = 0;
      G__5664.cljs$lang$applyTo = function(arglist__5665) {
        var args = cljs.core.seq(arglist__5665);
        return G__5664__delegate(args)
      };
      G__5664.cljs$lang$arity$variadic = G__5664__delegate;
      return G__5664
    }()
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__5666__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args)
      };
      var G__5666 = function(var_args) {
        var args = null;
        if(goog.isDef(var_args)) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
        }
        return G__5666__delegate.call(this, args)
      };
      G__5666.cljs$lang$maxFixedArity = 0;
      G__5666.cljs$lang$applyTo = function(arglist__5667) {
        var args = cljs.core.seq(arglist__5667);
        return G__5666__delegate(args)
      };
      G__5666.cljs$lang$arity$variadic = G__5666__delegate;
      return G__5666
    }()
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__5668__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args)
      };
      var G__5668 = function(var_args) {
        var args = null;
        if(goog.isDef(var_args)) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
        }
        return G__5668__delegate.call(this, args)
      };
      G__5668.cljs$lang$maxFixedArity = 0;
      G__5668.cljs$lang$applyTo = function(arglist__5669) {
        var args = cljs.core.seq(arglist__5669);
        return G__5668__delegate(args)
      };
      G__5668.cljs$lang$arity$variadic = G__5668__delegate;
      return G__5668
    }()
  };
  var partial__5 = function() {
    var G__5670__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__5671__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args))
        };
        var G__5671 = function(var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
          }
          return G__5671__delegate.call(this, args)
        };
        G__5671.cljs$lang$maxFixedArity = 0;
        G__5671.cljs$lang$applyTo = function(arglist__5672) {
          var args = cljs.core.seq(arglist__5672);
          return G__5671__delegate(args)
        };
        G__5671.cljs$lang$arity$variadic = G__5671__delegate;
        return G__5671
      }()
    };
    var G__5670 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__5670__delegate.call(this, f, arg1, arg2, arg3, more)
    };
    G__5670.cljs$lang$maxFixedArity = 4;
    G__5670.cljs$lang$applyTo = function(arglist__5673) {
      var f = cljs.core.first(arglist__5673);
      var arg1 = cljs.core.first(cljs.core.next(arglist__5673));
      var arg2 = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5673)));
      var arg3 = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(arglist__5673))));
      var more = cljs.core.rest(cljs.core.next(cljs.core.next(cljs.core.next(arglist__5673))));
      return G__5670__delegate(f, arg1, arg2, arg3, more)
    };
    G__5670.cljs$lang$arity$variadic = G__5670__delegate;
    return G__5670
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$lang$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$lang$arity$2 = partial__2;
  partial.cljs$lang$arity$3 = partial__3;
  partial.cljs$lang$arity$4 = partial__4;
  partial.cljs$lang$arity$variadic = partial__5.cljs$lang$arity$variadic;
  return partial
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__5674 = null;
      var G__5674__1 = function(a) {
        return f.call(null, a == null ? x : a)
      };
      var G__5674__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b)
      };
      var G__5674__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c)
      };
      var G__5674__4 = function() {
        var G__5675__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds)
        };
        var G__5675 = function(a, b, c, var_args) {
          var ds = null;
          if(goog.isDef(var_args)) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__5675__delegate.call(this, a, b, c, ds)
        };
        G__5675.cljs$lang$maxFixedArity = 3;
        G__5675.cljs$lang$applyTo = function(arglist__5676) {
          var a = cljs.core.first(arglist__5676);
          var b = cljs.core.first(cljs.core.next(arglist__5676));
          var c = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5676)));
          var ds = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5676)));
          return G__5675__delegate(a, b, c, ds)
        };
        G__5675.cljs$lang$arity$variadic = G__5675__delegate;
        return G__5675
      }();
      G__5674 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__5674__1.call(this, a);
          case 2:
            return G__5674__2.call(this, a, b);
          case 3:
            return G__5674__3.call(this, a, b, c);
          default:
            return G__5674__4.cljs$lang$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__5674.cljs$lang$maxFixedArity = 3;
      G__5674.cljs$lang$applyTo = G__5674__4.cljs$lang$applyTo;
      return G__5674
    }()
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__5677 = null;
      var G__5677__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b)
      };
      var G__5677__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c)
      };
      var G__5677__4 = function() {
        var G__5678__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds)
        };
        var G__5678 = function(a, b, c, var_args) {
          var ds = null;
          if(goog.isDef(var_args)) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__5678__delegate.call(this, a, b, c, ds)
        };
        G__5678.cljs$lang$maxFixedArity = 3;
        G__5678.cljs$lang$applyTo = function(arglist__5679) {
          var a = cljs.core.first(arglist__5679);
          var b = cljs.core.first(cljs.core.next(arglist__5679));
          var c = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5679)));
          var ds = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5679)));
          return G__5678__delegate(a, b, c, ds)
        };
        G__5678.cljs$lang$arity$variadic = G__5678__delegate;
        return G__5678
      }();
      G__5677 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__5677__2.call(this, a, b);
          case 3:
            return G__5677__3.call(this, a, b, c);
          default:
            return G__5677__4.cljs$lang$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__5677.cljs$lang$maxFixedArity = 3;
      G__5677.cljs$lang$applyTo = G__5677__4.cljs$lang$applyTo;
      return G__5677
    }()
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__5680 = null;
      var G__5680__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b)
      };
      var G__5680__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c)
      };
      var G__5680__4 = function() {
        var G__5681__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds)
        };
        var G__5681 = function(a, b, c, var_args) {
          var ds = null;
          if(goog.isDef(var_args)) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__5681__delegate.call(this, a, b, c, ds)
        };
        G__5681.cljs$lang$maxFixedArity = 3;
        G__5681.cljs$lang$applyTo = function(arglist__5682) {
          var a = cljs.core.first(arglist__5682);
          var b = cljs.core.first(cljs.core.next(arglist__5682));
          var c = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5682)));
          var ds = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5682)));
          return G__5681__delegate(a, b, c, ds)
        };
        G__5681.cljs$lang$arity$variadic = G__5681__delegate;
        return G__5681
      }();
      G__5680 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__5680__2.call(this, a, b);
          case 3:
            return G__5680__3.call(this, a, b, c);
          default:
            return G__5680__4.cljs$lang$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__5680.cljs$lang$maxFixedArity = 3;
      G__5680.cljs$lang$applyTo = G__5680__4.cljs$lang$applyTo;
      return G__5680
    }()
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$lang$arity$2 = fnil__2;
  fnil.cljs$lang$arity$3 = fnil__3;
  fnil.cljs$lang$arity$4 = fnil__4;
  return fnil
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, false, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4252__auto___5683 = size;
          var i_5684 = 0;
          while(true) {
            if(i_5684 < n__4252__auto___5683) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_5684, cljs.core._nth.call(null, c, i_5684)));
              var G__5685 = i_5684 + 1;
              i_5684 = G__5685;
              continue
            }else {
            }
            break
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)))
        }else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)))
        }
      }else {
        return null
      }
    }, null)
  };
  return mapi.call(null, 0, coll)
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, false, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4252__auto___5686 = size;
        var i_5687 = 0;
        while(true) {
          if(i_5687 < n__4252__auto___5686) {
            var x_5688 = f.call(null, cljs.core._nth.call(null, c, i_5687));
            if(x_5688 == null) {
            }else {
              cljs.core.chunk_append.call(null, b, x_5688)
            }
            var G__5689 = i_5687 + 1;
            i_5687 = G__5689;
            continue
          }else {
          }
          break
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)))
      }else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if(x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s))
        }else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)))
        }
      }
    }else {
      return null
    }
  }, null)
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, false, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4252__auto___5696 = size;
          var i_5697 = 0;
          while(true) {
            if(i_5697 < n__4252__auto___5696) {
              var x_5698 = f.call(null, idx + i_5697, cljs.core._nth.call(null, c, i_5697));
              if(x_5698 == null) {
              }else {
                cljs.core.chunk_append.call(null, b, x_5698)
              }
              var G__5699 = i_5697 + 1;
              i_5697 = G__5699;
              continue
            }else {
            }
            break
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)))
        }else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if(x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s))
          }else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)))
          }
        }
      }else {
        return null
      }
    }, null)
  };
  return keepi.call(null, 0, coll)
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x))
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3941__auto__ = p.call(null, x);
          if(cljs.core.truth_(and__3941__auto__)) {
            return p.call(null, y)
          }else {
            return and__3941__auto__
          }
        }())
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3941__auto__ = p.call(null, x);
          if(cljs.core.truth_(and__3941__auto__)) {
            var and__3941__auto____$1 = p.call(null, y);
            if(cljs.core.truth_(and__3941__auto____$1)) {
              return p.call(null, z)
            }else {
              return and__3941__auto____$1
            }
          }else {
            return and__3941__auto__
          }
        }())
      };
      var ep1__4 = function() {
        var G__5706__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, function() {
            var and__3941__auto__ = ep1.call(null, x, y, z);
            if(cljs.core.truth_(and__3941__auto__)) {
              return cljs.core.every_QMARK_.call(null, p, args)
            }else {
              return and__3941__auto__
            }
          }())
        };
        var G__5706 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__5706__delegate.call(this, x, y, z, args)
        };
        G__5706.cljs$lang$maxFixedArity = 3;
        G__5706.cljs$lang$applyTo = function(arglist__5707) {
          var x = cljs.core.first(arglist__5707);
          var y = cljs.core.first(cljs.core.next(arglist__5707));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5707)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5707)));
          return G__5706__delegate(x, y, z, args)
        };
        G__5706.cljs$lang$arity$variadic = G__5706__delegate;
        return G__5706
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$lang$arity$0 = ep1__0;
      ep1.cljs$lang$arity$1 = ep1__1;
      ep1.cljs$lang$arity$2 = ep1__2;
      ep1.cljs$lang$arity$3 = ep1__3;
      ep1.cljs$lang$arity$variadic = ep1__4.cljs$lang$arity$variadic;
      return ep1
    }()
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3941__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3941__auto__)) {
            return p2.call(null, x)
          }else {
            return and__3941__auto__
          }
        }())
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3941__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3941__auto__)) {
            var and__3941__auto____$1 = p1.call(null, y);
            if(cljs.core.truth_(and__3941__auto____$1)) {
              var and__3941__auto____$2 = p2.call(null, x);
              if(cljs.core.truth_(and__3941__auto____$2)) {
                return p2.call(null, y)
              }else {
                return and__3941__auto____$2
              }
            }else {
              return and__3941__auto____$1
            }
          }else {
            return and__3941__auto__
          }
        }())
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3941__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3941__auto__)) {
            var and__3941__auto____$1 = p1.call(null, y);
            if(cljs.core.truth_(and__3941__auto____$1)) {
              var and__3941__auto____$2 = p1.call(null, z);
              if(cljs.core.truth_(and__3941__auto____$2)) {
                var and__3941__auto____$3 = p2.call(null, x);
                if(cljs.core.truth_(and__3941__auto____$3)) {
                  var and__3941__auto____$4 = p2.call(null, y);
                  if(cljs.core.truth_(and__3941__auto____$4)) {
                    return p2.call(null, z)
                  }else {
                    return and__3941__auto____$4
                  }
                }else {
                  return and__3941__auto____$3
                }
              }else {
                return and__3941__auto____$2
              }
            }else {
              return and__3941__auto____$1
            }
          }else {
            return and__3941__auto__
          }
        }())
      };
      var ep2__4 = function() {
        var G__5708__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, function() {
            var and__3941__auto__ = ep2.call(null, x, y, z);
            if(cljs.core.truth_(and__3941__auto__)) {
              return cljs.core.every_QMARK_.call(null, function(p1__5690_SHARP_) {
                var and__3941__auto____$1 = p1.call(null, p1__5690_SHARP_);
                if(cljs.core.truth_(and__3941__auto____$1)) {
                  return p2.call(null, p1__5690_SHARP_)
                }else {
                  return and__3941__auto____$1
                }
              }, args)
            }else {
              return and__3941__auto__
            }
          }())
        };
        var G__5708 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__5708__delegate.call(this, x, y, z, args)
        };
        G__5708.cljs$lang$maxFixedArity = 3;
        G__5708.cljs$lang$applyTo = function(arglist__5709) {
          var x = cljs.core.first(arglist__5709);
          var y = cljs.core.first(cljs.core.next(arglist__5709));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5709)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5709)));
          return G__5708__delegate(x, y, z, args)
        };
        G__5708.cljs$lang$arity$variadic = G__5708__delegate;
        return G__5708
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$lang$arity$0 = ep2__0;
      ep2.cljs$lang$arity$1 = ep2__1;
      ep2.cljs$lang$arity$2 = ep2__2;
      ep2.cljs$lang$arity$3 = ep2__3;
      ep2.cljs$lang$arity$variadic = ep2__4.cljs$lang$arity$variadic;
      return ep2
    }()
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3941__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3941__auto__)) {
            var and__3941__auto____$1 = p2.call(null, x);
            if(cljs.core.truth_(and__3941__auto____$1)) {
              return p3.call(null, x)
            }else {
              return and__3941__auto____$1
            }
          }else {
            return and__3941__auto__
          }
        }())
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3941__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3941__auto__)) {
            var and__3941__auto____$1 = p2.call(null, x);
            if(cljs.core.truth_(and__3941__auto____$1)) {
              var and__3941__auto____$2 = p3.call(null, x);
              if(cljs.core.truth_(and__3941__auto____$2)) {
                var and__3941__auto____$3 = p1.call(null, y);
                if(cljs.core.truth_(and__3941__auto____$3)) {
                  var and__3941__auto____$4 = p2.call(null, y);
                  if(cljs.core.truth_(and__3941__auto____$4)) {
                    return p3.call(null, y)
                  }else {
                    return and__3941__auto____$4
                  }
                }else {
                  return and__3941__auto____$3
                }
              }else {
                return and__3941__auto____$2
              }
            }else {
              return and__3941__auto____$1
            }
          }else {
            return and__3941__auto__
          }
        }())
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3941__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3941__auto__)) {
            var and__3941__auto____$1 = p2.call(null, x);
            if(cljs.core.truth_(and__3941__auto____$1)) {
              var and__3941__auto____$2 = p3.call(null, x);
              if(cljs.core.truth_(and__3941__auto____$2)) {
                var and__3941__auto____$3 = p1.call(null, y);
                if(cljs.core.truth_(and__3941__auto____$3)) {
                  var and__3941__auto____$4 = p2.call(null, y);
                  if(cljs.core.truth_(and__3941__auto____$4)) {
                    var and__3941__auto____$5 = p3.call(null, y);
                    if(cljs.core.truth_(and__3941__auto____$5)) {
                      var and__3941__auto____$6 = p1.call(null, z);
                      if(cljs.core.truth_(and__3941__auto____$6)) {
                        var and__3941__auto____$7 = p2.call(null, z);
                        if(cljs.core.truth_(and__3941__auto____$7)) {
                          return p3.call(null, z)
                        }else {
                          return and__3941__auto____$7
                        }
                      }else {
                        return and__3941__auto____$6
                      }
                    }else {
                      return and__3941__auto____$5
                    }
                  }else {
                    return and__3941__auto____$4
                  }
                }else {
                  return and__3941__auto____$3
                }
              }else {
                return and__3941__auto____$2
              }
            }else {
              return and__3941__auto____$1
            }
          }else {
            return and__3941__auto__
          }
        }())
      };
      var ep3__4 = function() {
        var G__5710__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, function() {
            var and__3941__auto__ = ep3.call(null, x, y, z);
            if(cljs.core.truth_(and__3941__auto__)) {
              return cljs.core.every_QMARK_.call(null, function(p1__5691_SHARP_) {
                var and__3941__auto____$1 = p1.call(null, p1__5691_SHARP_);
                if(cljs.core.truth_(and__3941__auto____$1)) {
                  var and__3941__auto____$2 = p2.call(null, p1__5691_SHARP_);
                  if(cljs.core.truth_(and__3941__auto____$2)) {
                    return p3.call(null, p1__5691_SHARP_)
                  }else {
                    return and__3941__auto____$2
                  }
                }else {
                  return and__3941__auto____$1
                }
              }, args)
            }else {
              return and__3941__auto__
            }
          }())
        };
        var G__5710 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__5710__delegate.call(this, x, y, z, args)
        };
        G__5710.cljs$lang$maxFixedArity = 3;
        G__5710.cljs$lang$applyTo = function(arglist__5711) {
          var x = cljs.core.first(arglist__5711);
          var y = cljs.core.first(cljs.core.next(arglist__5711));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5711)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5711)));
          return G__5710__delegate(x, y, z, args)
        };
        G__5710.cljs$lang$arity$variadic = G__5710__delegate;
        return G__5710
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$lang$arity$0 = ep3__0;
      ep3.cljs$lang$arity$1 = ep3__1;
      ep3.cljs$lang$arity$2 = ep3__2;
      ep3.cljs$lang$arity$3 = ep3__3;
      ep3.cljs$lang$arity$variadic = ep3__4.cljs$lang$arity$variadic;
      return ep3
    }()
  };
  var every_pred__4 = function() {
    var G__5712__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var epn = null;
        var epn__0 = function() {
          return true
        };
        var epn__1 = function(x) {
          return cljs.core.every_QMARK_.call(null, function(p1__5692_SHARP_) {
            return p1__5692_SHARP_.call(null, x)
          }, ps__$1)
        };
        var epn__2 = function(x, y) {
          return cljs.core.every_QMARK_.call(null, function(p1__5693_SHARP_) {
            var and__3941__auto__ = p1__5693_SHARP_.call(null, x);
            if(cljs.core.truth_(and__3941__auto__)) {
              return p1__5693_SHARP_.call(null, y)
            }else {
              return and__3941__auto__
            }
          }, ps__$1)
        };
        var epn__3 = function(x, y, z) {
          return cljs.core.every_QMARK_.call(null, function(p1__5694_SHARP_) {
            var and__3941__auto__ = p1__5694_SHARP_.call(null, x);
            if(cljs.core.truth_(and__3941__auto__)) {
              var and__3941__auto____$1 = p1__5694_SHARP_.call(null, y);
              if(cljs.core.truth_(and__3941__auto____$1)) {
                return p1__5694_SHARP_.call(null, z)
              }else {
                return and__3941__auto____$1
              }
            }else {
              return and__3941__auto__
            }
          }, ps__$1)
        };
        var epn__4 = function() {
          var G__5713__delegate = function(x, y, z, args) {
            return cljs.core.boolean$.call(null, function() {
              var and__3941__auto__ = epn.call(null, x, y, z);
              if(cljs.core.truth_(and__3941__auto__)) {
                return cljs.core.every_QMARK_.call(null, function(p1__5695_SHARP_) {
                  return cljs.core.every_QMARK_.call(null, p1__5695_SHARP_, args)
                }, ps__$1)
              }else {
                return and__3941__auto__
              }
            }())
          };
          var G__5713 = function(x, y, z, var_args) {
            var args = null;
            if(goog.isDef(var_args)) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
            }
            return G__5713__delegate.call(this, x, y, z, args)
          };
          G__5713.cljs$lang$maxFixedArity = 3;
          G__5713.cljs$lang$applyTo = function(arglist__5714) {
            var x = cljs.core.first(arglist__5714);
            var y = cljs.core.first(cljs.core.next(arglist__5714));
            var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5714)));
            var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5714)));
            return G__5713__delegate(x, y, z, args)
          };
          G__5713.cljs$lang$arity$variadic = G__5713__delegate;
          return G__5713
        }();
        epn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return epn__0.call(this);
            case 1:
              return epn__1.call(this, x);
            case 2:
              return epn__2.call(this, x, y);
            case 3:
              return epn__3.call(this, x, y, z);
            default:
              return epn__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        epn.cljs$lang$maxFixedArity = 3;
        epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
        epn.cljs$lang$arity$0 = epn__0;
        epn.cljs$lang$arity$1 = epn__1;
        epn.cljs$lang$arity$2 = epn__2;
        epn.cljs$lang$arity$3 = epn__3;
        epn.cljs$lang$arity$variadic = epn__4.cljs$lang$arity$variadic;
        return epn
      }()
    };
    var G__5712 = function(p1, p2, p3, var_args) {
      var ps = null;
      if(goog.isDef(var_args)) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__5712__delegate.call(this, p1, p2, p3, ps)
    };
    G__5712.cljs$lang$maxFixedArity = 3;
    G__5712.cljs$lang$applyTo = function(arglist__5715) {
      var p1 = cljs.core.first(arglist__5715);
      var p2 = cljs.core.first(cljs.core.next(arglist__5715));
      var p3 = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5715)));
      var ps = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5715)));
      return G__5712__delegate(p1, p2, p3, ps)
    };
    G__5712.cljs$lang$arity$variadic = G__5712__delegate;
    return G__5712
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$lang$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$lang$arity$1 = every_pred__1;
  every_pred.cljs$lang$arity$2 = every_pred__2;
  every_pred.cljs$lang$arity$3 = every_pred__3;
  every_pred.cljs$lang$arity$variadic = every_pred__4.cljs$lang$arity$variadic;
  return every_pred
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null
      };
      var sp1__1 = function(x) {
        return p.call(null, x)
      };
      var sp1__2 = function(x, y) {
        var or__3943__auto__ = p.call(null, x);
        if(cljs.core.truth_(or__3943__auto__)) {
          return or__3943__auto__
        }else {
          return p.call(null, y)
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3943__auto__ = p.call(null, x);
        if(cljs.core.truth_(or__3943__auto__)) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = p.call(null, y);
          if(cljs.core.truth_(or__3943__auto____$1)) {
            return or__3943__auto____$1
          }else {
            return p.call(null, z)
          }
        }
      };
      var sp1__4 = function() {
        var G__5717__delegate = function(x, y, z, args) {
          var or__3943__auto__ = sp1.call(null, x, y, z);
          if(cljs.core.truth_(or__3943__auto__)) {
            return or__3943__auto__
          }else {
            return cljs.core.some.call(null, p, args)
          }
        };
        var G__5717 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__5717__delegate.call(this, x, y, z, args)
        };
        G__5717.cljs$lang$maxFixedArity = 3;
        G__5717.cljs$lang$applyTo = function(arglist__5718) {
          var x = cljs.core.first(arglist__5718);
          var y = cljs.core.first(cljs.core.next(arglist__5718));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5718)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5718)));
          return G__5717__delegate(x, y, z, args)
        };
        G__5717.cljs$lang$arity$variadic = G__5717__delegate;
        return G__5717
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$lang$arity$0 = sp1__0;
      sp1.cljs$lang$arity$1 = sp1__1;
      sp1.cljs$lang$arity$2 = sp1__2;
      sp1.cljs$lang$arity$3 = sp1__3;
      sp1.cljs$lang$arity$variadic = sp1__4.cljs$lang$arity$variadic;
      return sp1
    }()
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null
      };
      var sp2__1 = function(x) {
        var or__3943__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3943__auto__)) {
          return or__3943__auto__
        }else {
          return p2.call(null, x)
        }
      };
      var sp2__2 = function(x, y) {
        var or__3943__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3943__auto__)) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = p1.call(null, y);
          if(cljs.core.truth_(or__3943__auto____$1)) {
            return or__3943__auto____$1
          }else {
            var or__3943__auto____$2 = p2.call(null, x);
            if(cljs.core.truth_(or__3943__auto____$2)) {
              return or__3943__auto____$2
            }else {
              return p2.call(null, y)
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3943__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3943__auto__)) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = p1.call(null, y);
          if(cljs.core.truth_(or__3943__auto____$1)) {
            return or__3943__auto____$1
          }else {
            var or__3943__auto____$2 = p1.call(null, z);
            if(cljs.core.truth_(or__3943__auto____$2)) {
              return or__3943__auto____$2
            }else {
              var or__3943__auto____$3 = p2.call(null, x);
              if(cljs.core.truth_(or__3943__auto____$3)) {
                return or__3943__auto____$3
              }else {
                var or__3943__auto____$4 = p2.call(null, y);
                if(cljs.core.truth_(or__3943__auto____$4)) {
                  return or__3943__auto____$4
                }else {
                  return p2.call(null, z)
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__5719__delegate = function(x, y, z, args) {
          var or__3943__auto__ = sp2.call(null, x, y, z);
          if(cljs.core.truth_(or__3943__auto__)) {
            return or__3943__auto__
          }else {
            return cljs.core.some.call(null, function(p1__5700_SHARP_) {
              var or__3943__auto____$1 = p1.call(null, p1__5700_SHARP_);
              if(cljs.core.truth_(or__3943__auto____$1)) {
                return or__3943__auto____$1
              }else {
                return p2.call(null, p1__5700_SHARP_)
              }
            }, args)
          }
        };
        var G__5719 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__5719__delegate.call(this, x, y, z, args)
        };
        G__5719.cljs$lang$maxFixedArity = 3;
        G__5719.cljs$lang$applyTo = function(arglist__5720) {
          var x = cljs.core.first(arglist__5720);
          var y = cljs.core.first(cljs.core.next(arglist__5720));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5720)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5720)));
          return G__5719__delegate(x, y, z, args)
        };
        G__5719.cljs$lang$arity$variadic = G__5719__delegate;
        return G__5719
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$lang$arity$0 = sp2__0;
      sp2.cljs$lang$arity$1 = sp2__1;
      sp2.cljs$lang$arity$2 = sp2__2;
      sp2.cljs$lang$arity$3 = sp2__3;
      sp2.cljs$lang$arity$variadic = sp2__4.cljs$lang$arity$variadic;
      return sp2
    }()
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null
      };
      var sp3__1 = function(x) {
        var or__3943__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3943__auto__)) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = p2.call(null, x);
          if(cljs.core.truth_(or__3943__auto____$1)) {
            return or__3943__auto____$1
          }else {
            return p3.call(null, x)
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3943__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3943__auto__)) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = p2.call(null, x);
          if(cljs.core.truth_(or__3943__auto____$1)) {
            return or__3943__auto____$1
          }else {
            var or__3943__auto____$2 = p3.call(null, x);
            if(cljs.core.truth_(or__3943__auto____$2)) {
              return or__3943__auto____$2
            }else {
              var or__3943__auto____$3 = p1.call(null, y);
              if(cljs.core.truth_(or__3943__auto____$3)) {
                return or__3943__auto____$3
              }else {
                var or__3943__auto____$4 = p2.call(null, y);
                if(cljs.core.truth_(or__3943__auto____$4)) {
                  return or__3943__auto____$4
                }else {
                  return p3.call(null, y)
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3943__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3943__auto__)) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = p2.call(null, x);
          if(cljs.core.truth_(or__3943__auto____$1)) {
            return or__3943__auto____$1
          }else {
            var or__3943__auto____$2 = p3.call(null, x);
            if(cljs.core.truth_(or__3943__auto____$2)) {
              return or__3943__auto____$2
            }else {
              var or__3943__auto____$3 = p1.call(null, y);
              if(cljs.core.truth_(or__3943__auto____$3)) {
                return or__3943__auto____$3
              }else {
                var or__3943__auto____$4 = p2.call(null, y);
                if(cljs.core.truth_(or__3943__auto____$4)) {
                  return or__3943__auto____$4
                }else {
                  var or__3943__auto____$5 = p3.call(null, y);
                  if(cljs.core.truth_(or__3943__auto____$5)) {
                    return or__3943__auto____$5
                  }else {
                    var or__3943__auto____$6 = p1.call(null, z);
                    if(cljs.core.truth_(or__3943__auto____$6)) {
                      return or__3943__auto____$6
                    }else {
                      var or__3943__auto____$7 = p2.call(null, z);
                      if(cljs.core.truth_(or__3943__auto____$7)) {
                        return or__3943__auto____$7
                      }else {
                        return p3.call(null, z)
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__5721__delegate = function(x, y, z, args) {
          var or__3943__auto__ = sp3.call(null, x, y, z);
          if(cljs.core.truth_(or__3943__auto__)) {
            return or__3943__auto__
          }else {
            return cljs.core.some.call(null, function(p1__5701_SHARP_) {
              var or__3943__auto____$1 = p1.call(null, p1__5701_SHARP_);
              if(cljs.core.truth_(or__3943__auto____$1)) {
                return or__3943__auto____$1
              }else {
                var or__3943__auto____$2 = p2.call(null, p1__5701_SHARP_);
                if(cljs.core.truth_(or__3943__auto____$2)) {
                  return or__3943__auto____$2
                }else {
                  return p3.call(null, p1__5701_SHARP_)
                }
              }
            }, args)
          }
        };
        var G__5721 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__5721__delegate.call(this, x, y, z, args)
        };
        G__5721.cljs$lang$maxFixedArity = 3;
        G__5721.cljs$lang$applyTo = function(arglist__5722) {
          var x = cljs.core.first(arglist__5722);
          var y = cljs.core.first(cljs.core.next(arglist__5722));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5722)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5722)));
          return G__5721__delegate(x, y, z, args)
        };
        G__5721.cljs$lang$arity$variadic = G__5721__delegate;
        return G__5721
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$lang$arity$0 = sp3__0;
      sp3.cljs$lang$arity$1 = sp3__1;
      sp3.cljs$lang$arity$2 = sp3__2;
      sp3.cljs$lang$arity$3 = sp3__3;
      sp3.cljs$lang$arity$variadic = sp3__4.cljs$lang$arity$variadic;
      return sp3
    }()
  };
  var some_fn__4 = function() {
    var G__5723__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var spn = null;
        var spn__0 = function() {
          return null
        };
        var spn__1 = function(x) {
          return cljs.core.some.call(null, function(p1__5702_SHARP_) {
            return p1__5702_SHARP_.call(null, x)
          }, ps__$1)
        };
        var spn__2 = function(x, y) {
          return cljs.core.some.call(null, function(p1__5703_SHARP_) {
            var or__3943__auto__ = p1__5703_SHARP_.call(null, x);
            if(cljs.core.truth_(or__3943__auto__)) {
              return or__3943__auto__
            }else {
              return p1__5703_SHARP_.call(null, y)
            }
          }, ps__$1)
        };
        var spn__3 = function(x, y, z) {
          return cljs.core.some.call(null, function(p1__5704_SHARP_) {
            var or__3943__auto__ = p1__5704_SHARP_.call(null, x);
            if(cljs.core.truth_(or__3943__auto__)) {
              return or__3943__auto__
            }else {
              var or__3943__auto____$1 = p1__5704_SHARP_.call(null, y);
              if(cljs.core.truth_(or__3943__auto____$1)) {
                return or__3943__auto____$1
              }else {
                return p1__5704_SHARP_.call(null, z)
              }
            }
          }, ps__$1)
        };
        var spn__4 = function() {
          var G__5724__delegate = function(x, y, z, args) {
            var or__3943__auto__ = spn.call(null, x, y, z);
            if(cljs.core.truth_(or__3943__auto__)) {
              return or__3943__auto__
            }else {
              return cljs.core.some.call(null, function(p1__5705_SHARP_) {
                return cljs.core.some.call(null, p1__5705_SHARP_, args)
              }, ps__$1)
            }
          };
          var G__5724 = function(x, y, z, var_args) {
            var args = null;
            if(goog.isDef(var_args)) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
            }
            return G__5724__delegate.call(this, x, y, z, args)
          };
          G__5724.cljs$lang$maxFixedArity = 3;
          G__5724.cljs$lang$applyTo = function(arglist__5725) {
            var x = cljs.core.first(arglist__5725);
            var y = cljs.core.first(cljs.core.next(arglist__5725));
            var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5725)));
            var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5725)));
            return G__5724__delegate(x, y, z, args)
          };
          G__5724.cljs$lang$arity$variadic = G__5724__delegate;
          return G__5724
        }();
        spn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return spn__0.call(this);
            case 1:
              return spn__1.call(this, x);
            case 2:
              return spn__2.call(this, x, y);
            case 3:
              return spn__3.call(this, x, y, z);
            default:
              return spn__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        spn.cljs$lang$maxFixedArity = 3;
        spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
        spn.cljs$lang$arity$0 = spn__0;
        spn.cljs$lang$arity$1 = spn__1;
        spn.cljs$lang$arity$2 = spn__2;
        spn.cljs$lang$arity$3 = spn__3;
        spn.cljs$lang$arity$variadic = spn__4.cljs$lang$arity$variadic;
        return spn
      }()
    };
    var G__5723 = function(p1, p2, p3, var_args) {
      var ps = null;
      if(goog.isDef(var_args)) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__5723__delegate.call(this, p1, p2, p3, ps)
    };
    G__5723.cljs$lang$maxFixedArity = 3;
    G__5723.cljs$lang$applyTo = function(arglist__5726) {
      var p1 = cljs.core.first(arglist__5726);
      var p2 = cljs.core.first(cljs.core.next(arglist__5726));
      var p3 = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5726)));
      var ps = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5726)));
      return G__5723__delegate(p1, p2, p3, ps)
    };
    G__5723.cljs$lang$arity$variadic = G__5723__delegate;
    return G__5723
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$lang$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$lang$arity$1 = some_fn__1;
  some_fn.cljs$lang$arity$2 = some_fn__2;
  some_fn.cljs$lang$arity$3 = some_fn__3;
  some_fn.cljs$lang$arity$variadic = some_fn__4.cljs$lang$arity$variadic;
  return some_fn
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, false, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4252__auto___5727 = size;
          var i_5728 = 0;
          while(true) {
            if(i_5728 < n__4252__auto___5727) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_5728)));
              var G__5729 = i_5728 + 1;
              i_5728 = G__5729;
              continue
            }else {
            }
            break
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)))
        }else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)))
        }
      }else {
        return null
      }
    }, null)
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, false, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if(cljs.core.truth_(function() {
        var and__3941__auto__ = s1;
        if(and__3941__auto__) {
          return s2
        }else {
          return and__3941__auto__
        }
      }())) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)))
      }else {
        return null
      }
    }, null)
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, false, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if(cljs.core.truth_(function() {
        var and__3941__auto__ = s1;
        if(and__3941__auto__) {
          var and__3941__auto____$1 = s2;
          if(and__3941__auto____$1) {
            return s3
          }else {
            return and__3941__auto____$1
          }
        }else {
          return and__3941__auto__
        }
      }())) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)))
      }else {
        return null
      }
    }, null)
  };
  var map__5 = function() {
    var G__5730__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, false, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if(cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)))
          }else {
            return null
          }
        }, null)
      };
      return map.call(null, function(p1__5716_SHARP_) {
        return cljs.core.apply.call(null, f, p1__5716_SHARP_)
      }, step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)))
    };
    var G__5730 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if(goog.isDef(var_args)) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__5730__delegate.call(this, f, c1, c2, c3, colls)
    };
    G__5730.cljs$lang$maxFixedArity = 4;
    G__5730.cljs$lang$applyTo = function(arglist__5731) {
      var f = cljs.core.first(arglist__5731);
      var c1 = cljs.core.first(cljs.core.next(arglist__5731));
      var c2 = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5731)));
      var c3 = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(arglist__5731))));
      var colls = cljs.core.rest(cljs.core.next(cljs.core.next(cljs.core.next(arglist__5731))));
      return G__5730__delegate(f, c1, c2, c3, colls)
    };
    G__5730.cljs$lang$arity$variadic = G__5730__delegate;
    return G__5730
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$lang$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$lang$arity$2 = map__2;
  map.cljs$lang$arity$3 = map__3;
  map.cljs$lang$arity$4 = map__4;
  map.cljs$lang$arity$variadic = map__5.cljs$lang$arity$variadic;
  return map
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, false, function() {
    if(n > 0) {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)))
      }else {
        return null
      }
    }else {
      return null
    }
  }, null)
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while(true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if(cljs.core.truth_(function() {
        var and__3941__auto__ = n__$1 > 0;
        if(and__3941__auto__) {
          return s
        }else {
          return and__3941__auto__
        }
      }())) {
        var G__5732 = n__$1 - 1;
        var G__5733 = cljs.core.rest.call(null, s);
        n__$1 = G__5732;
        coll__$1 = G__5733;
        continue
      }else {
        return s
      }
      break
    }
  };
  return new cljs.core.LazySeq(null, false, function() {
    return step.call(null, n, coll)
  }, null)
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s)
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x
    }, s, cljs.core.drop.call(null, n, s))
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$lang$arity$1 = drop_last__1;
  drop_last.cljs$lang$arity$2 = drop_last__2;
  return drop_last
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while(true) {
    if(lead) {
      var G__5734 = cljs.core.next.call(null, s);
      var G__5735 = cljs.core.next.call(null, lead);
      s = G__5734;
      lead = G__5735;
      continue
    }else {
      return s
    }
    break
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while(true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if(cljs.core.truth_(function() {
        var and__3941__auto__ = s;
        if(and__3941__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s))
        }else {
          return and__3941__auto__
        }
      }())) {
        var G__5736 = pred__$1;
        var G__5737 = cljs.core.rest.call(null, s);
        pred__$1 = G__5736;
        coll__$1 = G__5737;
        continue
      }else {
        return s
      }
      break
    }
  };
  return new cljs.core.LazySeq(null, false, function() {
    return step.call(null, pred, coll)
  }, null)
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, false, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s))
    }else {
      return null
    }
  }, null)
};
cljs.core.split_at = function split_at(n, coll) {
  return cljs.core.PersistentVector.fromArray([cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], true)
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, false, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x))
    }, null)
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x))
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$lang$arity$1 = repeat__1;
  repeat.cljs$lang$arity$2 = repeat__2;
  return repeat
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x))
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, false, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f))
    }, null)
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f))
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$lang$arity$1 = repeatedly__1;
  repeatedly.cljs$lang$arity$2 = repeatedly__2;
  return repeatedly
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, false, function() {
    return iterate.call(null, f, f.call(null, x))
  }, null))
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, false, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if(cljs.core.truth_(function() {
        var and__3941__auto__ = s1;
        if(and__3941__auto__) {
          return s2
        }else {
          return and__3941__auto__
        }
      }())) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))))
      }else {
        return null
      }
    }, null)
  };
  var interleave__3 = function() {
    var G__5738__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, false, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if(cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)))
        }else {
          return null
        }
      }, null)
    };
    var G__5738 = function(c1, c2, var_args) {
      var colls = null;
      if(goog.isDef(var_args)) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__5738__delegate.call(this, c1, c2, colls)
    };
    G__5738.cljs$lang$maxFixedArity = 2;
    G__5738.cljs$lang$applyTo = function(arglist__5739) {
      var c1 = cljs.core.first(arglist__5739);
      var c2 = cljs.core.first(cljs.core.next(arglist__5739));
      var colls = cljs.core.rest(cljs.core.next(arglist__5739));
      return G__5738__delegate(c1, c2, colls)
    };
    G__5738.cljs$lang$arity$variadic = G__5738__delegate;
    return G__5738
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$lang$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$lang$arity$2 = interleave__2;
  interleave.cljs$lang$arity$variadic = interleave__3.cljs$lang$arity$variadic;
  return interleave
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll))
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, false, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4090__auto__) {
        var coll__$1 = temp__4090__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1))
      }else {
        if(cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1))
        }else {
          return null
        }
      }
    }, null)
  };
  return cat.call(null, null, colls)
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll))
  };
  var mapcat__3 = function() {
    var G__5740__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls))
    };
    var G__5740 = function(f, coll, var_args) {
      var colls = null;
      if(goog.isDef(var_args)) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__5740__delegate.call(this, f, coll, colls)
    };
    G__5740.cljs$lang$maxFixedArity = 2;
    G__5740.cljs$lang$applyTo = function(arglist__5741) {
      var f = cljs.core.first(arglist__5741);
      var coll = cljs.core.first(cljs.core.next(arglist__5741));
      var colls = cljs.core.rest(cljs.core.next(arglist__5741));
      return G__5740__delegate(f, coll, colls)
    };
    G__5740.cljs$lang$arity$variadic = G__5740__delegate;
    return G__5740
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$lang$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$lang$arity$2 = mapcat__2;
  mapcat.cljs$lang$arity$variadic = mapcat__3.cljs$lang$arity$variadic;
  return mapcat
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, false, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4252__auto___5742 = size;
        var i_5743 = 0;
        while(true) {
          if(i_5743 < n__4252__auto___5742) {
            if(cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_5743)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_5743))
            }else {
            }
            var G__5744 = i_5743 + 1;
            i_5743 = G__5744;
            continue
          }else {
          }
          break
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)))
      }else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if(cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r))
        }else {
          return filter.call(null, pred, r)
        }
      }
    }else {
      return null
    }
  }, null)
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll)
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, false, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null)
    }, null)
  };
  return walk.call(null, root)
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__5745_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__5745_SHARP_)
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)))
};
cljs.core.into = function into(to, from) {
  if(cljs.core.truth_(function() {
    var G__5747 = to;
    if(G__5747) {
      if(cljs.core.truth_(function() {
        var or__3943__auto__ = G__5747.cljs$lang$protocol_mask$partition1$ & 4;
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          return G__5747.cljs$core$IEditableCollection$
        }
      }())) {
        return true
      }else {
        if(!G__5747.cljs$lang$protocol_mask$partition1$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.IEditableCollection, G__5747)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.IEditableCollection, G__5747)
    }
  }())) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, to, from)
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o))
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll))
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2))
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3))
  };
  var mapv__5 = function() {
    var G__5748__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls))
    };
    var G__5748 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if(goog.isDef(var_args)) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__5748__delegate.call(this, f, c1, c2, c3, colls)
    };
    G__5748.cljs$lang$maxFixedArity = 4;
    G__5748.cljs$lang$applyTo = function(arglist__5749) {
      var f = cljs.core.first(arglist__5749);
      var c1 = cljs.core.first(cljs.core.next(arglist__5749));
      var c2 = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5749)));
      var c3 = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(arglist__5749))));
      var colls = cljs.core.rest(cljs.core.next(cljs.core.next(cljs.core.next(arglist__5749))));
      return G__5748__delegate(f, c1, c2, c3, colls)
    };
    G__5748.cljs$lang$arity$variadic = G__5748__delegate;
    return G__5748
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$lang$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$lang$arity$2 = mapv__2;
  mapv.cljs$lang$arity$3 = mapv__3;
  mapv.cljs$lang$arity$4 = mapv__4;
  mapv.cljs$lang$arity$variadic = mapv__5.cljs$lang$arity$variadic;
  return mapv
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if(cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o)
    }else {
      return v
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll))
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll)
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, false, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if(n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)))
        }else {
          return null
        }
      }else {
        return null
      }
    }, null)
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, false, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if(n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)))
        }else {
          return cljs.core.list.call(null, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)))
        }
      }else {
        return null
      }
    }, null)
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$lang$arity$2 = partition__2;
  partition.cljs$lang$arity$3 = partition__3;
  partition.cljs$lang$arity$4 = partition__4;
  return partition
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null)
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while(true) {
      if(ks__$1) {
        if(cljs.core.not.call(null, function() {
          var G__5751 = m__$1;
          if(G__5751) {
            if(cljs.core.truth_(function() {
              var or__3943__auto__ = G__5751.cljs$lang$protocol_mask$partition0$ & 256;
              if(or__3943__auto__) {
                return or__3943__auto__
              }else {
                return G__5751.cljs$core$ILookup$
              }
            }())) {
              return true
            }else {
              if(!G__5751.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.type_satisfies_.call(null, cljs.core.ILookup, G__5751)
              }else {
                return false
              }
            }
          }else {
            return cljs.core.type_satisfies_.call(null, cljs.core.ILookup, G__5751)
          }
        }())) {
          return not_found
        }else {
          var m__$2 = cljs.core._lookup.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if(sentinel === m__$2) {
            return not_found
          }else {
            var G__5752 = sentinel;
            var G__5753 = m__$2;
            var G__5754 = cljs.core.next.call(null, ks__$1);
            sentinel = G__5752;
            m__$1 = G__5753;
            ks__$1 = G__5754;
            continue
          }
        }
      }else {
        return m__$1
      }
      break
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$lang$arity$2 = get_in__2;
  get_in.cljs$lang$arity$3 = get_in__3;
  return get_in
}();
cljs.core.assoc_in = function assoc_in(m, p__5755, v) {
  var vec__5757 = p__5755;
  var k = cljs.core.nth.call(null, vec__5757, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__5757, 1);
  if(cljs.core.truth_(ks)) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core._lookup.call(null, m, k, null), ks, v))
  }else {
    return cljs.core.assoc.call(null, m, k, v)
  }
};
cljs.core.update_in = function() {
  var update_in__delegate = function(m, p__5758, f, args) {
    var vec__5760 = p__5758;
    var k = cljs.core.nth.call(null, vec__5760, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__5760, 1);
    if(cljs.core.truth_(ks)) {
      return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core._lookup.call(null, m, k, null), ks, f, args))
    }else {
      return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core._lookup.call(null, m, k, null), args))
    }
  };
  var update_in = function(m, p__5758, f, var_args) {
    var args = null;
    if(goog.isDef(var_args)) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
    }
    return update_in__delegate.call(this, m, p__5758, f, args)
  };
  update_in.cljs$lang$maxFixedArity = 3;
  update_in.cljs$lang$applyTo = function(arglist__5761) {
    var m = cljs.core.first(arglist__5761);
    var p__5758 = cljs.core.first(cljs.core.next(arglist__5761));
    var f = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5761)));
    var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5761)));
    return update_in__delegate(m, p__5758, f, args)
  };
  update_in.cljs$lang$arity$variadic = update_in__delegate;
  return update_in
}();
goog.provide("cljs.core.Vector");
cljs.core.Vector = function(meta, array, __hash) {
  this.meta = meta;
  this.array = array;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32400159
};
cljs.core.Vector.cljs$lang$type = true;
cljs.core.Vector.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/Vector")
};
cljs.core.Vector.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/Vector")
};
cljs.core.Vector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
cljs.core.Vector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, null)
};
cljs.core.Vector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, not_found)
};
cljs.core.Vector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var new_array = self__.array.slice();
  new_array[k] = v;
  return new cljs.core.Vector(self__.meta, new_array, null)
};
cljs.core.Vector.prototype.call = function() {
  var G__5763 = null;
  var G__5763__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__5763__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__5763 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5763__2.call(this, self__, k);
      case 3:
        return G__5763__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5763
}();
cljs.core.Vector.prototype.apply = function(self__, args5762) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args5762.slice()))
};
cljs.core.Vector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var new_array = self__.array.slice();
  new_array.push(o);
  return new cljs.core.Vector(self__.meta, new_array, null)
};
cljs.core.Vector.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.Vector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, self__.array, f)
};
cljs.core.Vector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, self__.array, f, start)
};
cljs.core.Vector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.array.length > 0) {
    var vector_seq = function vector_seq(i) {
      return new cljs.core.LazySeq(null, false, function() {
        if(i < self__.array.length) {
          return cljs.core.cons.call(null, self__.array[i], vector_seq.call(null, i + 1))
        }else {
          return null
        }
      }, null)
    };
    return vector_seq.call(null, 0)
  }else {
    return null
  }
};
cljs.core.Vector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.array.length
};
cljs.core.Vector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var count = self__.array.length;
  if(count > 0) {
    return self__.array[count - 1]
  }else {
    return null
  }
};
cljs.core.Vector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  if(self__.array.length > 0) {
    var new_array = self__.array.slice();
    new_array.pop();
    return new cljs.core.Vector(self__.meta, new_array, null)
  }else {
    throw new Error("Can't pop empty vector");
  }
};
cljs.core.Vector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  return coll.cljs$core$IAssociative$_assoc$arity$3(coll, n, val)
};
cljs.core.Vector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.Vector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.Vector(meta__$1, self__.array, self__.__hash)
};
cljs.core.Vector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.Vector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  if(cljs.core.truth_(function() {
    var and__3941__auto__ = 0 <= n;
    if(and__3941__auto__) {
      return n < self__.array.length
    }else {
      return and__3941__auto__
    }
  }())) {
    return self__.array[n]
  }else {
    return null
  }
};
cljs.core.Vector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  if(cljs.core.truth_(function() {
    var and__3941__auto__ = 0 <= n;
    if(and__3941__auto__) {
      return n < self__.array.length
    }else {
      return and__3941__auto__
    }
  }())) {
    return self__.array[n]
  }else {
    return not_found
  }
};
cljs.core.Vector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.Vector.EMPTY, self__.meta)
};
cljs.core.Vector.EMPTY = new cljs.core.Vector(null, [], 0);
cljs.core.Vector.fromArray = function(xs) {
  return new cljs.core.Vector(null, xs, null)
};
goog.provide("cljs.core.VectorNode");
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorPrSeq = function(this__4033__auto__) {
  return cljs.core.list.call(null, "cljs.core/VectorNode")
};
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4033__auto__, writer__4034__auto__, opts__4035__auto__) {
  return cljs.core._write.call(null, writer__4034__auto__, "cljs.core/VectorNode")
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, cljs.core.make_array.call(null, 32))
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx]
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, node.arr.slice())
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if(cnt < 32) {
    return 0
  }else {
    return cnt - 1 >>> 5 << 5
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while(true) {
    if(ll === 0) {
      return ret
    }else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__5764 = ll - 5;
      var G__5765 = r;
      ll = G__5764;
      ret = G__5765;
      continue
    }
    break
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if(5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret
  }else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if(!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret
    }else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if(cljs.core.truth_(function() {
    var and__3941__auto__ = 0 <= i;
    if(and__3941__auto__) {
      return i < pv.cnt
    }else {
      return and__3941__auto__
    }
  }())) {
    if(i >= cljs.core.tail_off.call(null, pv)) {
      return pv.tail
    }else {
      var node = pv.root;
      var level = pv.shift;
      while(true) {
        if(level > 0) {
          var G__5766 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
          var G__5767 = level - 5;
          node = G__5766;
          level = G__5767;
          continue
        }else {
          return node.arr
        }
        break
      }
    }
  }else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(pv.cnt)].join(""));
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if(level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret
  }else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if(level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if(cljs.core.truth_(function() {
      var and__3941__auto__ = new_child == null;
      if(and__3941__auto__) {
        return subidx === 0
      }else {
        return and__3941__auto__
      }
    }())) {
      return null
    }else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret
    }
  }else {
    if(subidx === 0) {
      return null
    }else {
      if("\ufdd0:else") {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret
      }else {
        return null
      }
    }
  }
};
cljs.core.tv_editable_root = undefined;
cljs.core.tv_editable_tail = undefined;
cljs.core.TransientVector = undefined;
cljs.core.deref = undefined;
cljs.core.pr_sequential = undefined;
cljs.core.pr_sequential_writer = undefined;
cljs.core.pr_writer = undefined;
cljs.core.chunked_seq = undefined;
goog.provide("cljs.core.PersistentVector");
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 167668511
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentVector")
};
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/PersistentVector")
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail))
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, null)
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, not_found)
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  if(cljs.core.truth_(function() {
    var and__3941__auto__ = 0 <= k;
    if(and__3941__auto__) {
      return k < self__.cnt
    }else {
      return and__3941__auto__
    }
  }())) {
    if(cljs.core.tail_off.call(null, coll) <= k) {
      var new_tail = self__.tail.slice();
      new_tail[k & 31] = v;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null)
    }else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll, self__.shift, self__.root, k, v), self__.tail, null)
    }
  }else {
    if(k === self__.cnt) {
      return coll.cljs$core$ICollection$_conj$arity$2(coll, v)
    }else {
      if("\ufdd0:else") {
        throw new Error([cljs.core.str("Index "), cljs.core.str(k), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__5769 = null;
  var G__5769__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__5769__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__5769 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5769__2.call(this, self__, k);
      case 3:
        return G__5769__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5769
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args5768) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args5768.slice()))
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var step_init = [0, init];
  var i = 0;
  while(true) {
    if(i < self__.cnt) {
      var arr = cljs.core.array_for.call(null, v, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while(true) {
          if(j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2
            }else {
              var G__5770 = j + 1;
              var G__5771 = init__$2;
              j = G__5770;
              init__$1 = G__5771;
              continue
            }
          }else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1
          }
          break
        }
      }();
      if(cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1)
      }else {
        var G__5772 = i + step_init[0];
        i = G__5772;
        continue
      }
    }else {
      return step_init[1]
    }
    break
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  if(self__.cnt - cljs.core.tail_off.call(null, coll) < 32) {
    var new_tail = self__.tail.slice();
    new_tail.push(o);
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null)
  }else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r
    }() : cljs.core.push_tail.call(null, coll, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null)
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt > 0) {
    return new cljs.core.RSeq(coll, self__.cnt - 1, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(coll, 0)
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(coll, 1)
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, v, f)
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, v, f, start)
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt === 0) {
    return null
  }else {
    return cljs.core.chunked_seq.call(null, coll, 0, 0)
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.cnt
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt > 0) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, self__.cnt - 1)
  }else {
    return null
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  }else {
    if(1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta)
    }else {
      if(1 < self__.cnt - cljs.core.tail_off.call(null, coll)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null)
      }else {
        if("\ufdd0:else") {
          var new_tail = cljs.core.array_for.call(null, coll, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if(cljs.core.truth_(function() {
            var and__3941__auto__ = 5 < self__.shift;
            if(and__3941__auto__) {
              return cljs.core.pv_aget.call(null, new_root, 1) == null
            }else {
              return and__3941__auto__
            }
          }())) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null)
          }else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null)
          }
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  return coll.cljs$core$IAssociative$_assoc$arity$3(coll, n, val)
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash)
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  return cljs.core.array_for.call(null, coll, n)[n & 31]
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  if(cljs.core.truth_(function() {
    var and__3941__auto__ = 0 <= n;
    if(and__3941__auto__) {
      return n < self__.cnt
    }else {
      return and__3941__auto__
    }
  }())) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, n)
  }else {
    return not_found
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta)
};
cljs.core.PersistentVector.EMPTY_NODE = cljs.core.pv_fresh_node.call(null, null);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone === true ? xs : xs.slice();
  if(l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null)
  }else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while(true) {
      if(i < l) {
        var G__5773 = i + 1;
        var G__5774 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__5773;
        out = G__5774;
        continue
      }else {
        return cljs.core.persistent_BANG_.call(null, out)
      }
      break
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll))
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    return cljs.core.vec.call(null, args)
  };
  var vector = function(var_args) {
    var args = null;
    if(goog.isDef(var_args)) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return vector__delegate.call(this, args)
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__5775) {
    var args = cljs.core.seq(arglist__5775);
    return vector__delegate(args)
  };
  vector.cljs$lang$arity$variadic = vector__delegate;
  return vector
}();
goog.provide("cljs.core.ChunkedSeq");
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31719660;
  this.cljs$lang$protocol_mask$partition1$ = 1536
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/ChunkedSeq")
};
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/ChunkedSeq")
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  if(self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if(s == null) {
      return null
    }else {
      return s
    }
  }else {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll)
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return self__.node[self__.off]
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  if(self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if(s == null) {
      return cljs.core.List.EMPTY
    }else {
      return s
    }
  }else {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll)
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if(s == null) {
    return null
  }else {
    return s
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if(s == null) {
    return cljs.core.List.EMPTY
  }else {
    return s
  }
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return chunked_seq.call(null, vec, cljs.core.array_for.call(null, vec, i), i, off, null)
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return chunked_seq.call(null, vec, node, i, off, null)
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null)
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$lang$arity$3 = chunked_seq__3;
  chunked_seq.cljs$lang$arity$4 = chunked_seq__4;
  chunked_seq.cljs$lang$arity$5 = chunked_seq__5;
  return chunked_seq
}();
cljs.core.build_subvec = undefined;
goog.provide("cljs.core.Subvec");
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32400159
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/Subvec")
};
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/Subvec")
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, null)
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, not_found)
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var v_pos = self__.start + key;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc.call(null, self__.v, v_pos, val), self__.start, self__.end > v_pos + 1 ? self__.end : v_pos + 1, null)
};
cljs.core.Subvec.prototype.call = function() {
  var G__5777 = null;
  var G__5777__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__5777__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__5777 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5777__2.call(this, self__, k);
      case 3:
        return G__5777__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5777
}();
cljs.core.Subvec.prototype.apply = function(self__, args5776) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args5776.slice()))
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null)
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, coll, f)
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, coll, f, start__$1)
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var subvec_seq = function subvec_seq(i) {
    if(i === self__.end) {
      return null
    }else {
      return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, false, function() {
        return subvec_seq.call(null, i + 1)
      }, null))
    }
  };
  return subvec_seq.call(null, self__.start)
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.end - self__.start
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1)
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  if(self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  }else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null)
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  return coll.cljs$core$IAssociative$_assoc$arity$3(coll, n, val)
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash)
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  return cljs.core._nth.call(null, self__.v, self__.start + n)
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  return cljs.core._nth.call(null, self__.v, self__.start + n, not_found)
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.Vector.EMPTY, self__.meta)
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  var c = cljs.core.count.call(null, v);
  if(cljs.core.truth_(function() {
    var or__3943__auto__ = start < 0;
    if(or__3943__auto__) {
      return or__3943__auto__
    }else {
      var or__3943__auto____$1 = end < 0;
      if(or__3943__auto____$1) {
        return or__3943__auto____$1
      }else {
        var or__3943__auto____$2 = start > c;
        if(or__3943__auto____$2) {
          return or__3943__auto____$2
        }else {
          return end > c
        }
      }
    }
  }())) {
    throw new Error("Index out of bounds");
  }else {
  }
  return new cljs.core.Subvec(meta, v, start, end, __hash)
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v))
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null)
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$lang$arity$2 = subvec__2;
  subvec.cljs$lang$arity$3 = subvec__3;
  return subvec
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if(edit === node.edit) {
    return node
  }else {
    return new cljs.core.VectorNode(edit, node.arr.slice())
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode({}, node.arr.slice())
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = cljs.core.make_array.call(null, 32);
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if(!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node)
    }else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node)
    }
  }());
  return ret
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if(level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if(cljs.core.truth_(function() {
      var and__3941__auto__ = new_child == null;
      if(and__3941__auto__) {
        return subidx === 0
      }else {
        return and__3941__auto__
      }
    }())) {
      return null
    }else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1
    }
  }else {
    if(subidx === 0) {
      return null
    }else {
      if("\ufdd0:else") {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1
      }else {
        return null
      }
    }
  }
};
cljs.core.editable_array_for = function editable_array_for(tv, i) {
  if(cljs.core.truth_(function() {
    var and__3941__auto__ = 0 <= i;
    if(and__3941__auto__) {
      return i < tv.cnt
    }else {
      return and__3941__auto__
    }
  }())) {
    if(i >= cljs.core.tail_off.call(null, tv)) {
      return tv.tail
    }else {
      var root = tv.root;
      var node = root;
      var level = tv.shift;
      while(true) {
        if(level > 0) {
          var G__5778 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
          var G__5779 = level - 5;
          node = G__5778;
          level = G__5779;
          continue
        }else {
          return node.arr
        }
        break
      }
    }
  }else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in transient vector of length "), cljs.core.str(tv.cnt)].join(""));
  }
};
goog.provide("cljs.core.TransientVector");
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/TransientVector")
};
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/TransientVector")
};
cljs.core.TransientVector.prototype.call = function() {
  var G__5781 = null;
  var G__5781__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__5781__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__5781 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5781__2.call(this, self__, k);
      case 3:
        return G__5781__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5781
}();
cljs.core.TransientVector.prototype.apply = function(self__, args5780) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args5780.slice()))
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, null)
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, not_found)
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  if(self__.root.edit) {
    return cljs.core.array_for.call(null, coll, n)[n & 31]
  }else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  if(cljs.core.truth_(function() {
    var and__3941__auto__ = 0 <= n;
    if(and__3941__auto__) {
      return n < self__.cnt
    }else {
      return and__3941__auto__
    }
  }())) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, n)
  }else {
    return not_found
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  if(self__.root.edit) {
    return self__.cnt
  }else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  if(self__.root.edit) {
    if(cljs.core.truth_(function() {
      var and__3941__auto__ = 0 <= n;
      if(and__3941__auto__) {
        return n < self__.cnt
      }else {
        return and__3941__auto__
      }
    }())) {
      if(cljs.core.tail_off.call(null, tcoll) <= n) {
        self__.tail[n & 31] = val;
        return tcoll
      }else {
        var new_root = function go(level, node) {
          var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
          if(level === 0) {
            cljs.core.pv_aset.call(null, node__$1, n & 31, val);
            return node__$1
          }else {
            var subidx = n >>> level & 31;
            cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
            return node__$1
          }
        }.call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll
      }
    }else {
      if(n === self__.cnt) {
        return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val)
      }else {
        if("\ufdd0:else") {
          throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
        }else {
          return null
        }
      }
    }
  }else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  if(self__.root.edit) {
    if(self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    }else {
      if(1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll
      }else {
        if((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll
        }else {
          if("\ufdd0:else") {
            var new_tail = cljs.core.editable_array_for.call(null, tcoll, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll, self__.shift, self__.root);
              if(!(nr == null)) {
                return nr
              }else {
                return new cljs.core.VectorNode(self__.root.edit, cljs.core.make_array.call(null, 32))
              }
            }();
            if(cljs.core.truth_(function() {
              var and__3941__auto__ = 5 < self__.shift;
              if(and__3941__auto__) {
                return cljs.core.pv_aget.call(null, new_root, 1) == null
              }else {
                return and__3941__auto__
              }
            }())) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll
            }else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll
            }
          }else {
            return null
          }
        }
      }
    }
  }else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, key, val)
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  if(self__.root.edit) {
    if(self__.cnt - cljs.core.tail_off.call(null, tcoll) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll
    }else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = cljs.core.make_array.call(null, 32);
      new_tail[0] = o;
      self__.tail = new_tail;
      if(self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = cljs.core.make_array.call(null, 32);
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll
      }else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll
      }
    }
  }else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  if(self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll);
    var trimmed_tail = cljs.core.make_array.call(null, len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null)
  }else {
    throw new Error("persistent! called twice");
  }
};
goog.provide("cljs.core.PersistentQueueSeq");
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentQueueSeq")
};
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/PersistentQueueSeq")
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._first.call(null, self__.front)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
  if(temp__4090__auto__) {
    var f1 = temp__4090__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null)
  }else {
    if(self__.rear == null) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll)
    }else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null)
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
goog.provide("cljs.core.PersistentQueue");
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31858766
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentQueue")
};
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/PersistentQueue")
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  if(cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3943__auto__ = self__.rear;
      if(cljs.core.truth_(or__3943__auto__)) {
        return or__3943__auto__
      }else {
        return cljs.core.PersistentVector.EMPTY
      }
    }(), o), null)
  }else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null)
  }
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if(cljs.core.truth_(function() {
    var or__3943__auto__ = self__.front;
    if(cljs.core.truth_(or__3943__auto__)) {
      return or__3943__auto__
    }else {
      return rear__$1
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null)
  }else {
    return null
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.count
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._first.call(null, self__.front)
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  if(cljs.core.truth_(self__.front)) {
    var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
    if(temp__4090__auto__) {
      var f1 = temp__4090__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null)
    }else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null)
    }
  }else {
    return coll
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.first.call(null, self__.front)
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll))
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash)
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.PersistentQueue.EMPTY
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
goog.provide("cljs.core.NeverEquiv");
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/NeverEquiv")
};
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/NeverEquiv")
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  return false
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core._lookup.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv))
  }, x)) : null : null)
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while(true) {
    if(i < len) {
      if(k === array[i]) {
        return i
      }else {
        var G__5782 = i + incr;
        i = G__5782;
        continue
      }
    }else {
      return null
    }
    break
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if(a__$1 < b__$1) {
    return-1
  }else {
    if(a__$1 > b__$1) {
      return 1
    }else {
      if("\ufdd0:else") {
        return 0
      }else {
        return null
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while(true) {
    if(i < len) {
      var k__$1 = ks[i];
      var G__5783 = i + 1;
      var G__5784 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__5783;
      out = G__5784;
      continue
    }else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm)
    }
    break
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = {};
  var l = ks.length;
  var i_5786 = 0;
  while(true) {
    if(i_5786 < l) {
      var k_5787 = ks[i_5786];
      new_obj[k_5787] = obj[k_5787];
      var G__5788 = i_5786 + 1;
      i_5786 = G__5788;
      continue
    }else {
    }
    break
  }
  return new_obj
};
goog.provide("cljs.core.ObjMap");
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/ObjMap")
};
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/ObjMap")
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.hash_map.call(null), coll))
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_imap.call(null, coll);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, null)
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  if(cljs.core.truth_(function() {
    var and__3941__auto__ = goog.isString(k);
    if(and__3941__auto__) {
      return!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)
    }else {
      return and__3941__auto__
    }
  }())) {
    return self__.strobj[k]
  }else {
    return not_found
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  if(goog.isString(k)) {
    if(cljs.core.truth_(function() {
      var or__3943__auto__ = self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD
      }
    }())) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll, k, v)
    }else {
      if(!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null)
      }else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = self__.keys.slice();
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null)
      }
    }
  }else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll, k, v)
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  if(cljs.core.truth_(function() {
    var and__3941__auto__ = goog.isString(k);
    if(and__3941__auto__) {
      return!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)
    }else {
      return and__3941__auto__
    }
  }())) {
    return true
  }else {
    return false
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__5790 = null;
  var G__5790__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__5790__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__5790 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5790__2.call(this, self__, k);
      case 3:
        return G__5790__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5790
}();
cljs.core.ObjMap.prototype.apply = function(self__, args5789) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args5789.slice()))
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while(true) {
    if(cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2)
      }else {
        var G__5791 = cljs.core.rest.call(null, keys__$1);
        var G__5792 = init__$2;
        keys__$1 = G__5791;
        init__$1 = G__5792;
        continue
      }
    }else {
      return init__$1
    }
    break
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll, entry)
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.keys.length > 0) {
    return cljs.core.map.call(null, function(p1__5785_SHARP_) {
      return cljs.core.vector.call(null, p1__5785_SHARP_, self__.strobj[p1__5785_SHARP_])
    }, self__.keys.sort(cljs.core.obj_map_compare_keys))
  }else {
    return null
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.keys.length
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_map.call(null, coll, other)
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash)
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta)
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  if(cljs.core.truth_(function() {
    var and__3941__auto__ = goog.isString(k);
    if(and__3941__auto__) {
      return!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)
    }else {
      return and__3941__auto__
    }
  }())) {
    var new_keys = self__.keys.slice();
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    cljs.core.js_delete.call(null, new_strobj, k);
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null)
  }else {
    return coll
  }
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], {}, 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 32;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null)
};
goog.provide("cljs.core.HashMap");
cljs.core.HashMap = function(meta, count, hashobj, __hash) {
  this.meta = meta;
  this.count = count;
  this.hashobj = hashobj;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 15075087
};
cljs.core.HashMap.cljs$lang$type = true;
cljs.core.HashMap.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/HashMap")
};
cljs.core.HashMap.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/HashMap")
};
cljs.core.HashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_imap.call(null, coll);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
cljs.core.HashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, null)
};
cljs.core.HashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var bucket = self__.hashobj[cljs.core.hash.call(null, k)];
  var i = cljs.core.truth_(bucket) ? cljs.core.scan_array.call(null, 2, k, bucket) : null;
  if(cljs.core.truth_(i)) {
    return bucket[i + 1]
  }else {
    return not_found
  }
};
cljs.core.HashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var h = cljs.core.hash.call(null, k);
  var bucket = self__.hashobj[h];
  if(cljs.core.truth_(bucket)) {
    var new_bucket = bucket.slice();
    var new_hashobj = goog.object.clone(self__.hashobj);
    new_hashobj[h] = new_bucket;
    var temp__4090__auto__ = cljs.core.scan_array.call(null, 2, k, new_bucket);
    if(cljs.core.truth_(temp__4090__auto__)) {
      var i = temp__4090__auto__;
      new_bucket[i + 1] = v;
      return new cljs.core.HashMap(self__.meta, self__.count, new_hashobj, null)
    }else {
      new_bucket.push(k, v);
      return new cljs.core.HashMap(self__.meta, self__.count + 1, new_hashobj, null)
    }
  }else {
    var new_hashobj = goog.object.clone(self__.hashobj);
    new_hashobj[h] = [k, v];
    return new cljs.core.HashMap(self__.meta, self__.count + 1, new_hashobj, null)
  }
};
cljs.core.HashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var bucket = self__.hashobj[cljs.core.hash.call(null, k)];
  var i = cljs.core.truth_(bucket) ? cljs.core.scan_array.call(null, 2, k, bucket) : null;
  if(cljs.core.truth_(i)) {
    return true
  }else {
    return false
  }
};
cljs.core.HashMap.prototype.call = function() {
  var G__5795 = null;
  var G__5795__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__5795__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__5795 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5795__2.call(this, self__, k);
      case 3:
        return G__5795__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5795
}();
cljs.core.HashMap.prototype.apply = function(self__, args5794) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args5794.slice()))
};
cljs.core.HashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll, entry)
  }
};
cljs.core.HashMap.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.HashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.count > 0) {
    var hashes = cljs.core.js_keys.call(null, self__.hashobj).sort();
    return cljs.core.mapcat.call(null, function(p1__5793_SHARP_) {
      return cljs.core.map.call(null, cljs.core.vec, cljs.core.partition.call(null, 2, self__.hashobj[p1__5793_SHARP_]))
    }, hashes)
  }else {
    return null
  }
};
cljs.core.HashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.count
};
cljs.core.HashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_map.call(null, coll, other)
};
cljs.core.HashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.HashMap(meta__$1, self__.count, self__.hashobj, self__.__hash)
};
cljs.core.HashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.HashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.HashMap.EMPTY, self__.meta)
};
cljs.core.HashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var h = cljs.core.hash.call(null, k);
  var bucket = self__.hashobj[h];
  var i = cljs.core.truth_(bucket) ? cljs.core.scan_array.call(null, 2, k, bucket) : null;
  if(cljs.core.not.call(null, i)) {
    return coll
  }else {
    var new_hashobj = goog.object.clone(self__.hashobj);
    if(3 > bucket.length) {
      cljs.core.js_delete.call(null, new_hashobj, h)
    }else {
      var new_bucket_5796 = bucket.slice();
      new_bucket_5796.splice(i, 2);
      new_hashobj[h] = new_bucket_5796
    }
    return new cljs.core.HashMap(self__.meta, self__.count - 1, new_hashobj, null)
  }
};
cljs.core.HashMap.EMPTY = new cljs.core.HashMap(null, 0, {}, 0);
cljs.core.HashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.HashMap.EMPTY;
  while(true) {
    if(i < len) {
      var G__5797 = i + 1;
      var G__5798 = cljs.core.assoc.call(null, out, ks[i], vs[i]);
      i = G__5797;
      out = G__5798;
      continue
    }else {
      return out
    }
    break
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  var len = arr.length;
  var i = 0;
  while(true) {
    if(len <= i) {
      return-1
    }else {
      if(cljs.core._EQ_.call(null, arr[i], k)) {
        return i
      }else {
        if("\ufdd0:else") {
          var G__5799 = i + 2;
          i = G__5799;
          continue
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.TransientArrayMap = undefined;
goog.provide("cljs.core.PersistentArrayMap");
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentArrayMap")
};
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/PersistentArrayMap")
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  return new cljs.core.TransientArrayMap({}, self__.arr.length, self__.arr.slice())
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_imap.call(null, coll);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, null)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var idx = cljs.core.array_map_index_of.call(null, coll, k);
  if(idx === -1) {
    return not_found
  }else {
    return self__.arr[idx + 1]
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var idx = cljs.core.array_map_index_of.call(null, coll, k);
  if(idx === -1) {
    if(self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, function() {
        var G__5801 = self__.arr.slice();
        G__5801.push(k);
        G__5801.push(v);
        return G__5801
      }(), null)
    }else {
      return cljs.core.with_meta.call(null, cljs.core.assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll), k, v), self__.meta)
    }
  }else {
    if(v === self__.arr[idx + 1]) {
      return coll
    }else {
      if("\ufdd0:else") {
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, function() {
          var G__5802 = self__.arr.slice();
          G__5802[idx + 1] = v;
          return G__5802
        }(), null)
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  return!(cljs.core.array_map_index_of.call(null, coll, k) === -1)
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__5803 = null;
  var G__5803__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__5803__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__5803 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5803__2.call(this, self__, k);
      case 3:
        return G__5803__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5803
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args5800) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args5800.slice()))
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while(true) {
    if(i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2)
      }else {
        var G__5804 = i + 2;
        var G__5805 = init__$2;
        i = G__5804;
        init__$1 = G__5805;
        continue
      }
    }else {
      return init__$1
    }
    break
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll, entry)
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt > 0) {
    var len = self__.arr.length;
    var array_map_seq = function(len) {
      return function array_map_seq(i) {
        return new cljs.core.LazySeq(null, false, function(len) {
          return function() {
            if(i < len) {
              return cljs.core.cons.call(null, cljs.core.PersistentVector.fromArray([self__.arr[i], self__.arr[i + 1]], true), array_map_seq.call(null, i + 2))
            }else {
              return null
            }
          }
        }(len), null)
      }
    }(len);
    return array_map_seq.call(null, 0)
  }else {
    return null
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.cnt
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_map.call(null, coll, other)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var idx = cljs.core.array_map_index_of.call(null, coll, k);
  if(idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if(new_len === 0) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll)
    }else {
      var new_arr = cljs.core.make_array.call(null, new_len);
      var s = 0;
      var d = 0;
      while(true) {
        if(s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null)
        }else {
          if(cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__5806 = s + 2;
            var G__5807 = d;
            s = G__5806;
            d = G__5807;
            continue
          }else {
            if("\ufdd0:else") {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__5808 = s + 2;
              var G__5809 = d + 2;
              s = G__5808;
              d = G__5809;
              continue
            }else {
              return null
            }
          }
        }
        break
      }
    }
  }else {
    return coll
  }
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 16;
cljs.core.PersistentArrayMap.fromArrays = function(ks, vs) {
  var len = cljs.core.count.call(null, ks);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  while(true) {
    if(i < len) {
      var G__5810 = i + 1;
      var G__5811 = cljs.core.assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__5810;
      out = G__5811;
      continue
    }else {
      return cljs.core.persistent_BANG_.call(null, out)
    }
    break
  }
};
cljs.core.array__GT_transient_hash_map = undefined;
goog.provide("cljs.core.TransientArrayMap");
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/TransientArrayMap")
};
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/TransientArrayMap")
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll, key);
    if(idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__5812_5814 = self__.arr;
      G__5812_5814.pop();
      G__5812_5814.pop();
      self__.len = self__.len - 2
    }else {
    }
    return tcoll
  }else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll, key);
    if(idx === -1) {
      if(self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll
      }else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val)
      }
    }else {
      if(val === self__.arr[idx + 1]) {
        return tcoll
      }else {
        self__.arr[idx + 1] = val;
        return tcoll
      }
    }
  }else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    if(cljs.core.truth_(function() {
      var G__5813 = o;
      if(G__5813) {
        if(cljs.core.truth_(function() {
          var or__3943__auto__ = G__5813.cljs$lang$protocol_mask$partition0$ & 2048;
          if(or__3943__auto__) {
            return or__3943__auto__
          }else {
            return G__5813.cljs$core$IMapEntry$
          }
        }())) {
          return true
        }else {
          if(!G__5813.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.IMapEntry, G__5813)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.IMapEntry, G__5813)
      }
    }())) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, cljs.core.key.call(null, o), cljs.core.val.call(null, o))
    }else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while(true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if(cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__5815 = cljs.core.next.call(null, es);
          var G__5816 = tcoll__$1.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll__$1, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__5815;
          tcoll__$1 = G__5816;
          continue
        }else {
          return tcoll__$1
        }
        break
      }
    }
  }else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null)
  }else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  return tcoll.cljs$core$ILookup$_lookup$arity$3(tcoll, k, null)
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll, k);
    if(idx === -1) {
      return not_found
    }else {
      return self__.arr[idx + 1]
    }
  }else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2)
  }else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap = undefined;
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.ObjMap.EMPTY);
  var i = 0;
  while(true) {
    if(i < len) {
      var G__5817 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__5818 = i + 2;
      out = G__5817;
      i = G__5818;
      continue
    }else {
      return out
    }
    break
  }
};
goog.provide("cljs.core.Box");
cljs.core.Box = function(val) {
  this.val = val
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorPrSeq = function(this__4033__auto__) {
  return cljs.core.list.call(null, "cljs.core/Box")
};
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4033__auto__, writer__4034__auto__, opts__4035__auto__) {
  return cljs.core._write.call(null, writer__4034__auto__, "cljs.core/Box")
};
cljs.core.create_inode_seq = undefined;
cljs.core.create_array_node_seq = undefined;
cljs.core.reset_BANG_ = undefined;
cljs.core.create_node = undefined;
cljs.core.atom = undefined;
cljs.core.deref = undefined;
cljs.core.key_test = function key_test(key, other) {
  if(goog.isString(key)) {
    return key === other
  }else {
    return cljs.core._EQ_.call(null, key, other)
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__5821 = arr.slice();
    G__5821[i] = a;
    return G__5821
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__5822 = arr.slice();
    G__5822[i] = a;
    G__5822[j] = b;
    return G__5822
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$lang$arity$3 = clone_and_set__3;
  clone_and_set.cljs$lang$arity$5 = clone_and_set__5;
  return clone_and_set
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = cljs.core.make_array.call(null, arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1)
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31)
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$lang$arity$4 = edit_and_set__4;
  edit_and_set.cljs$lang$arity$6 = edit_and_set__6;
  return edit_and_set
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while(true) {
    if(i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if(!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1])
        }else {
          var node = arr[i + 1];
          if(!(node == null)) {
            return node.kv_reduce(f, init__$1)
          }else {
            return init__$1
          }
        }
      }();
      if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2)
      }else {
        var G__5823 = i + 2;
        var G__5824 = init__$2;
        i = G__5823;
        init__$1 = G__5824;
        continue
      }
    }else {
      return init__$1
    }
    break
  }
};
cljs.core.ArrayNode = undefined;
goog.provide("cljs.core.BitmapIndexedNode");
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/BitmapIndexedNode")
};
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/BitmapIndexedNode")
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if(self__.bitmap === bit) {
    return null
  }else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if(2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable
    }else {
      if(n >= 16) {
        var nodes = cljs.core.make_array.call(null, 32);
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_5825 = 0;
        var j_5826 = 0;
        while(true) {
          if(i_5825 < 32) {
            if((self__.bitmap >>> i_5825 & 1) === 0) {
              var G__5827 = i_5825 + 1;
              var G__5828 = j_5826;
              i_5825 = G__5827;
              j_5826 = G__5828;
              continue
            }else {
              nodes[i_5825] = !(self__.arr[j_5826] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_5826]), self__.arr[j_5826], self__.arr[j_5826 + 1], added_leaf_QMARK_) : self__.arr[j_5826 + 1];
              var G__5829 = i_5825 + 1;
              var G__5830 = j_5826 + 2;
              i_5825 = G__5829;
              j_5826 = G__5830;
              continue
            }
          }else {
          }
          break
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes)
      }else {
        if("\ufdd0:else") {
          var new_arr = cljs.core.make_array.call(null, 2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable
        }else {
          return null
        }
      }
    }
  }else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if(n === val_or_node) {
        return inode
      }else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n)
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        if(val === val_or_node) {
          return inode
        }else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val)
        }
      }else {
        if("\ufdd0:else") {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val))
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr)
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return inode
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if(n === val_or_node) {
        return inode
      }else {
        if(!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n)
        }else {
          if(self__.bitmap === bit) {
            return null
          }else {
            if("\ufdd0:else") {
              return inode.edit_and_remove_pair(edit__$1, bit, idx)
            }else {
              return null
            }
          }
        }
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx)
      }else {
        if("\ufdd0:else") {
          return inode
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    return inode
  }else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = cljs.core.make_array.call(null, n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr)
  }
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init)
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return not_found
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found)
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        return cljs.core.PersistentVector.fromArray([key_or_nil, val_or_node], true)
      }else {
        if("\ufdd0:else") {
          return not_found
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return inode
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if(n === val_or_node) {
        return inode
      }else {
        if(!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n))
        }else {
          if(self__.bitmap === bit) {
            return null
          }else {
            if("\ufdd0:else") {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx))
            }else {
              return null
            }
          }
        }
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx))
      }else {
        if("\ufdd0:else") {
          return inode
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if(n >= 16) {
      var nodes = cljs.core.make_array.call(null, 32);
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_5831 = 0;
      var j_5832 = 0;
      while(true) {
        if(i_5831 < 32) {
          if((self__.bitmap >>> i_5831 & 1) === 0) {
            var G__5833 = i_5831 + 1;
            var G__5834 = j_5832;
            i_5831 = G__5833;
            j_5832 = G__5834;
            continue
          }else {
            nodes[i_5831] = !(self__.arr[j_5832] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_5832]), self__.arr[j_5832], self__.arr[j_5832 + 1], added_leaf_QMARK_) : self__.arr[j_5832 + 1];
            var G__5835 = i_5831 + 1;
            var G__5836 = j_5832 + 2;
            i_5831 = G__5835;
            j_5832 = G__5836;
            continue
          }
        }else {
        }
        break
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes)
    }else {
      var new_arr = cljs.core.make_array.call(null, 2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr)
    }
  }else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if(n === val_or_node) {
        return inode
      }else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n))
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        if(val === val_or_node) {
          return inode
        }else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val))
        }
      }else {
        if("\ufdd0:else") {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)))
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return not_found
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found)
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node
      }else {
        if("\ufdd0:else") {
          return not_found
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, cljs.core.make_array.call(null, 0));
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = cljs.core.make_array.call(null, len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while(true) {
    if(i < len) {
      if(cljs.core.truth_(function() {
        var and__3941__auto__ = !(i === idx);
        if(and__3941__auto__) {
          return!(arr[i] == null)
        }else {
          return and__3941__auto__
        }
      }())) {
        new_arr[j] = arr[i];
        var G__5837 = i + 1;
        var G__5838 = j + 2;
        var G__5839 = bitmap | 1 << i;
        i = G__5837;
        j = G__5838;
        bitmap = G__5839;
        continue
      }else {
        var G__5840 = i + 1;
        var G__5841 = j;
        var G__5842 = bitmap;
        i = G__5840;
        j = G__5841;
        bitmap = G__5842;
        continue
      }
    }else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr)
    }
    break
  }
};
goog.provide("cljs.core.ArrayNode");
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/ArrayNode")
};
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/ArrayNode")
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable
  }else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if(n === node) {
      return inode
    }else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n)
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr)
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(node == null) {
    return inode
  }else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if(n === node) {
      return inode
    }else {
      if(n == null) {
        if(self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx)
        }else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable
        }
      }else {
        if("\ufdd0:else") {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n)
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    return inode
  }else {
    return new cljs.core.ArrayNode(e, self__.cnt, self__.arr.slice())
  }
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while(true) {
    if(i < len) {
      var node = self__.arr[i];
      if(!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2)
        }else {
          var G__5843 = i + 1;
          var G__5844 = init__$2;
          i = G__5843;
          init__$1 = G__5844;
          continue
        }
      }else {
        return null
      }
    }else {
      return init__$1
    }
    break
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found)
  }else {
    return not_found
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if(n === node) {
      return inode
    }else {
      if(n == null) {
        if(self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx)
        }else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n))
        }
      }else {
        if("\ufdd0:else") {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n))
        }else {
          return null
        }
      }
    }
  }else {
    return inode
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)))
  }else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if(n === node) {
      return inode
    }else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n))
    }
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found)
  }else {
    return not_found
  }
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while(true) {
    if(i < lim) {
      if(cljs.core.key_test.call(null, key, arr[i])) {
        return i
      }else {
        var G__5845 = i + 2;
        i = G__5845;
        continue
      }
    }else {
      return-1
    }
    break
  }
};
goog.provide("cljs.core.HashCollisionNode");
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/HashCollisionNode")
};
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/HashCollisionNode")
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if(hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if(idx === -1) {
      if(self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable
      }else {
        var len = self__.arr.length;
        var new_arr = cljs.core.make_array.call(null, len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr)
      }
    }else {
      if(self__.arr[idx + 1] === val) {
        return inode
      }else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val)
      }
    }
  }else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_)
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr)
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx === -1) {
    return inode
  }else {
    removed_leaf_QMARK_[0] = true;
    if(self__.cnt === 1) {
      return null
    }else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    return inode
  }else {
    var new_arr = cljs.core.make_array.call(null, 2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr)
  }
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init)
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx < 0) {
    return not_found
  }else {
    if(cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return cljs.core.PersistentVector.fromArray([self__.arr[idx], self__.arr[idx + 1]], true)
    }else {
      if("\ufdd0:else") {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx === -1) {
    return inode
  }else {
    if(self__.cnt === 1) {
      return null
    }else {
      if("\ufdd0:else") {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)))
      }else {
        return null
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if(hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if(idx === -1) {
      var len = self__.arr.length;
      var new_arr = cljs.core.make_array.call(null, len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr)
    }else {
      if(cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode
      }else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val))
      }
    }
  }else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_)
  }
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx < 0) {
    return not_found
  }else {
    if(cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1]
    }else {
      if("\ufdd0:else") {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode
  }else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array)
  }
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if(key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2])
    }else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_)
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if(key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2])
    }else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_)
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$lang$arity$6 = create_node__6;
  create_node.cljs$lang$arity$7 = create_node__7;
  return create_node
}();
goog.provide("cljs.core.NodeSeq");
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/NodeSeq")
};
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/NodeSeq")
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  return this$
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  if(self__.s == null) {
    return cljs.core.PersistentVector.fromArray([self__.nodes[self__.i], self__.nodes[self__.i + 1]], true)
  }else {
    return cljs.core.first.call(null, self__.s)
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  if(self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null)
  }else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s))
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash)
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null)
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if(s == null) {
      var len = nodes.length;
      var j = i;
      while(true) {
        if(j < len) {
          if(!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null)
          }else {
            var temp__4090__auto__ = nodes[j + 1];
            if(cljs.core.truth_(temp__4090__auto__)) {
              var node = temp__4090__auto__;
              var temp__4090__auto____$1 = node.inode_seq();
              if(cljs.core.truth_(temp__4090__auto____$1)) {
                var node_seq = temp__4090__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null)
              }else {
                var G__5846 = j + 2;
                j = G__5846;
                continue
              }
            }else {
              var G__5847 = j + 2;
              j = G__5847;
              continue
            }
          }
        }else {
          return null
        }
        break
      }
    }else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null)
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$lang$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$lang$arity$3 = create_inode_seq__3;
  return create_inode_seq
}();
goog.provide("cljs.core.ArrayNodeSeq");
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/ArrayNodeSeq")
};
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/ArrayNodeSeq")
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  return this$
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.first.call(null, self__.s)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s))
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null)
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if(s == null) {
      var len = nodes.length;
      var j = i;
      while(true) {
        if(j < len) {
          var temp__4090__auto__ = nodes[j];
          if(cljs.core.truth_(temp__4090__auto__)) {
            var nj = temp__4090__auto__;
            var temp__4090__auto____$1 = nj.inode_seq();
            if(cljs.core.truth_(temp__4090__auto____$1)) {
              var ns = temp__4090__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null)
            }else {
              var G__5848 = j + 1;
              j = G__5848;
              continue
            }
          }else {
            var G__5849 = j + 1;
            j = G__5849;
            continue
          }
        }else {
          return null
        }
        break
      }
    }else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null)
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$lang$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$lang$arity$4 = create_array_node_seq__4;
  return create_array_node_seq
}();
cljs.core.TransientHashMap = undefined;
goog.provide("cljs.core.PersistentHashMap");
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentHashMap")
};
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/PersistentHashMap")
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  return new cljs.core.TransientHashMap({}, self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_imap.call(null, coll);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, null)
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return self__.nil_val
    }else {
      return not_found
    }
  }else {
    if(self__.root == null) {
      return not_found
    }else {
      if("\ufdd0:else") {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found)
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  if(k == null) {
    if(cljs.core.truth_(function() {
      var and__3941__auto__ = self__.has_nil_QMARK_;
      if(and__3941__auto__) {
        return v === self__.nil_val
      }else {
        return and__3941__auto__
      }
    }())) {
      return coll
    }else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null)
    }
  }else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if(new_root === self__.root) {
      return coll
    }else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null)
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  if(k == null) {
    return self__.has_nil_QMARK_
  }else {
    if(self__.root == null) {
      return false
    }else {
      if("\ufdd0:else") {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel)
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__5851 = null;
  var G__5851__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__5851__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__5851 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5851__2.call(this, self__, k);
      case 3:
        return G__5851__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5851
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args5850) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args5850.slice()))
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if(cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1)
  }else {
    if(!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1)
    }else {
      if("\ufdd0:else") {
        return init__$1
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll, entry)
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if(self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, cljs.core.PersistentVector.fromArray([null, self__.nil_val], true), s)
    }else {
      return s
    }
  }else {
    return null
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.cnt
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_map.call(null, coll, other)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null)
    }else {
      return coll
    }
  }else {
    if(self__.root == null) {
      return coll
    }else {
      if("\ufdd0:else") {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if(new_root === self__.root) {
          return coll
        }else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null)
        }
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while(true) {
    if(i < len) {
      var G__5852 = i + 1;
      var G__5853 = cljs.core.assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__5852;
      out = G__5853;
      continue
    }else {
      return cljs.core.persistent_BANG_.call(null, out)
    }
    break
  }
};
goog.provide("cljs.core.TransientHashMap");
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/TransientHashMap")
};
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/TransientHashMap")
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  return tcoll.without_BANG_(key)
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  return tcoll.assoc_BANG_(key, val)
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  return tcoll.conj_BANG_(val)
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  return tcoll.persistent_BANG_()
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return self__.nil_val
    }else {
      return null
    }
  }else {
    if(self__.root == null) {
      return null
    }else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k)
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return self__.nil_val
    }else {
      return not_found
    }
  }else {
    if(self__.root == null) {
      return not_found
    }else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found)
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  if(self__.edit) {
    return self__.count
  }else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    if(cljs.core.truth_(function() {
      var G__5854 = o;
      if(G__5854) {
        if(cljs.core.truth_(function() {
          var or__3943__auto__ = G__5854.cljs$lang$protocol_mask$partition0$ & 2048;
          if(or__3943__auto__) {
            return or__3943__auto__
          }else {
            return G__5854.cljs$core$IMapEntry$
          }
        }())) {
          return true
        }else {
          if(!G__5854.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.IMapEntry, G__5854)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.IMapEntry, G__5854)
      }
    }())) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o))
    }else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while(true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if(cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__5855 = cljs.core.next.call(null, es);
          var G__5856 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__5855;
          tcoll__$1 = G__5856;
          continue
        }else {
          return tcoll__$1
        }
        break
      }
    }
  }else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    if(k == null) {
      if(self__.nil_val === v) {
      }else {
        self__.nil_val = v
      }
      if(self__.has_nil_QMARK_) {
      }else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true
      }
      return tcoll
    }else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if(node === self__.root) {
      }else {
        self__.root = node
      }
      if(added_leaf_QMARK_.val) {
        self__.count = self__.count + 1
      }else {
      }
      return tcoll
    }
  }else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    if(k == null) {
      if(self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll
      }else {
        return tcoll
      }
    }else {
      if(self__.root == null) {
        return tcoll
      }else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if(node === self__.root) {
        }else {
          self__.root = node
        }
        if(cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1
        }else {
        }
        return tcoll
      }
    }
  }else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null)
  }else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while(true) {
    if(!(t == null)) {
      var G__5857 = ascending_QMARK_ ? t.left : t.right;
      var G__5858 = cljs.core.conj.call(null, stack__$1, t);
      t = G__5857;
      stack__$1 = G__5858;
      continue
    }else {
      return stack__$1
    }
    break
  }
};
goog.provide("cljs.core.PersistentTreeMapSeq");
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850574
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentTreeMapSeq")
};
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/PersistentTreeMapSeq")
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  return this$
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll)) + 1
  }else {
    return self__.cnt
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  return cljs.core.peek.call(null, self__.stack)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if(!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null)
};
cljs.core.RedNode = undefined;
cljs.core.BlackNode = undefined;
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, ins)) {
    if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, ins.left)) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null)
    }else {
      if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, ins.right)) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null)
      }else {
        if("\ufdd0:else") {
          return new cljs.core.BlackNode(key, val, ins, right, null)
        }else {
          return null
        }
      }
    }
  }else {
    return new cljs.core.BlackNode(key, val, ins, right, null)
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, ins)) {
    if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, ins.right)) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null)
    }else {
      if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, ins.left)) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null)
      }else {
        if("\ufdd0:else") {
          return new cljs.core.BlackNode(key, val, left, ins, null)
        }else {
          return null
        }
      }
    }
  }else {
    return new cljs.core.BlackNode(key, val, left, ins, null)
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, del)) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null)
  }else {
    if(cljs.core.instance_QMARK_.call(null, cljs.core.BlackNode, right)) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden())
    }else {
      if(cljs.core.truth_(function() {
        var and__3941__auto__ = cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, right);
        if(and__3941__auto__) {
          return cljs.core.instance_QMARK_.call(null, cljs.core.BlackNode, right.left)
        }else {
          return and__3941__auto__
        }
      }())) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null)
      }else {
        if("\ufdd0:else") {
          throw new Error("red-black tree invariant violation");
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, del)) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null)
  }else {
    if(cljs.core.instance_QMARK_.call(null, cljs.core.BlackNode, left)) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del)
    }else {
      if(cljs.core.truth_(function() {
        var and__3941__auto__ = cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, left);
        if(and__3941__auto__) {
          return cljs.core.instance_QMARK_.call(null, cljs.core.BlackNode, left.right)
        }else {
          return and__3941__auto__
        }
      }())) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null)
      }else {
        if("\ufdd0:else") {
          throw new Error("red-black tree invariant violation");
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if(cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1)
  }else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2)
    }else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if(cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3)
      }else {
        return init__$3
      }
    }
  }
};
goog.provide("cljs.core.BlackNode");
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/BlackNode")
};
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/BlackNode")
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  return node.cljs$core$IIndexed$_nth$arity$3(node, k, null)
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  return node.cljs$core$IIndexed$_nth$arity$3(node, k, not_found)
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  return cljs.core.assoc.call(null, cljs.core.PersistentVector.fromArray([self__.key, self__.val], true), k, v)
};
cljs.core.BlackNode.prototype.call = function() {
  var G__5860 = null;
  var G__5860__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(node, k)
  };
  var G__5860__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(node, k, not_found)
  };
  G__5860 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5860__2.call(this, self__, k);
      case 3:
        return G__5860__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5860
}();
cljs.core.BlackNode.prototype.apply = function(self__, args5859) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args5859.slice()))
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  return cljs.core.PersistentVector.fromArray([self__.key, self__.val, o], true)
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  return self__.key
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  return self__.val
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node)
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null)
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del)
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null)
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init)
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right)
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node)
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null)
};
cljs.core.BlackNode.prototype.toString = function() {
  var G__5861 = null;
  var G__5861__0 = function() {
    var self__ = this;
    var this$ = this;
    return cljs.core.pr_str.call(null, this$)
  };
  G__5861 = function() {
    switch(arguments.length) {
      case 0:
        return G__5861__0.call(this)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5861
}();
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null)
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, node, f)
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, node, f, start)
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  return cljs.core.list.call(null, self__.key, self__.val)
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  return 2
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  return self__.val
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  return cljs.core.PersistentVector.fromArray([self__.key], true)
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  return cljs.core._assoc_n.call(null, cljs.core.PersistentVector.fromArray([self__.key, self__.val], true), n, v)
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.fromArray([self__.key, self__.val], true), meta)
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  return null
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if("\ufdd0:else") {
        return null
      }else {
        return null
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if("\ufdd0:else") {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  return cljs.core.PersistentVector.EMPTY
};
goog.provide("cljs.core.RedNode");
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/RedNode")
};
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/RedNode")
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  return node.cljs$core$IIndexed$_nth$arity$3(node, k, null)
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  return node.cljs$core$IIndexed$_nth$arity$3(node, k, not_found)
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  return cljs.core.assoc.call(null, cljs.core.PersistentVector.fromArray([self__.key, self__.val], true), k, v)
};
cljs.core.RedNode.prototype.call = function() {
  var G__5863 = null;
  var G__5863__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(node, k)
  };
  var G__5863__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(node, k, not_found)
  };
  G__5863 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5863__2.call(this, self__, k);
      case 3:
        return G__5863__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5863
}();
cljs.core.RedNode.prototype.apply = function(self__, args5862) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args5862.slice()))
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  return cljs.core.PersistentVector.fromArray([self__.key, self__.val, o], true)
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  return self__.key
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  return self__.val
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null)
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null)
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null)
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init)
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null)
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null)
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, self__.left)) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null)
  }else {
    if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, self__.right)) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null)
    }else {
      if("\ufdd0:else") {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null)
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.toString = function() {
  var G__5864 = null;
  var G__5864__0 = function() {
    var self__ = this;
    var this$ = this;
    return cljs.core.pr_str.call(null, this$)
  };
  G__5864 = function() {
    switch(arguments.length) {
      case 0:
        return G__5864__0.call(this)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5864
}();
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, self__.right)) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null)
  }else {
    if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, self__.left)) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null)
    }else {
      if("\ufdd0:else") {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null)
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null)
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, node, f)
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, node, f, start)
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  return cljs.core.list.call(null, self__.key, self__.val)
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  return 2
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  return self__.val
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  return cljs.core.PersistentVector.fromArray([self__.key], true)
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  return cljs.core._assoc_n.call(null, cljs.core.PersistentVector.fromArray([self__.key, self__.val], true), n, v)
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.fromArray([self__.key, self__.val], true), meta)
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  return null
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if("\ufdd0:else") {
        return null
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if("\ufdd0:else") {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  return cljs.core.PersistentVector.EMPTY
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if(tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null)
  }else {
    var c = comp.call(null, k, tree.key);
    if(c === 0) {
      found[0] = tree;
      return null
    }else {
      if(c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if(!(ins == null)) {
          return tree.add_left(ins)
        }else {
          return null
        }
      }else {
        if("\ufdd0:else") {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if(!(ins == null)) {
            return tree.add_right(ins)
          }else {
            return null
          }
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if(left == null) {
    return right
  }else {
    if(right == null) {
      return left
    }else {
      if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, left)) {
        if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, right)) {
          var app = tree_map_append.call(null, left.right, right.left);
          if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, app)) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null)
          }else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null)
          }
        }else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null)
        }
      }else {
        if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, right)) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null)
        }else {
          if("\ufdd0:else") {
            var app = tree_map_append.call(null, left.right, right.left);
            if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, app)) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null)
            }else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null))
            }
          }else {
            return null
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if(!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if(c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right)
    }else {
      if(c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if(cljs.core.truth_(function() {
          var or__3943__auto__ = !(del == null);
          if(or__3943__auto__) {
            return or__3943__auto__
          }else {
            return!(found[0] == null)
          }
        }())) {
          if(cljs.core.instance_QMARK_.call(null, cljs.core.BlackNode, tree.left)) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right)
          }else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null)
          }
        }else {
          return null
        }
      }else {
        if("\ufdd0:else") {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if(cljs.core.truth_(function() {
            var or__3943__auto__ = !(del == null);
            if(or__3943__auto__) {
              return or__3943__auto__
            }else {
              return!(found[0] == null)
            }
          }())) {
            if(cljs.core.instance_QMARK_.call(null, cljs.core.BlackNode, tree.right)) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del)
            }else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null)
            }
          }else {
            return null
          }
        }else {
          return null
        }
      }
    }
  }else {
    return null
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if(c === 0) {
    return tree.replace(tk, v, tree.left, tree.right)
  }else {
    if(c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right)
    }else {
      if("\ufdd0:else") {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v))
      }else {
        return null
      }
    }
  }
};
cljs.core.key = undefined;
goog.provide("cljs.core.PersistentTreeMap");
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 418776847
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentTreeMap")
};
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/PersistentTreeMap")
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_imap.call(null, coll);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, null)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var n = coll.entry_at(k);
  if(!(n == null)) {
    return n.val
  }else {
    return not_found
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if(t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if(cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll
    }else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null)
    }
  }else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null)
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  return!(coll.entry_at(k) == null)
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__5866 = null;
  var G__5866__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__5866__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__5866 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5866__2.call(this, self__, k);
      case 3:
        return G__5866__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5866
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args5865) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args5865.slice()))
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  if(!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init)
  }else {
    return init
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll, entry)
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt)
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while(true) {
    if(!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if(c === 0) {
        return t
      }else {
        if(c < 0) {
          var G__5867 = t.left;
          t = G__5867;
          continue
        }else {
          if("\ufdd0:else") {
            var G__5868 = t.right;
            t = G__5868;
            continue
          }else {
            return null
          }
        }
      }
    }else {
      return null
    }
    break
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  if(self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt)
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  if(self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while(true) {
      if(!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if(c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null)
        }else {
          if(cljs.core.truth_(ascending_QMARK_)) {
            if(c < 0) {
              var G__5869 = cljs.core.conj.call(null, stack, t);
              var G__5870 = t.left;
              stack = G__5869;
              t = G__5870;
              continue
            }else {
              var G__5871 = stack;
              var G__5872 = t.right;
              stack = G__5871;
              t = G__5872;
              continue
            }
          }else {
            if("\ufdd0:else") {
              if(c > 0) {
                var G__5873 = cljs.core.conj.call(null, stack, t);
                var G__5874 = t.right;
                stack = G__5873;
                t = G__5874;
                continue
              }else {
                var G__5875 = stack;
                var G__5876 = t.left;
                stack = G__5875;
                t = G__5876;
                continue
              }
            }else {
              return null
            }
          }
        }
      }else {
        if(stack == null) {
          return null
        }else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null)
        }
      }
      break
    }
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  return cljs.core.key.call(null, entry)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  return self__.comp
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt)
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.cnt
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_map.call(null, coll, other)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if(t == null) {
    if(cljs.core.nth.call(null, found, 0) == null) {
      return coll
    }else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null)
    }
  }else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null)
  }
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while(true) {
      if(in$) {
        var G__5877 = cljs.core.nnext.call(null, in$);
        var G__5878 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__5877;
        out = G__5878;
        continue
      }else {
        return cljs.core.persistent_BANG_.call(null, out)
      }
      break
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if(goog.isDef(var_args)) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return hash_map__delegate.call(this, keyvals)
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__5879) {
    var keyvals = cljs.core.seq(arglist__5879);
    return hash_map__delegate(keyvals)
  };
  hash_map.cljs$lang$arity$variadic = hash_map__delegate;
  return hash_map
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null)
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if(goog.isDef(var_args)) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return array_map__delegate.call(this, keyvals)
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__5880) {
    var keyvals = cljs.core.seq(arglist__5880);
    return array_map__delegate(keyvals)
  };
  array_map.cljs$lang$arity$variadic = array_map__delegate;
  return array_map
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = {};
    var kvs = cljs.core.seq.call(null, keyvals);
    while(true) {
      if(kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__5881 = cljs.core.nnext.call(null, kvs);
        kvs = G__5881;
        continue
      }else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj)
      }
      break
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if(goog.isDef(var_args)) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return obj_map__delegate.call(this, keyvals)
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__5882) {
    var keyvals = cljs.core.seq(arglist__5882);
    return obj_map__delegate(keyvals)
  };
  obj_map.cljs$lang$arity$variadic = obj_map__delegate;
  return obj_map
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while(true) {
      if(in$) {
        var G__5883 = cljs.core.nnext.call(null, in$);
        var G__5884 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__5883;
        out = G__5884;
        continue
      }else {
        return out
      }
      break
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if(goog.isDef(var_args)) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return sorted_map__delegate.call(this, keyvals)
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__5885) {
    var keyvals = cljs.core.seq(arglist__5885);
    return sorted_map__delegate(keyvals)
  };
  sorted_map.cljs$lang$arity$variadic = sorted_map__delegate;
  return sorted_map
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while(true) {
      if(in$) {
        var G__5886 = cljs.core.nnext.call(null, in$);
        var G__5887 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__5886;
        out = G__5887;
        continue
      }else {
        return out
      }
      break
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if(goog.isDef(var_args)) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals)
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__5888) {
    var comparator = cljs.core.first(arglist__5888);
    var keyvals = cljs.core.rest(arglist__5888);
    return sorted_map_by__delegate(comparator, keyvals)
  };
  sorted_map_by.cljs$lang$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by
}();
cljs.core.keys = function keys(hash_map) {
  return cljs.core.seq.call(null, cljs.core.map.call(null, cljs.core.first, hash_map))
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry)
};
cljs.core.vals = function vals(hash_map) {
  return cljs.core.seq.call(null, cljs.core.map.call(null, cljs.core.second, hash_map))
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry)
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if(cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__5889_SHARP_, p2__5890_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3943__auto__ = p1__5889_SHARP_;
          if(cljs.core.truth_(or__3943__auto__)) {
            return or__3943__auto__
          }else {
            return cljs.core.ObjMap.EMPTY
          }
        }(), p2__5890_SHARP_)
      }, maps)
    }else {
      return null
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if(goog.isDef(var_args)) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return merge__delegate.call(this, maps)
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__5891) {
    var maps = cljs.core.seq(arglist__5891);
    return merge__delegate(maps)
  };
  merge.cljs$lang$arity$variadic = merge__delegate;
  return merge
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if(cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if(cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core._lookup.call(null, m, k, null), v))
        }else {
          return cljs.core.assoc.call(null, m, k, v)
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3943__auto__ = m1;
            if(cljs.core.truth_(or__3943__auto__)) {
              return or__3943__auto__
            }else {
              return cljs.core.ObjMap.EMPTY
            }
          }(), cljs.core.seq.call(null, m2))
        }
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps)
    }else {
      return null
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if(goog.isDef(var_args)) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return merge_with__delegate.call(this, f, maps)
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__5892) {
    var f = cljs.core.first(arglist__5892);
    var maps = cljs.core.rest(arglist__5892);
    return merge_with__delegate(f, maps)
  };
  merge_with.cljs$lang$arity$variadic = merge_with__delegate;
  return merge_with
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.ObjMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while(true) {
    if(keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core._lookup.call(null, map, key, "\ufdd0:cljs.core/not-found");
      var G__5893 = cljs.core.not_EQ_.call(null, entry, "\ufdd0:cljs.core/not-found") ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__5894 = cljs.core.next.call(null, keys);
      ret = G__5893;
      keys = G__5894;
      continue
    }else {
      return ret
    }
    break
  }
};
cljs.core.TransientHashSet = undefined;
goog.provide("cljs.core.PersistentHashSet");
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 15077647
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentHashSet")
};
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/PersistentHashSet")
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  return new cljs.core.TransientHashSet(cljs.core.transient$.call(null, self__.hash_map))
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_iset.call(null, coll);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, v, null)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  if(cljs.core.truth_(cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v))) {
    return v
  }else {
    return not_found
  }
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__5897 = null;
  var G__5897__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__5897__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__5897 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5897__2.call(this, self__, k);
      case 3:
        return G__5897__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5897
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args5896) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args5896.slice()))
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null)
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.keys.call(null, self__.hash_map)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.dissoc.call(null, self__.hash_map, v), null)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.count.call(null, cljs.core.seq.call(null, coll))
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var and__3941__auto__ = cljs.core.set_QMARK_.call(null, other);
  if(and__3941__auto__) {
    var and__3941__auto____$1 = cljs.core.count.call(null, coll) === cljs.core.count.call(null, other);
    if(and__3941__auto____$1) {
      return cljs.core.every_QMARK_.call(null, function(p1__5895_SHARP_) {
        return cljs.core.contains_QMARK_.call(null, coll, p1__5895_SHARP_)
      }, other)
    }else {
      return and__3941__auto____$1
    }
  }else {
    return and__3941__auto__
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta)
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.hash_map.call(null), 0);
cljs.core.PersistentHashSet.fromArray = function(items) {
  var len = cljs.core.count.call(null, items);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
  while(true) {
    if(i < len) {
      var G__5898 = i + 1;
      var G__5899 = cljs.core.conj_BANG_.call(null, out, items[i]);
      i = G__5898;
      out = G__5899;
      continue
    }else {
      return cljs.core.persistent_BANG_.call(null, out)
    }
    break
  }
};
goog.provide("cljs.core.TransientHashSet");
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/TransientHashSet")
};
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/TransientHashSet")
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__5902 = null;
  var G__5902__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if(cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null
    }else {
      return k
    }
  };
  var G__5902__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if(cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found
    }else {
      return k
    }
  };
  G__5902 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5902__2.call(this, self__, k);
      case 3:
        return G__5902__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5902
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args5901) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args5901.slice()))
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  return tcoll.cljs$core$ILookup$_lookup$arity$3(tcoll, v, null)
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  if(cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found
  }else {
    return v
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  return cljs.core.count.call(null, self__.transient_map)
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null)
};
goog.provide("cljs.core.PersistentTreeSet");
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 417730831
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentTreeSet")
};
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/PersistentTreeSet")
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_iset.call(null, coll);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, v, null)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var n = self__.tree_map.entry_at(v);
  if(!(n == null)) {
    return n.key
  }else {
    return not_found
  }
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__5904 = null;
  var G__5904__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__5904__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__5904 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5904__2.call(this, self__, k);
      case 3:
        return G__5904__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5904
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args5903) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args5903.slice()))
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map))
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_))
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_))
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  return entry
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._comparator.call(null, self__.tree_map)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.keys.call(null, self__.tree_map)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.count.call(null, self__.tree_map)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var and__3941__auto__ = cljs.core.set_QMARK_.call(null, other);
  if(and__3941__auto__) {
    var and__3941__auto____$1 = cljs.core.count.call(null, coll) === cljs.core.count.call(null, other);
    if(and__3941__auto____$1) {
      return cljs.core.every_QMARK_.call(null, function(p1__5900_SHARP_) {
        return cljs.core.contains_QMARK_.call(null, coll, p1__5900_SHARP_)
      }, other)
    }else {
      return and__3941__auto____$1
    }
  }else {
    return and__3941__auto__
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta)
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map.call(null), 0);
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY
  };
  var hash_set__1 = function() {
    var G__5905__delegate = function(keys) {
      var in$ = cljs.core.seq.call(null, keys);
      var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
      while(true) {
        if(cljs.core.seq.call(null, in$)) {
          var G__5906 = cljs.core.next.call(null, in$);
          var G__5907 = cljs.core.conj_BANG_.call(null, out, cljs.core.first.call(null, in$));
          in$ = G__5906;
          out = G__5907;
          continue
        }else {
          return cljs.core.persistent_BANG_.call(null, out)
        }
        break
      }
    };
    var G__5905 = function(var_args) {
      var keys = null;
      if(goog.isDef(var_args)) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__5905__delegate.call(this, keys)
    };
    G__5905.cljs$lang$maxFixedArity = 0;
    G__5905.cljs$lang$applyTo = function(arglist__5908) {
      var keys = cljs.core.seq(arglist__5908);
      return G__5905__delegate(keys)
    };
    G__5905.cljs$lang$arity$variadic = G__5905__delegate;
    return G__5905
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$lang$arity$variadic(cljs.core.array_seq(arguments, 0))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$lang$arity$0 = hash_set__0;
  hash_set.cljs$lang$arity$variadic = hash_set__1.cljs$lang$arity$variadic;
  return hash_set
}();
cljs.core.set = function set(coll) {
  return cljs.core.apply.call(null, cljs.core.hash_set, coll)
};
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys)
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if(goog.isDef(var_args)) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return sorted_set__delegate.call(this, keys)
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__5909) {
    var keys = cljs.core.seq(arglist__5909);
    return sorted_set__delegate(keys)
  };
  sorted_set.cljs$lang$arity$variadic = sorted_set__delegate;
  return sorted_set
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys)
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if(goog.isDef(var_args)) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return sorted_set_by__delegate.call(this, comparator, keys)
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__5911) {
    var comparator = cljs.core.first(arglist__5911);
    var keys = cljs.core.rest(arglist__5911);
    return sorted_set_by__delegate(comparator, keys)
  };
  sorted_set_by.cljs$lang$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by
}();
cljs.core.replace = function replace(smap, coll) {
  if(cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(v, i) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
      if(cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e))
      }else {
        return v
      }
    }, coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)))
  }else {
    return cljs.core.map.call(null, function(p1__5910_SHARP_) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, p1__5910_SHARP_);
      if(cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.second.call(null, e)
      }else {
        return p1__5910_SHARP_
      }
    }, coll)
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, false, function() {
      return function(p__5918, seen__$1) {
        while(true) {
          var vec__5919 = p__5918;
          var f = cljs.core.nth.call(null, vec__5919, 0, null);
          var xs__$1 = vec__5919;
          var temp__4092__auto__ = cljs.core.seq.call(null, xs__$1);
          if(temp__4092__auto__) {
            var s = temp__4092__auto__;
            if(cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__5920 = cljs.core.rest.call(null, s);
              var G__5921 = seen__$1;
              p__5918 = G__5920;
              seen__$1 = G__5921;
              continue
            }else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)))
            }
          }else {
            return null
          }
          break
        }
      }.call(null, xs, seen)
    }, null)
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY)
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while(true) {
    if(cljs.core.next.call(null, s__$1)) {
      var G__5922 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__5923 = cljs.core.next.call(null, s__$1);
      ret = G__5922;
      s__$1 = G__5923;
      continue
    }else {
      return cljs.core.seq.call(null, ret)
    }
    break
  }
};
cljs.core.name = function name(x) {
  if(cljs.core.string_QMARK_.call(null, x)) {
    return x
  }else {
    if(cljs.core.truth_(function() {
      var or__3943__auto__ = cljs.core.keyword_QMARK_.call(null, x);
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return cljs.core.symbol_QMARK_.call(null, x)
      }
    }())) {
      var i = x.lastIndexOf("/", x.length - 2);
      if(i < 0) {
        return cljs.core.subs.call(null, x, 2)
      }else {
        return cljs.core.subs.call(null, x, i + 1)
      }
    }else {
      if("\ufdd0:else") {
        throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
      }else {
        return null
      }
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if(cljs.core.truth_(function() {
    var or__3943__auto__ = cljs.core.keyword_QMARK_.call(null, x);
    if(or__3943__auto__) {
      return or__3943__auto__
    }else {
      return cljs.core.symbol_QMARK_.call(null, x)
    }
  }())) {
    var i = x.lastIndexOf("/", x.length - 2);
    if(i > -1) {
      return cljs.core.subs.call(null, x, 2, i)
    }else {
      return null
    }
  }else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.ObjMap.EMPTY;
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while(true) {
    if(cljs.core.truth_(function() {
      var and__3941__auto__ = ks;
      if(and__3941__auto__) {
        return vs
      }else {
        return and__3941__auto__
      }
    }())) {
      var G__5926 = cljs.core.assoc.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__5927 = cljs.core.next.call(null, ks);
      var G__5928 = cljs.core.next.call(null, vs);
      map = G__5926;
      ks = G__5927;
      vs = G__5928;
      continue
    }else {
      return map
    }
    break
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x
  };
  var max_key__3 = function(k, x, y) {
    if(k.call(null, x) > k.call(null, y)) {
      return x
    }else {
      return y
    }
  };
  var max_key__4 = function() {
    var G__5931__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__5924_SHARP_, p2__5925_SHARP_) {
        return max_key.call(null, k, p1__5924_SHARP_, p2__5925_SHARP_)
      }, max_key.call(null, k, x, y), more)
    };
    var G__5931 = function(k, x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__5931__delegate.call(this, k, x, y, more)
    };
    G__5931.cljs$lang$maxFixedArity = 3;
    G__5931.cljs$lang$applyTo = function(arglist__5932) {
      var k = cljs.core.first(arglist__5932);
      var x = cljs.core.first(cljs.core.next(arglist__5932));
      var y = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5932)));
      var more = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5932)));
      return G__5931__delegate(k, x, y, more)
    };
    G__5931.cljs$lang$arity$variadic = G__5931__delegate;
    return G__5931
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$lang$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$lang$arity$2 = max_key__2;
  max_key.cljs$lang$arity$3 = max_key__3;
  max_key.cljs$lang$arity$variadic = max_key__4.cljs$lang$arity$variadic;
  return max_key
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x
  };
  var min_key__3 = function(k, x, y) {
    if(k.call(null, x) < k.call(null, y)) {
      return x
    }else {
      return y
    }
  };
  var min_key__4 = function() {
    var G__5933__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__5929_SHARP_, p2__5930_SHARP_) {
        return min_key.call(null, k, p1__5929_SHARP_, p2__5930_SHARP_)
      }, min_key.call(null, k, x, y), more)
    };
    var G__5933 = function(k, x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__5933__delegate.call(this, k, x, y, more)
    };
    G__5933.cljs$lang$maxFixedArity = 3;
    G__5933.cljs$lang$applyTo = function(arglist__5934) {
      var k = cljs.core.first(arglist__5934);
      var x = cljs.core.first(cljs.core.next(arglist__5934));
      var y = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5934)));
      var more = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5934)));
      return G__5933__delegate(k, x, y, more)
    };
    G__5933.cljs$lang$arity$variadic = G__5933__delegate;
    return G__5933
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$lang$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$lang$arity$2 = min_key__2;
  min_key.cljs$lang$arity$3 = min_key__3;
  min_key.cljs$lang$arity$variadic = min_key__4.cljs$lang$arity$variadic;
  return min_key
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll)
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, false, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)))
      }else {
        return null
      }
    }, null)
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$lang$arity$2 = partition_all__2;
  partition_all.cljs$lang$arity$3 = partition_all__3;
  return partition_all
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, false, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      if(cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)))
      }else {
        return null
      }
    }else {
      return null
    }
  }, null)
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0)
  }
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if(cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_]).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if(cljs.core.truth_(temp__4092__auto__)) {
        var vec__5937 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__5937, 0, null);
        var s = vec__5937;
        if(cljs.core.truth_(include.call(null, e))) {
          return s
        }else {
          return cljs.core.next.call(null, s)
        }
      }else {
        return null
      }
    }else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true))
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if(cljs.core.truth_(temp__4092__auto__)) {
      var vec__5938 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__5938, 0, null);
      var s = vec__5938;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s))
    }else {
      return null
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$lang$arity$3 = subseq__3;
  subseq.cljs$lang$arity$5 = subseq__5;
  return subseq
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if(cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_]).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if(cljs.core.truth_(temp__4092__auto__)) {
        var vec__5941 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__5941, 0, null);
        var s = vec__5941;
        if(cljs.core.truth_(include.call(null, e))) {
          return s
        }else {
          return cljs.core.next.call(null, s)
        }
      }else {
        return null
      }
    }else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false))
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if(cljs.core.truth_(temp__4092__auto__)) {
      var vec__5942 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__5942, 0, null);
      var s = vec__5942;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s))
    }else {
      return null
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$lang$arity$3 = rsubseq__3;
  rsubseq.cljs$lang$arity$5 = rsubseq__5;
  return rsubseq
}();
goog.provide("cljs.core.Range");
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32375006
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/Range")
};
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/Range")
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_coll.call(null, rng);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  if(self__.step > 0) {
    if(self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null)
    }else {
      return null
    }
  }else {
    if(self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null)
    }else {
      return null
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, rng)
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, rng, f)
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, rng, f, s)
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  if(self__.step > 0) {
    if(self__.start < self__.end) {
      return rng
    }else {
      return null
    }
  }else {
    if(self__.start > self__.end) {
      return rng
    }else {
      return null
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  if(cljs.core.not.call(null, rng.cljs$core$ISeqable$_seq$arity$1(rng))) {
    return 0
  }else {
    return Math.ceil((self__.end - self__.start) / self__.step)
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  return self__.start
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  if(!(rng.cljs$core$ISeqable$_seq$arity$1(rng) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, rng, other)
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash)
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  return self__.meta
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  if(n < rng.cljs$core$ICounted$_count$arity$1(rng)) {
    return self__.start + n * self__.step
  }else {
    if(cljs.core.truth_(function() {
      var and__3941__auto__ = self__.start > self__.end;
      if(and__3941__auto__) {
        return self__.step === 0
      }else {
        return and__3941__auto__
      }
    }())) {
      return self__.start
    }else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  if(n < rng.cljs$core$ICounted$_count$arity$1(rng)) {
    return self__.start + n * self__.step
  }else {
    if(cljs.core.truth_(function() {
      var and__3941__auto__ = self__.start > self__.end;
      if(and__3941__auto__) {
        return self__.step === 0
      }else {
        return and__3941__auto__
      }
    }())) {
      return self__.start
    }else {
      return not_found
    }
  }
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1)
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1)
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1)
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null)
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$lang$arity$0 = range__0;
  range.cljs$lang$arity$1 = range__1;
  range.cljs$lang$arity$2 = range__2;
  range.cljs$lang$arity$3 = range__3;
  return range
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, false, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)))
    }else {
      return null
    }
  }, null)
};
cljs.core.split_with = function split_with(pred, coll) {
  return cljs.core.PersistentVector.fromArray([cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], true)
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, false, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv) {
        return function(p1__5943_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__5943_SHARP_))
        }
      }(fst, fv), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))))
    }else {
      return null
    }
  }, null)
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core._lookup.call(null, counts, x, 0) + 1)
  }, cljs.core.transient$.call(null, cljs.core.ObjMap.EMPTY), coll))
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, false, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4090__auto__) {
        var s = temp__4090__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s))
      }else {
        return cljs.core.list.call(null, f.call(null))
      }
    }, null)
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, false, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s))
      }else {
        return null
      }
    }, null))
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$lang$arity$2 = reductions__2;
  reductions.cljs$lang$arity$3 = reductions__3;
  return reductions
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__5954 = null;
      var G__5954__0 = function() {
        return cljs.core.vector.call(null, f.call(null))
      };
      var G__5954__1 = function(x) {
        return cljs.core.vector.call(null, f.call(null, x))
      };
      var G__5954__2 = function(x, y) {
        return cljs.core.vector.call(null, f.call(null, x, y))
      };
      var G__5954__3 = function(x, y, z) {
        return cljs.core.vector.call(null, f.call(null, x, y, z))
      };
      var G__5954__4 = function() {
        var G__5955__delegate = function(x, y, z, args) {
          return cljs.core.vector.call(null, cljs.core.apply.call(null, f, x, y, z, args))
        };
        var G__5955 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__5955__delegate.call(this, x, y, z, args)
        };
        G__5955.cljs$lang$maxFixedArity = 3;
        G__5955.cljs$lang$applyTo = function(arglist__5956) {
          var x = cljs.core.first(arglist__5956);
          var y = cljs.core.first(cljs.core.next(arglist__5956));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5956)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5956)));
          return G__5955__delegate(x, y, z, args)
        };
        G__5955.cljs$lang$arity$variadic = G__5955__delegate;
        return G__5955
      }();
      G__5954 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__5954__0.call(this);
          case 1:
            return G__5954__1.call(this, x);
          case 2:
            return G__5954__2.call(this, x, y);
          case 3:
            return G__5954__3.call(this, x, y, z);
          default:
            return G__5954__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__5954.cljs$lang$maxFixedArity = 3;
      G__5954.cljs$lang$applyTo = G__5954__4.cljs$lang$applyTo;
      return G__5954
    }()
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__5957 = null;
      var G__5957__0 = function() {
        return cljs.core.vector.call(null, f.call(null), g.call(null))
      };
      var G__5957__1 = function(x) {
        return cljs.core.vector.call(null, f.call(null, x), g.call(null, x))
      };
      var G__5957__2 = function(x, y) {
        return cljs.core.vector.call(null, f.call(null, x, y), g.call(null, x, y))
      };
      var G__5957__3 = function(x, y, z) {
        return cljs.core.vector.call(null, f.call(null, x, y, z), g.call(null, x, y, z))
      };
      var G__5957__4 = function() {
        var G__5958__delegate = function(x, y, z, args) {
          return cljs.core.vector.call(null, cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args))
        };
        var G__5958 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__5958__delegate.call(this, x, y, z, args)
        };
        G__5958.cljs$lang$maxFixedArity = 3;
        G__5958.cljs$lang$applyTo = function(arglist__5959) {
          var x = cljs.core.first(arglist__5959);
          var y = cljs.core.first(cljs.core.next(arglist__5959));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5959)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5959)));
          return G__5958__delegate(x, y, z, args)
        };
        G__5958.cljs$lang$arity$variadic = G__5958__delegate;
        return G__5958
      }();
      G__5957 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__5957__0.call(this);
          case 1:
            return G__5957__1.call(this, x);
          case 2:
            return G__5957__2.call(this, x, y);
          case 3:
            return G__5957__3.call(this, x, y, z);
          default:
            return G__5957__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__5957.cljs$lang$maxFixedArity = 3;
      G__5957.cljs$lang$applyTo = G__5957__4.cljs$lang$applyTo;
      return G__5957
    }()
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__5960 = null;
      var G__5960__0 = function() {
        return cljs.core.vector.call(null, f.call(null), g.call(null), h.call(null))
      };
      var G__5960__1 = function(x) {
        return cljs.core.vector.call(null, f.call(null, x), g.call(null, x), h.call(null, x))
      };
      var G__5960__2 = function(x, y) {
        return cljs.core.vector.call(null, f.call(null, x, y), g.call(null, x, y), h.call(null, x, y))
      };
      var G__5960__3 = function(x, y, z) {
        return cljs.core.vector.call(null, f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z))
      };
      var G__5960__4 = function() {
        var G__5961__delegate = function(x, y, z, args) {
          return cljs.core.vector.call(null, cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args))
        };
        var G__5961 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__5961__delegate.call(this, x, y, z, args)
        };
        G__5961.cljs$lang$maxFixedArity = 3;
        G__5961.cljs$lang$applyTo = function(arglist__5962) {
          var x = cljs.core.first(arglist__5962);
          var y = cljs.core.first(cljs.core.next(arglist__5962));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5962)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5962)));
          return G__5961__delegate(x, y, z, args)
        };
        G__5961.cljs$lang$arity$variadic = G__5961__delegate;
        return G__5961
      }();
      G__5960 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__5960__0.call(this);
          case 1:
            return G__5960__1.call(this, x);
          case 2:
            return G__5960__2.call(this, x, y);
          case 3:
            return G__5960__3.call(this, x, y, z);
          default:
            return G__5960__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__5960.cljs$lang$maxFixedArity = 3;
      G__5960.cljs$lang$applyTo = G__5960__4.cljs$lang$applyTo;
      return G__5960
    }()
  };
  var juxt__4 = function() {
    var G__5963__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function() {
        var G__5964 = null;
        var G__5964__0 = function() {
          return cljs.core.reduce.call(null, function(p1__5944_SHARP_, p2__5945_SHARP_) {
            return cljs.core.conj.call(null, p1__5944_SHARP_, p2__5945_SHARP_.call(null))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__5964__1 = function(x) {
          return cljs.core.reduce.call(null, function(p1__5946_SHARP_, p2__5947_SHARP_) {
            return cljs.core.conj.call(null, p1__5946_SHARP_, p2__5947_SHARP_.call(null, x))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__5964__2 = function(x, y) {
          return cljs.core.reduce.call(null, function(p1__5948_SHARP_, p2__5949_SHARP_) {
            return cljs.core.conj.call(null, p1__5948_SHARP_, p2__5949_SHARP_.call(null, x, y))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__5964__3 = function(x, y, z) {
          return cljs.core.reduce.call(null, function(p1__5950_SHARP_, p2__5951_SHARP_) {
            return cljs.core.conj.call(null, p1__5950_SHARP_, p2__5951_SHARP_.call(null, x, y, z))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__5964__4 = function() {
          var G__5965__delegate = function(x, y, z, args) {
            return cljs.core.reduce.call(null, function(p1__5952_SHARP_, p2__5953_SHARP_) {
              return cljs.core.conj.call(null, p1__5952_SHARP_, cljs.core.apply.call(null, p2__5953_SHARP_, x, y, z, args))
            }, cljs.core.PersistentVector.EMPTY, fs__$1)
          };
          var G__5965 = function(x, y, z, var_args) {
            var args = null;
            if(goog.isDef(var_args)) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
            }
            return G__5965__delegate.call(this, x, y, z, args)
          };
          G__5965.cljs$lang$maxFixedArity = 3;
          G__5965.cljs$lang$applyTo = function(arglist__5966) {
            var x = cljs.core.first(arglist__5966);
            var y = cljs.core.first(cljs.core.next(arglist__5966));
            var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5966)));
            var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5966)));
            return G__5965__delegate(x, y, z, args)
          };
          G__5965.cljs$lang$arity$variadic = G__5965__delegate;
          return G__5965
        }();
        G__5964 = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return G__5964__0.call(this);
            case 1:
              return G__5964__1.call(this, x);
            case 2:
              return G__5964__2.call(this, x, y);
            case 3:
              return G__5964__3.call(this, x, y, z);
            default:
              return G__5964__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__5964.cljs$lang$maxFixedArity = 3;
        G__5964.cljs$lang$applyTo = G__5964__4.cljs$lang$applyTo;
        return G__5964
      }()
    };
    var G__5963 = function(f, g, h, var_args) {
      var fs = null;
      if(goog.isDef(var_args)) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__5963__delegate.call(this, f, g, h, fs)
    };
    G__5963.cljs$lang$maxFixedArity = 3;
    G__5963.cljs$lang$applyTo = function(arglist__5967) {
      var f = cljs.core.first(arglist__5967);
      var g = cljs.core.first(cljs.core.next(arglist__5967));
      var h = cljs.core.first(cljs.core.next(cljs.core.next(arglist__5967)));
      var fs = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__5967)));
      return G__5963__delegate(f, g, h, fs)
    };
    G__5963.cljs$lang$arity$variadic = G__5963__delegate;
    return G__5963
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$lang$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$lang$arity$1 = juxt__1;
  juxt.cljs$lang$arity$2 = juxt__2;
  juxt.cljs$lang$arity$3 = juxt__3;
  juxt.cljs$lang$arity$variadic = juxt__4.cljs$lang$arity$variadic;
  return juxt
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while(true) {
      if(cljs.core.seq.call(null, coll)) {
        var G__5968 = cljs.core.next.call(null, coll);
        coll = G__5968;
        continue
      }else {
        return null
      }
      break
    }
  };
  var dorun__2 = function(n, coll) {
    while(true) {
      if(cljs.core.truth_(function() {
        var and__3941__auto__ = cljs.core.seq.call(null, coll);
        if(and__3941__auto__) {
          return n > 0
        }else {
          return and__3941__auto__
        }
      }())) {
        var G__5969 = n - 1;
        var G__5970 = cljs.core.next.call(null, coll);
        n = G__5969;
        coll = G__5970;
        continue
      }else {
        return null
      }
      break
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$lang$arity$1 = dorun__1;
  dorun.cljs$lang$arity$2 = dorun__2;
  return dorun
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$lang$arity$1 = doall__1;
  doall.cljs$lang$arity$2 = doall__2;
  return doall
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if(cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if(cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches)
    }else {
      return cljs.core.vec.call(null, matches)
    }
  }else {
    return null
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if(matches == null) {
    return null
  }else {
    if(cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches)
    }else {
      return cljs.core.vec.call(null, matches)
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if(cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, false, function() {
      return cljs.core.cons.call(null, match_data, re_seq.call(null, re, post_match))
    }, null)
  }else {
    return null
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__5973 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__5973, 0, null);
  var flags = cljs.core.nth.call(null, vec__5973, 1, null);
  var pattern = cljs.core.nth.call(null, vec__5973, 2, null);
  return new RegExp(pattern, flags)
};
cljs.core.pr_sequential = function pr_sequential(print_one, begin, sep, end, opts, coll) {
  return cljs.core.concat.call(null, cljs.core.PersistentVector.fromArray([begin], true), cljs.core.flatten1.call(null, cljs.core.interpose.call(null, cljs.core.PersistentVector.fromArray([sep], true), cljs.core.map.call(null, function(p1__5971_SHARP_) {
    return print_one.call(null, p1__5971_SHARP_, opts)
  }, coll))), cljs.core.PersistentVector.fromArray([end], true))
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  cljs.core._write.call(null, writer, begin);
  if(cljs.core.seq.call(null, coll)) {
    print_one.call(null, cljs.core.first.call(null, coll), writer, opts)
  }else {
  }
  var G__5975_5976 = cljs.core.seq.call(null, cljs.core.next.call(null, coll));
  while(true) {
    if(G__5975_5976) {
      var o_5977 = cljs.core.first.call(null, G__5975_5976);
      cljs.core._write.call(null, writer, sep);
      print_one.call(null, o_5977, writer, opts);
      var G__5978 = cljs.core.next.call(null, G__5975_5976);
      G__5975_5976 = G__5978;
      continue
    }else {
    }
    break
  }
  return cljs.core._write.call(null, writer, end)
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var G__5980 = cljs.core.seq.call(null, ss);
    while(true) {
      if(G__5980) {
        var s = cljs.core.first.call(null, G__5980);
        cljs.core._write.call(null, writer, s);
        var G__5981 = cljs.core.next.call(null, G__5980);
        G__5980 = G__5981;
        continue
      }else {
        return null
      }
      break
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if(goog.isDef(var_args)) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return write_all__delegate.call(this, writer, ss)
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__5982) {
    var writer = cljs.core.first(arglist__5982);
    var ss = cljs.core.rest(arglist__5982);
    return write_all__delegate(writer, ss)
  };
  write_all.cljs$lang$arity$variadic = write_all__delegate;
  return write_all
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null
};
cljs.core.flush = function flush() {
  return null
};
goog.provide("cljs.core.StringBufferWriter");
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/StringBufferWriter")
};
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/StringBufferWriter")
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  return self__.sb.append(s)
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  return null
};
cljs.core.pr_seq = function pr_seq(obj, opts) {
  if(obj == null) {
    return cljs.core.list.call(null, "nil")
  }else {
    if(void 0 === obj) {
      return cljs.core.list.call(null, "#<undefined>")
    }else {
      if("\ufdd0:else") {
        return cljs.core.concat.call(null, cljs.core.truth_(function() {
          var and__3941__auto__ = cljs.core._lookup.call(null, opts, "\ufdd0:meta", null);
          if(cljs.core.truth_(and__3941__auto__)) {
            var and__3941__auto____$1 = function() {
              var G__5985 = obj;
              if(G__5985) {
                if(cljs.core.truth_(function() {
                  var or__3943__auto__ = G__5985.cljs$lang$protocol_mask$partition0$ & 131072;
                  if(or__3943__auto__) {
                    return or__3943__auto__
                  }else {
                    return G__5985.cljs$core$IMeta$
                  }
                }())) {
                  return true
                }else {
                  if(!G__5985.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.type_satisfies_.call(null, cljs.core.IMeta, G__5985)
                  }else {
                    return false
                  }
                }
              }else {
                return cljs.core.type_satisfies_.call(null, cljs.core.IMeta, G__5985)
              }
            }();
            if(cljs.core.truth_(and__3941__auto____$1)) {
              return cljs.core.meta.call(null, obj)
            }else {
              return and__3941__auto____$1
            }
          }else {
            return and__3941__auto__
          }
        }()) ? cljs.core.concat.call(null, cljs.core.PersistentVector.fromArray(["^"], true), pr_seq.call(null, cljs.core.meta.call(null, obj), opts), cljs.core.PersistentVector.fromArray([" "], true)) : null, cljs.core.truth_(function() {
          var and__3941__auto__ = !(obj == null);
          if(and__3941__auto__) {
            return obj.cljs$lang$type
          }else {
            return and__3941__auto__
          }
        }()) ? obj.cljs$lang$ctorPrSeq(obj) : cljs.core.truth_(function() {
          var G__5986 = obj;
          if(G__5986) {
            if(cljs.core.truth_(function() {
              var or__3943__auto__ = G__5986.cljs$lang$protocol_mask$partition0$ & 536870912;
              if(or__3943__auto__) {
                return or__3943__auto__
              }else {
                return G__5986.cljs$core$IPrintable$
              }
            }())) {
              return true
            }else {
              if(!G__5986.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.type_satisfies_.call(null, cljs.core.IPrintable, G__5986)
              }else {
                return false
              }
            }
          }else {
            return cljs.core.type_satisfies_.call(null, cljs.core.IPrintable, G__5986)
          }
        }()) ? cljs.core._pr_seq.call(null, obj, opts) : cljs.core.truth_(cljs.core.regexp_QMARK_.call(null, obj)) ? cljs.core.list.call(null, '#"', obj.source, '"') : "\ufdd0:else" ? cljs.core.list.call(null, "#<", [cljs.core.str(obj)].join(""), ">") : null)
      }else {
        return null
      }
    }
  }
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if(obj == null) {
    return cljs.core._write.call(null, writer, "nil")
  }else {
    if(void 0 === obj) {
      return cljs.core._write.call(null, writer, "#<undefined>")
    }else {
      if("\ufdd0:else") {
        if(cljs.core.truth_(function() {
          var and__3941__auto__ = cljs.core._lookup.call(null, opts, "\ufdd0:meta", null);
          if(cljs.core.truth_(and__3941__auto__)) {
            var and__3941__auto____$1 = function() {
              var G__5990 = obj;
              if(G__5990) {
                if(cljs.core.truth_(function() {
                  var or__3943__auto__ = G__5990.cljs$lang$protocol_mask$partition0$ & 131072;
                  if(or__3943__auto__) {
                    return or__3943__auto__
                  }else {
                    return G__5990.cljs$core$IMeta$
                  }
                }())) {
                  return true
                }else {
                  if(!G__5990.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.type_satisfies_.call(null, cljs.core.IMeta, G__5990)
                  }else {
                    return false
                  }
                }
              }else {
                return cljs.core.type_satisfies_.call(null, cljs.core.IMeta, G__5990)
              }
            }();
            if(cljs.core.truth_(and__3941__auto____$1)) {
              return cljs.core.meta.call(null, obj)
            }else {
              return and__3941__auto____$1
            }
          }else {
            return and__3941__auto__
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ")
        }else {
        }
        if(cljs.core.truth_(function() {
          var and__3941__auto__ = !(obj == null);
          if(and__3941__auto__) {
            return obj.cljs$lang$type
          }else {
            return and__3941__auto__
          }
        }())) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts)
        }else {
          if(cljs.core.truth_(function() {
            var G__5991 = obj;
            if(G__5991) {
              if(cljs.core.truth_(function() {
                var or__3943__auto__ = G__5991.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if(or__3943__auto__) {
                  return or__3943__auto__
                }else {
                  return G__5991.cljs$core$IPrintWithWriter$
                }
              }())) {
                return true
              }else {
                if(!G__5991.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.type_satisfies_.call(null, cljs.core.IPrintWithWriter, G__5991)
                }else {
                  return false
                }
              }
            }else {
              return cljs.core.type_satisfies_.call(null, cljs.core.IPrintWithWriter, G__5991)
            }
          }())) {
            return cljs.core._pr_writer.call(null, obj, writer, opts)
          }else {
            if(cljs.core.truth_(function() {
              var G__5992 = obj;
              if(G__5992) {
                if(cljs.core.truth_(function() {
                  var or__3943__auto__ = G__5992.cljs$lang$protocol_mask$partition0$ & 536870912;
                  if(or__3943__auto__) {
                    return or__3943__auto__
                  }else {
                    return G__5992.cljs$core$IPrintable$
                  }
                }())) {
                  return true
                }else {
                  if(!G__5992.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.type_satisfies_.call(null, cljs.core.IPrintable, G__5992)
                  }else {
                    return false
                  }
                }
              }else {
                return cljs.core.type_satisfies_.call(null, cljs.core.IPrintable, G__5992)
              }
            }())) {
              return cljs.core.apply.call(null, cljs.core.write_all, writer, cljs.core._pr_seq.call(null, obj, opts))
            }else {
              if(cljs.core.truth_(cljs.core.regexp_QMARK_.call(null, obj))) {
                return cljs.core.write_all.call(null, writer, '#"', obj.source, '"')
              }else {
                if("\ufdd0:else") {
                  return cljs.core.write_all.call(null, writer, "#<", [cljs.core.str(obj)].join(""), ">")
                }else {
                  return null
                }
              }
            }
          }
        }
      }else {
        return null
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var G__5994 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  while(true) {
    if(G__5994) {
      var obj = cljs.core.first.call(null, G__5994);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__5995 = cljs.core.next.call(null, G__5994);
      G__5994 = G__5995;
      continue
    }else {
      return null
    }
    break
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if(cljs.core.empty_QMARK_.call(null, objs)) {
    return""
  }else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("")
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if(cljs.core.empty_QMARK_.call(null, objs)) {
    return"\n"
  }else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("")
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts))
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if(cljs.core.truth_(cljs.core._lookup.call(null, opts, "\ufdd0:flush-on-newline", null))) {
    return cljs.core.flush.call(null)
  }else {
    return null
  }
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core.pr_opts = function pr_opts() {
  return cljs.core.ObjMap.fromObject(["\ufdd0:flush-on-newline", "\ufdd0:readably", "\ufdd0:meta", "\ufdd0:dup"], {"\ufdd0:flush-on-newline":cljs.core._STAR_flush_on_newline_STAR_, "\ufdd0:readably":cljs.core._STAR_print_readably_STAR_, "\ufdd0:meta":cljs.core._STAR_print_meta_STAR_, "\ufdd0:dup":cljs.core._STAR_print_dup_STAR_})
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null))
  };
  var pr_str = function(var_args) {
    var objs = null;
    if(goog.isDef(var_args)) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return pr_str__delegate.call(this, objs)
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__5996) {
    var objs = cljs.core.seq(arglist__5996);
    return pr_str__delegate(objs)
  };
  pr_str.cljs$lang$arity$variadic = pr_str__delegate;
  return pr_str
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null))
  };
  var prn_str = function(var_args) {
    var objs = null;
    if(goog.isDef(var_args)) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return prn_str__delegate.call(this, objs)
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__5997) {
    var objs = cljs.core.seq(arglist__5997);
    return prn_str__delegate(objs)
  };
  prn_str.cljs$lang$arity$variadic = prn_str__delegate;
  return prn_str
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null))
  };
  var pr = function(var_args) {
    var objs = null;
    if(goog.isDef(var_args)) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return pr__delegate.call(this, objs)
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__5998) {
    var objs = cljs.core.seq(arglist__5998);
    return pr__delegate(objs)
  };
  pr.cljs$lang$arity$variadic = pr__delegate;
  return pr
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), "\ufdd0:readably", false))
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if(goog.isDef(var_args)) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return cljs_core_print__delegate.call(this, objs)
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__5999) {
    var objs = cljs.core.seq(arglist__5999);
    return cljs_core_print__delegate(objs)
  };
  cljs_core_print.cljs$lang$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), "\ufdd0:readably", false))
  };
  var print_str = function(var_args) {
    var objs = null;
    if(goog.isDef(var_args)) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return print_str__delegate.call(this, objs)
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__6000) {
    var objs = cljs.core.seq(arglist__6000);
    return print_str__delegate(objs)
  };
  print_str.cljs$lang$arity$variadic = print_str__delegate;
  return print_str
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), "\ufdd0:readably", false));
    return cljs.core.newline.call(null, cljs.core.pr_opts.call(null))
  };
  var println = function(var_args) {
    var objs = null;
    if(goog.isDef(var_args)) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return println__delegate.call(this, objs)
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__6001) {
    var objs = cljs.core.seq(arglist__6001);
    return println__delegate(objs)
  };
  println.cljs$lang$arity$variadic = println__delegate;
  return println
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), "\ufdd0:readably", false))
  };
  var println_str = function(var_args) {
    var objs = null;
    if(goog.isDef(var_args)) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return println_str__delegate.call(this, objs)
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__6002) {
    var objs = cljs.core.seq(arglist__6002);
    return println_str__delegate(objs)
  };
  println_str.cljs$lang$arity$variadic = println_str__delegate;
  return println_str
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    return cljs.core.newline.call(null, cljs.core.pr_opts.call(null))
  };
  var prn = function(var_args) {
    var objs = null;
    if(goog.isDef(var_args)) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return prn__delegate.call(this, objs)
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__6003) {
    var objs = cljs.core.seq(arglist__6003);
    return prn__delegate(objs)
  };
  prn.cljs$lang$arity$variadic = prn__delegate;
  return prn
}();
cljs.core.printf = function() {
  var printf__delegate = function(fmt, args) {
    return cljs.core.print.call(null, cljs.core.apply.call(null, cljs.core.format, fmt, args))
  };
  var printf = function(fmt, var_args) {
    var args = null;
    if(goog.isDef(var_args)) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return printf__delegate.call(this, fmt, args)
  };
  printf.cljs$lang$maxFixedArity = 1;
  printf.cljs$lang$applyTo = function(arglist__6004) {
    var fmt = cljs.core.first(arglist__6004);
    var args = cljs.core.rest(arglist__6004);
    return printf__delegate(fmt, args)
  };
  printf.cljs$lang$arity$variadic = printf__delegate;
  return printf
}();
cljs.core.char_escapes = cljs.core.ObjMap.fromObject(['"', "\\", "\b", "\f", "\n", "\r", "\t"], {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"});
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core._lookup.call(null, cljs.core.char_escapes, match, null)
  })), cljs.core.str('"')].join("")
};
cljs.core.HashMap.prototype.cljs$core$IPrintable$ = true;
cljs.core.HashMap.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential.call(null, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.IPrintable["number"] = true;
cljs.core._pr_seq["number"] = function(n, opts) {
  return cljs.core.list.call(null, [cljs.core.str(n)].join(""))
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.Subvec.prototype.cljs$core$IPrintable$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "[", " ", "]", opts, coll)
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintable$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential.call(null, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential.call(null, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll))
};
cljs.core.LazySeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.RSeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "#{", " ", "}", opts, coll)
};
cljs.core.IPrintable["boolean"] = true;
cljs.core._pr_seq["boolean"] = function(bool, opts) {
  return cljs.core.list.call(null, [cljs.core.str(bool)].join(""))
};
cljs.core.IPrintable["string"] = true;
cljs.core._pr_seq["string"] = function(obj, opts) {
  if(cljs.core.keyword_QMARK_.call(null, obj)) {
    return cljs.core.list.call(null, [cljs.core.str(":"), cljs.core.str(function() {
      var temp__4092__auto__ = cljs.core.namespace.call(null, obj);
      if(cljs.core.truth_(temp__4092__auto__)) {
        var nspc = temp__4092__auto__;
        return[cljs.core.str(nspc), cljs.core.str("/")].join("")
      }else {
        return null
      }
    }()), cljs.core.str(cljs.core.name.call(null, obj))].join(""))
  }else {
    if(cljs.core.symbol_QMARK_.call(null, obj)) {
      return cljs.core.list.call(null, [cljs.core.str(function() {
        var temp__4092__auto__ = cljs.core.namespace.call(null, obj);
        if(cljs.core.truth_(temp__4092__auto__)) {
          var nspc = temp__4092__auto__;
          return[cljs.core.str(nspc), cljs.core.str("/")].join("")
        }else {
          return null
        }
      }()), cljs.core.str(cljs.core.name.call(null, obj))].join(""))
    }else {
      if("\ufdd0:else") {
        return cljs.core.list.call(null, cljs.core.truth_((new cljs.core.Keyword("\ufdd0:readably")).call(null, opts)) ? cljs.core.quote_string.call(null, obj) : obj)
      }else {
        return null
      }
    }
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.RedNode.prototype.cljs$core$IPrintable$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "[", " ", "]", opts, coll)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential.call(null, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.Vector.prototype.cljs$core$IPrintable$ = true;
cljs.core.Vector.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "[", " ", "]", opts, coll)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "#{", " ", "}", opts, coll)
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "[", " ", "]", opts, coll)
};
cljs.core.List.prototype.cljs$core$IPrintable$ = true;
cljs.core.List.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.IPrintable["array"] = true;
cljs.core._pr_seq["array"] = function(a, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "#<Array [", ", ", "]>", opts, a)
};
cljs.core.IPrintable["function"] = true;
cljs.core._pr_seq["function"] = function(this$) {
  return cljs.core.list.call(null, "#<", [cljs.core.str(this$)].join(""), ">")
};
cljs.core.EmptyList.prototype.cljs$core$IPrintable$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.list.call(null, "()")
};
cljs.core.BlackNode.prototype.cljs$core$IPrintable$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "[", " ", "]", opts, coll)
};
Date.prototype.cljs$core$IPrintable$ = true;
Date.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(d, _) {
  var normalize = function(n, len) {
    var ns = [cljs.core.str(n)].join("");
    while(true) {
      if(cljs.core.count.call(null, ns) < len) {
        var G__6005 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
        ns = G__6005;
        continue
      }else {
        return ns
      }
      break
    }
  };
  return cljs.core.list.call(null, [cljs.core.str('#inst "'), cljs.core.str(d.getUTCFullYear()), cljs.core.str("-"), cljs.core.str(normalize.call(null, d.getUTCMonth() + 1, 2)), cljs.core.str("-"), cljs.core.str(normalize.call(null, d.getUTCDate(), 2)), cljs.core.str("T"), cljs.core.str(normalize.call(null, d.getUTCHours(), 2)), cljs.core.str(":"), cljs.core.str(normalize.call(null, d.getUTCMinutes(), 2)), cljs.core.str(":"), cljs.core.str(normalize.call(null, d.getUTCSeconds(), 2)), cljs.core.str("."), 
  cljs.core.str(normalize.call(null, d.getUTCMilliseconds(), 3)), cljs.core.str("-"), cljs.core.str('00:00"')].join(""))
};
cljs.core.Cons.prototype.cljs$core$IPrintable$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.Range.prototype.cljs$core$IPrintable$ = true;
cljs.core.Range.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.ObjMap.prototype.cljs$core$IPrintable$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential.call(null, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.HashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.HashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.IPrintWithWriter["number"] = true;
cljs.core._pr_writer["number"] = function(n, writer, opts) {
  1 / 0;
  return cljs.core._write.call(null, writer, [cljs.core.str(n)].join(""))
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll)
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll))
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll)
};
cljs.core.IPrintWithWriter["boolean"] = true;
cljs.core._pr_writer["boolean"] = function(bool, writer, opts) {
  return cljs.core._write.call(null, writer, [cljs.core.str(bool)].join(""))
};
cljs.core.IPrintWithWriter["string"] = true;
cljs.core._pr_writer["string"] = function(obj, writer, opts) {
  if(cljs.core.keyword_QMARK_.call(null, obj)) {
    cljs.core._write.call(null, writer, ":");
    var temp__4092__auto___6006 = cljs.core.namespace.call(null, obj);
    if(cljs.core.truth_(temp__4092__auto___6006)) {
      var nspc_6007 = temp__4092__auto___6006;
      cljs.core.write_all.call(null, writer, [cljs.core.str(nspc_6007)].join(""), "/")
    }else {
    }
    return cljs.core._write.call(null, writer, cljs.core.name.call(null, obj))
  }else {
    if(cljs.core.symbol_QMARK_.call(null, obj)) {
      var temp__4092__auto___6008 = cljs.core.namespace.call(null, obj);
      if(cljs.core.truth_(temp__4092__auto___6008)) {
        var nspc_6009 = temp__4092__auto___6008;
        cljs.core.write_all.call(null, writer, [cljs.core.str(nspc_6009)].join(""), "/")
      }else {
      }
      return cljs.core._write.call(null, writer, cljs.core.name.call(null, obj))
    }else {
      if("\ufdd0:else") {
        if(cljs.core.truth_((new cljs.core.Keyword("\ufdd0:readably")).call(null, opts))) {
          return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj))
        }else {
          return cljs.core._write.call(null, writer, obj)
        }
      }else {
        return null
      }
    }
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.Vector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Vector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll)
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll)
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.IPrintWithWriter["array"] = true;
cljs.core._pr_writer["array"] = function(a, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#<Array [", ", ", "]>", opts, a)
};
cljs.core.IPrintWithWriter["function"] = true;
cljs.core._pr_writer["function"] = function(this$, writer, _) {
  return cljs.core.write_all.call(null, writer, "#<", [cljs.core.str(this$)].join(""), ">")
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core._write.call(null, writer, "()")
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll)
};
Date.prototype.cljs$core$IPrintWithWriter$ = true;
Date.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(d, writer, _) {
  var normalize = function(n, len) {
    var ns = [cljs.core.str(n)].join("");
    while(true) {
      if(cljs.core.count.call(null, ns) < len) {
        var G__6010 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
        ns = G__6010;
        continue
      }else {
        return ns
      }
      break
    }
  };
  return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(d.getUTCFullYear())].join(""), "-", normalize.call(null, d.getUTCMonth() + 1, 2), "-", normalize.call(null, d.getUTCDate(), 2), "T", normalize.call(null, d.getUTCHours(), 2), ":", normalize.call(null, d.getUTCMinutes(), 2), ":", normalize.call(null, d.getUTCSeconds(), 2), ".", normalize.call(null, d.getUTCMilliseconds(), 3), "-", '00:00"')
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  return cljs.core.compare_indexed.call(null, x, y)
};
goog.provide("cljs.core.Atom");
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2690809856;
  this.cljs$lang$protocol_mask$partition1$ = 2
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/Atom")
};
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/Atom")
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  return goog.getUid(this$)
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var G__6011 = cljs.core.seq.call(null, self__.watches);
  while(true) {
    if(G__6011) {
      var vec__6012 = cljs.core.first.call(null, G__6011);
      var key = cljs.core.nth.call(null, vec__6012, 0, null);
      var f = cljs.core.nth.call(null, vec__6012, 1, null);
      f.call(null, key, this$, oldval, newval);
      var G__6013 = cljs.core.next.call(null, G__6011);
      G__6011 = G__6013;
      continue
    }else {
      return null
    }
    break
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  return this$.watches = cljs.core.assoc.call(null, self__.watches, key, f)
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  return this$.watches = cljs.core.dissoc.call(null, self__.watches, key)
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  cljs.core._write.call(null, writer, "#<Atom: ");
  cljs.core._pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, ">")
};
cljs.core.Atom.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(a, opts) {
  var self__ = this;
  return cljs.core.concat.call(null, cljs.core.PersistentVector.fromArray(["#<Atom: "], true), cljs.core._pr_seq.call(null, self__.state, opts), ">")
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  return self__.meta
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  return self__.state
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  return o === other
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null)
  };
  var atom__2 = function() {
    var G__6017__delegate = function(x, p__6014) {
      var map__6016 = p__6014;
      var map__6016__$1 = cljs.core.seq_QMARK_.call(null, map__6016) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6016) : map__6016;
      var validator = cljs.core._lookup.call(null, map__6016__$1, "\ufdd0:validator", null);
      var meta = cljs.core._lookup.call(null, map__6016__$1, "\ufdd0:meta", null);
      return new cljs.core.Atom(x, meta, validator, null)
    };
    var G__6017 = function(x, var_args) {
      var p__6014 = null;
      if(goog.isDef(var_args)) {
        p__6014 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__6017__delegate.call(this, x, p__6014)
    };
    G__6017.cljs$lang$maxFixedArity = 1;
    G__6017.cljs$lang$applyTo = function(arglist__6018) {
      var x = cljs.core.first(arglist__6018);
      var p__6014 = cljs.core.rest(arglist__6018);
      return G__6017__delegate(x, p__6014)
    };
    G__6017.cljs$lang$arity$variadic = G__6017__delegate;
    return G__6017
  }();
  atom = function(x, var_args) {
    var p__6014 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$lang$arity$variadic(x, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$lang$arity$1 = atom__1;
  atom.cljs$lang$arity$variadic = atom__2.cljs$lang$arity$variadic;
  return atom
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  var temp__4092__auto___6019 = a.validator;
  if(cljs.core.truth_(temp__4092__auto___6019)) {
    var validate_6020 = temp__4092__auto___6019;
    if(cljs.core.truth_(validate_6020.call(null, new_value))) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'validate", "\ufdd1'new-value"), cljs.core.hash_map("\ufdd0:line", 6752, "\ufdd0:column", 13))))].join(""));
    }
  }else {
  }
  var old_value_6021 = a.state;
  a.state = new_value;
  cljs.core._notify_watches.call(null, a, old_value_6021, new_value);
  return new_value
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state))
  };
  var swap_BANG___3 = function(a, f, x) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x))
  };
  var swap_BANG___4 = function(a, f, x, y) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y))
  };
  var swap_BANG___5 = function(a, f, x, y, z) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y, z))
  };
  var swap_BANG___6 = function() {
    var G__6022__delegate = function(a, f, x, y, z, more) {
      return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, z, more))
    };
    var G__6022 = function(a, f, x, y, z, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0)
      }
      return G__6022__delegate.call(this, a, f, x, y, z, more)
    };
    G__6022.cljs$lang$maxFixedArity = 5;
    G__6022.cljs$lang$applyTo = function(arglist__6023) {
      var a = cljs.core.first(arglist__6023);
      var f = cljs.core.first(cljs.core.next(arglist__6023));
      var x = cljs.core.first(cljs.core.next(cljs.core.next(arglist__6023)));
      var y = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(arglist__6023))));
      var z = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(cljs.core.next(arglist__6023)))));
      var more = cljs.core.rest(cljs.core.next(cljs.core.next(cljs.core.next(cljs.core.next(arglist__6023)))));
      return G__6022__delegate(a, f, x, y, z, more)
    };
    G__6022.cljs$lang$arity$variadic = G__6022__delegate;
    return G__6022
  }();
  swap_BANG_ = function(a, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      case 5:
        return swap_BANG___5.call(this, a, f, x, y, z);
      default:
        return swap_BANG___6.cljs$lang$arity$variadic(a, f, x, y, z, cljs.core.array_seq(arguments, 5))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 5;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___6.cljs$lang$applyTo;
  swap_BANG_.cljs$lang$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$lang$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$lang$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$lang$arity$5 = swap_BANG___5;
  swap_BANG_.cljs$lang$arity$variadic = swap_BANG___6.cljs$lang$arity$variadic;
  return swap_BANG_
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if(cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true
  }else {
    return false
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o)
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args)
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if(goog.isDef(var_args)) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args)
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__6024) {
    var iref = cljs.core.first(arglist__6024);
    var f = cljs.core.first(cljs.core.next(arglist__6024));
    var args = cljs.core.rest(cljs.core.next(arglist__6024));
    return alter_meta_BANG___delegate(iref, f, args)
  };
  alter_meta_BANG_.cljs$lang$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f)
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key)
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__")
  };
  var gensym__1 = function(prefix_string) {
    if(cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0)
    }else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""))
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$lang$arity$0 = gensym__0;
  gensym.cljs$lang$arity$1 = gensym__1;
  return gensym
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
goog.provide("cljs.core.Delay");
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/Delay")
};
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/Delay")
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  return(new cljs.core.Keyword("\ufdd0:done")).call(null, cljs.core.deref.call(null, self__.state))
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  return(new cljs.core.Keyword("\ufdd0:value")).call(null, cljs.core.swap_BANG_.call(null, self__.state, function(p__6025) {
    var map__6026 = p__6025;
    var map__6026__$1 = cljs.core.seq_QMARK_.call(null, map__6026) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6026) : map__6026;
    var curr_state = map__6026__$1;
    var done = cljs.core._lookup.call(null, map__6026__$1, "\ufdd0:done", null);
    if(cljs.core.truth_(done)) {
      return curr_state
    }else {
      return cljs.core.ObjMap.fromObject(["\ufdd0:done", "\ufdd0:value"], {"\ufdd0:done":true, "\ufdd0:value":self__.f.call(null)})
    }
  }))
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return cljs.core.instance_QMARK_.call(null, cljs.core.Delay, x)
};
cljs.core.force = function force(x) {
  if(cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x)
  }else {
    return x
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d)
};
cljs.core.IEncodeJS = {};
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if(function() {
    var and__3941__auto__ = x;
    if(and__3941__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x)
  }else {
    var x__4090__auto__ = x == null ? null : x;
    return function() {
      var or__3943__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._clj__GT_js["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj->js", x);
        }
      }
    }().call(null, x)
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if(function() {
    var and__3941__auto__ = x;
    if(and__3941__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x)
  }else {
    var x__4090__auto__ = x == null ? null : x;
    return function() {
      var or__3943__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._key__GT_js["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key->js", x);
        }
      }
    }().call(null, x)
  }
};
cljs.core.IEncodeJS["null"] = true;
cljs.core._clj__GT_js["null"] = function(x) {
  return null
};
cljs.core.IEncodeJS["_"] = true;
cljs.core._key__GT_js["_"] = function(k) {
  if(cljs.core.truth_(function() {
    var or__3943__auto__ = cljs.core.string_QMARK_.call(null, k);
    if(or__3943__auto__) {
      return or__3943__auto__
    }else {
      var or__3943__auto____$1 = cljs.core.number_QMARK_.call(null, k);
      if(or__3943__auto____$1) {
        return or__3943__auto____$1
      }else {
        var or__3943__auto____$2 = cljs.core.keyword_QMARK_.call(null, k);
        if(or__3943__auto____$2) {
          return or__3943__auto____$2
        }else {
          return cljs.core.symbol_QMARK_.call(null, k)
        }
      }
    }
  }())) {
    return cljs.core._clj__GT_js.call(null, k)
  }else {
    return cljs.core.pr_str.call(null, k)
  }
};
cljs.core._clj__GT_js["_"] = function(x) {
  if(cljs.core.keyword_QMARK_.call(null, x)) {
    return cljs.core.name.call(null, x)
  }else {
    if(cljs.core.symbol_QMARK_.call(null, x)) {
      return[cljs.core.str(x)].join("")
    }else {
      if(cljs.core.map_QMARK_.call(null, x)) {
        var m = {};
        var G__6027_6029 = cljs.core.seq.call(null, x);
        while(true) {
          if(G__6027_6029) {
            var vec__6028_6030 = cljs.core.first.call(null, G__6027_6029);
            var k_6031 = cljs.core.nth.call(null, vec__6028_6030, 0, null);
            var v_6032 = cljs.core.nth.call(null, vec__6028_6030, 1, null);
            m[cljs.core._key__GT_js.call(null, k_6031)] = cljs.core._clj__GT_js.call(null, v_6032);
            var G__6033 = cljs.core.next.call(null, G__6027_6029);
            G__6027_6029 = G__6033;
            continue
          }else {
          }
          break
        }
        return m
      }else {
        if(cljs.core.coll_QMARK_.call(null, x)) {
          return cljs.core.apply.call(null, cljs.core.array, cljs.core.map.call(null, cljs.core._clj__GT_js, x))
        }else {
          if("\ufdd0:else") {
            return x
          }else {
            return null
          }
        }
      }
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  return cljs.core._clj__GT_js.call(null, x)
};
cljs.core.IEncodeClojure = {};
cljs.core._js__GT_clj = function() {
  var _js__GT_clj = null;
  var _js__GT_clj__1 = function(x) {
    if(function() {
      var and__3941__auto__ = x;
      if(and__3941__auto__) {
        return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$1
      }else {
        return and__3941__auto__
      }
    }()) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$1(x)
    }else {
      var x__4090__auto__ = x == null ? null : x;
      return function() {
        var or__3943__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._js__GT_clj["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js->clj", x);
          }
        }
      }().call(null, x)
    }
  };
  var _js__GT_clj__2 = function(x, options) {
    if(function() {
      var and__3941__auto__ = x;
      if(and__3941__auto__) {
        return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2
      }else {
        return and__3941__auto__
      }
    }()) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options)
    }else {
      var x__4090__auto__ = x == null ? null : x;
      return function() {
        var or__3943__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4090__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._js__GT_clj["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js->clj", x);
          }
        }
      }().call(null, x, options)
    }
  };
  _js__GT_clj = function(x, options) {
    switch(arguments.length) {
      case 1:
        return _js__GT_clj__1.call(this, x);
      case 2:
        return _js__GT_clj__2.call(this, x, options)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _js__GT_clj.cljs$lang$arity$1 = _js__GT_clj__1;
  _js__GT_clj.cljs$lang$arity$2 = _js__GT_clj__2;
  return _js__GT_clj
}();
cljs.core.IEncodeClojure["_"] = true;
cljs.core._js__GT_clj["_"] = function() {
  var G__6039 = null;
  var G__6039__1 = function(x) {
    return cljs.core._js__GT_clj.call(null, x, cljs.core.ObjMap.fromObject(["\ufdd0:keywordize-keys"], {"\ufdd0:keywordize-keys":false}))
  };
  var G__6039__2 = function(x, options) {
    var map__6034 = options;
    var map__6034__$1 = cljs.core.seq_QMARK_.call(null, map__6034) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6034) : map__6034;
    var keywordize_keys = cljs.core._lookup.call(null, map__6034__$1, "\ufdd0:keywordize-keys", null);
    var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
    var f = function(map__6034, map__6034__$1, keywordize_keys, keyfn) {
      return function thisfn(x__$1) {
        if(cljs.core.seq_QMARK_.call(null, x__$1)) {
          return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1))
        }else {
          if(cljs.core.coll_QMARK_.call(null, x__$1)) {
            return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1))
          }else {
            if(cljs.core.truth_(goog.isArray(x__$1))) {
              return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1))
            }else {
              if(cljs.core.type.call(null, x__$1) === Object) {
                return cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, function() {
                  var iter__4187__auto__ = function(map__6034, map__6034__$1, keywordize_keys, keyfn) {
                    return function iter__6037(s__6038) {
                      return new cljs.core.LazySeq(null, false, function(map__6034, map__6034__$1, keywordize_keys, keyfn) {
                        return function() {
                          var s__6038__$1 = s__6038;
                          while(true) {
                            var temp__4092__auto__ = cljs.core.seq.call(null, s__6038__$1);
                            if(temp__4092__auto__) {
                              var xs__4579__auto__ = temp__4092__auto__;
                              var k = cljs.core.first.call(null, xs__4579__auto__);
                              return cljs.core.cons.call(null, cljs.core.PersistentVector.fromArray([keyfn.call(null, k), thisfn.call(null, x__$1[k])], true), iter__6037.call(null, cljs.core.rest.call(null, s__6038__$1)))
                            }else {
                              return null
                            }
                            break
                          }
                        }
                      }(map__6034, map__6034__$1, keywordize_keys, keyfn), null)
                    }
                  }(map__6034, map__6034__$1, keywordize_keys, keyfn);
                  return iter__4187__auto__.call(null, cljs.core.js_keys.call(null, x__$1))
                }())
              }else {
                if("\ufdd0:else") {
                  return x__$1
                }else {
                  return null
                }
              }
            }
          }
        }
      }
    }(map__6034, map__6034__$1, keywordize_keys, keyfn);
    return f.call(null, x)
  };
  G__6039 = function(x, options) {
    switch(arguments.length) {
      case 1:
        return G__6039__1.call(this, x);
      case 2:
        return G__6039__2.call(this, x, options)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__6039
}();
cljs.core.js__GT_clj = function() {
  var js__GT_clj__delegate = function(x, opts) {
    return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts))
  };
  var js__GT_clj = function(x, var_args) {
    var opts = null;
    if(goog.isDef(var_args)) {
      opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return js__GT_clj__delegate.call(this, x, opts)
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = function(arglist__6040) {
    var x = cljs.core.first(arglist__6040);
    var opts = cljs.core.rest(arglist__6040);
    return js__GT_clj__delegate(x, opts)
  };
  js__GT_clj.cljs$lang$arity$variadic = js__GT_clj__delegate;
  return js__GT_clj
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  return function() {
    var G__6041__delegate = function(args) {
      var temp__4090__auto__ = cljs.core._lookup.call(null, cljs.core.deref.call(null, mem), args, null);
      if(cljs.core.truth_(temp__4090__auto__)) {
        var v = temp__4090__auto__;
        return v
      }else {
        var ret = cljs.core.apply.call(null, f, args);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
        return ret
      }
    };
    var G__6041 = function(var_args) {
      var args = null;
      if(goog.isDef(var_args)) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__6041__delegate.call(this, args)
    };
    G__6041.cljs$lang$maxFixedArity = 0;
    G__6041.cljs$lang$applyTo = function(arglist__6042) {
      var args = cljs.core.seq(arglist__6042);
      return G__6041__delegate(args)
    };
    G__6041.cljs$lang$arity$variadic = G__6041__delegate;
    return G__6041
  }()
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while(true) {
      var ret = f.call(null);
      if(cljs.core.fn_QMARK_.call(null, ret)) {
        var G__6043 = ret;
        f = G__6043;
        continue
      }else {
        return ret
      }
      break
    }
  };
  var trampoline__2 = function() {
    var G__6044__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args)
      })
    };
    var G__6044 = function(f, var_args) {
      var args = null;
      if(goog.isDef(var_args)) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__6044__delegate.call(this, f, args)
    };
    G__6044.cljs$lang$maxFixedArity = 1;
    G__6044.cljs$lang$applyTo = function(arglist__6045) {
      var f = cljs.core.first(arglist__6045);
      var args = cljs.core.rest(arglist__6045);
      return G__6044__delegate(f, args)
    };
    G__6044.cljs$lang$arity$variadic = G__6044__delegate;
    return G__6044
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$lang$arity$variadic(f, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$lang$arity$1 = trampoline__1;
  trampoline.cljs$lang$arity$variadic = trampoline__2.cljs$lang$arity$variadic;
  return trampoline
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1)
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$lang$arity$0 = rand__0;
  rand.cljs$lang$arity$1 = rand__1;
  return rand
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n)
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)))
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core._lookup.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x))
  }, cljs.core.ObjMap.EMPTY, coll)
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return cljs.core.ObjMap.fromObject(["\ufdd0:parents", "\ufdd0:descendants", "\ufdd0:ancestors"], {"\ufdd0:parents":cljs.core.ObjMap.EMPTY, "\ufdd0:descendants":cljs.core.ObjMap.EMPTY, "\ufdd0:ancestors":cljs.core.ObjMap.EMPTY})
};
cljs.core.global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.global_hierarchy), child, parent)
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3943__auto__ = cljs.core._EQ_.call(null, child, parent);
    if(or__3943__auto__) {
      return or__3943__auto__
    }else {
      var or__3943__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword("\ufdd0:ancestors")).call(null, h).call(null, child), parent);
      if(or__3943__auto____$1) {
        return or__3943__auto____$1
      }else {
        var and__3941__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if(and__3941__auto__) {
          var and__3941__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if(and__3941__auto____$1) {
            var and__3941__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if(and__3941__auto____$2) {
              var ret = true;
              var i = 0;
              while(true) {
                if(cljs.core.truth_(function() {
                  var or__3943__auto____$2 = cljs.core.not.call(null, ret);
                  if(or__3943__auto____$2) {
                    return or__3943__auto____$2
                  }else {
                    return i === cljs.core.count.call(null, parent)
                  }
                }())) {
                  return ret
                }else {
                  var G__6046 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__6047 = i + 1;
                  ret = G__6046;
                  i = G__6047;
                  continue
                }
                break
              }
            }else {
              return and__3941__auto____$2
            }
          }else {
            return and__3941__auto____$1
          }
        }else {
          return and__3941__auto__
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$lang$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$lang$arity$3 = isa_QMARK___3;
  return isa_QMARK_
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.global_hierarchy), tag)
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core._lookup.call(null, (new cljs.core.Keyword("\ufdd0:parents")).call(null, h), tag, null))
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$lang$arity$1 = parents__1;
  parents.cljs$lang$arity$2 = parents__2;
  return parents
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.global_hierarchy), tag)
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core._lookup.call(null, (new cljs.core.Keyword("\ufdd0:ancestors")).call(null, h), tag, null))
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$lang$arity$1 = ancestors__1;
  ancestors.cljs$lang$arity$2 = ancestors__2;
  return ancestors
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.global_hierarchy), tag)
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core._lookup.call(null, (new cljs.core.Keyword("\ufdd0:descendants")).call(null, h), tag, null))
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$lang$arity$1 = descendants__1;
  descendants.cljs$lang$arity$2 = descendants__2;
  return descendants
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if(cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'namespace", "\ufdd1'parent"), cljs.core.hash_map("\ufdd0:line", 7082, "\ufdd0:column", 12))))].join(""));
    }
    cljs.core.swap_BANG_.call(null, cljs.core.global_hierarchy, derive, tag, parent);
    return null
  };
  var derive__3 = function(h, tag, parent) {
    if(cljs.core.not_EQ_.call(null, tag, parent)) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'not=", "\ufdd1'tag", "\ufdd1'parent"), cljs.core.hash_map("\ufdd0:line", 7086, "\ufdd0:column", 12))))].join(""));
    }
    var tp = (new cljs.core.Keyword("\ufdd0:parents")).call(null, h);
    var td = (new cljs.core.Keyword("\ufdd0:descendants")).call(null, h);
    var ta = (new cljs.core.Keyword("\ufdd0:ancestors")).call(null, h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core._lookup.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))))
          }
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)))
      }
    }(tp, td, ta);
    var or__3943__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if(cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      }else {
      }
      if(cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      }else {
      }
      return cljs.core.ObjMap.fromObject(["\ufdd0:parents", "\ufdd0:ancestors", "\ufdd0:descendants"], {"\ufdd0:parents":cljs.core.assoc.call(null, (new cljs.core.Keyword("\ufdd0:parents")).call(null, h), tag, cljs.core.conj.call(null, cljs.core._lookup.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), "\ufdd0:ancestors":tf.call(null, (new cljs.core.Keyword("\ufdd0:ancestors")).call(null, h), tag, td, parent, ta), "\ufdd0:descendants":tf.call(null, (new cljs.core.Keyword("\ufdd0:descendants")).call(null, 
      h), parent, ta, tag, td)})
    }();
    if(cljs.core.truth_(or__3943__auto__)) {
      return or__3943__auto__
    }else {
      return h
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$lang$arity$2 = derive__2;
  derive.cljs$lang$arity$3 = derive__3;
  return derive
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_BANG_.call(null, cljs.core.global_hierarchy, underive, tag, parent);
    return null
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword("\ufdd0:parents")).call(null, h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__6048_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__6048_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__6048_SHARP_), cljs.core.second.call(null, p1__6048_SHARP_)))
      }
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if(cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(p1__6049_SHARP_, p2__6050_SHARP_) {
        return cljs.core.apply.call(null, cljs.core.derive, p1__6049_SHARP_, p2__6050_SHARP_)
      }, cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq))
    }else {
      return h
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$lang$arity$2 = underive__2;
  underive.cljs$lang$arity$3 = underive__3;
  return underive
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table)
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy)
  })
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3943__auto__ = cljs.core.truth_(function() {
    var and__3941__auto__ = xprefs;
    if(cljs.core.truth_(and__3941__auto__)) {
      return xprefs.call(null, y)
    }else {
      return and__3941__auto__
    }
  }()) ? true : null;
  if(cljs.core.truth_(or__3943__auto__)) {
    return or__3943__auto__
  }else {
    var or__3943__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while(true) {
        if(cljs.core.count.call(null, ps) > 0) {
          if(cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          }else {
          }
          var G__6051 = cljs.core.rest.call(null, ps);
          ps = G__6051;
          continue
        }else {
          return null
        }
        break
      }
    }();
    if(cljs.core.truth_(or__3943__auto____$1)) {
      return or__3943__auto____$1
    }else {
      var or__3943__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while(true) {
          if(cljs.core.count.call(null, ps) > 0) {
            if(cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            }else {
            }
            var G__6052 = cljs.core.rest.call(null, ps);
            ps = G__6052;
            continue
          }else {
            return null
          }
          break
        }
      }();
      if(cljs.core.truth_(or__3943__auto____$2)) {
        return or__3943__auto____$2
      }else {
        return false
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3943__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if(cljs.core.truth_(or__3943__auto__)) {
    return or__3943__auto__
  }else {
    return cljs.core.isa_QMARK_.call(null, x, y)
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__6055) {
    var vec__6056 = p__6055;
    var k = cljs.core.nth.call(null, vec__6056, 0, null);
    var _ = cljs.core.nth.call(null, vec__6056, 1, null);
    var e = vec__6056;
    if(cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3943__auto__ = be == null;
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table)
        }
      }()) ? e : be;
      if(cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      }else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -> "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2
    }else {
      return be
    }
  }, null, cljs.core.deref.call(null, method_table));
  if(cljs.core.truth_(best_entry)) {
    if(cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry)
    }else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy)
    }
  }else {
    return null
  }
};
cljs.core.IMultiFn = {};
cljs.core._reset = function _reset(mf) {
  if(function() {
    var and__3941__auto__ = mf;
    if(and__3941__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf)
  }else {
    var x__4090__auto__ = mf == null ? null : mf;
    return function() {
      var or__3943__auto__ = cljs.core._reset[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._reset["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf)
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if(function() {
    var and__3941__auto__ = mf;
    if(and__3941__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method)
  }else {
    var x__4090__auto__ = mf == null ? null : mf;
    return function() {
      var or__3943__auto__ = cljs.core._add_method[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._add_method["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method)
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if(function() {
    var and__3941__auto__ = mf;
    if(and__3941__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val)
  }else {
    var x__4090__auto__ = mf == null ? null : mf;
    return function() {
      var or__3943__auto__ = cljs.core._remove_method[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._remove_method["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val)
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if(function() {
    var and__3941__auto__ = mf;
    if(and__3941__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y)
  }else {
    var x__4090__auto__ = mf == null ? null : mf;
    return function() {
      var or__3943__auto__ = cljs.core._prefer_method[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._prefer_method["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y)
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if(function() {
    var and__3941__auto__ = mf;
    if(and__3941__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val)
  }else {
    var x__4090__auto__ = mf == null ? null : mf;
    return function() {
      var or__3943__auto__ = cljs.core._get_method[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._get_method["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val)
  }
};
cljs.core._methods = function _methods(mf) {
  if(function() {
    var and__3941__auto__ = mf;
    if(and__3941__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf)
  }else {
    var x__4090__auto__ = mf == null ? null : mf;
    return function() {
      var or__3943__auto__ = cljs.core._methods[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._methods["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf)
  }
};
cljs.core._prefers = function _prefers(mf) {
  if(function() {
    var and__3941__auto__ = mf;
    if(and__3941__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf)
  }else {
    var x__4090__auto__ = mf == null ? null : mf;
    return function() {
      var or__3943__auto__ = cljs.core._prefers[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._prefers["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf)
  }
};
cljs.core._dispatch = function _dispatch(mf, args) {
  if(function() {
    var and__3941__auto__ = mf;
    if(and__3941__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf, args)
  }else {
    var x__4090__auto__ = mf == null ? null : mf;
    return function() {
      var or__3943__auto__ = cljs.core._dispatch[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._dispatch["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-dispatch", mf);
        }
      }
    }().call(null, mf, args)
  }
};
cljs.core.do_dispatch = function do_dispatch(mf, dispatch_fn, args) {
  var dispatch_val = cljs.core.apply.call(null, dispatch_fn, args);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if(cljs.core.truth_(target_fn)) {
  }else {
    throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(cljs.core.name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
  }
  return cljs.core.apply.call(null, target_fn, args)
};
goog.provide("cljs.core.MultiFn");
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194304;
  this.cljs$lang$protocol_mask$partition1$ = 256
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/MultiFn")
};
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/MultiFn")
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  return goog.getUid(this$)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$1) {
    return cljs.core.ObjMap.EMPTY
  });
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$1) {
    return cljs.core.ObjMap.EMPTY
  });
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return cljs.core.ObjMap.EMPTY
  });
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$1) {
    return null
  });
  return mf
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  if(cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  }else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy)
  }
  var temp__4090__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if(cljs.core.truth_(temp__4090__auto__)) {
    var target_fn = temp__4090__auto__;
    return target_fn
  }else {
    var temp__4090__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if(cljs.core.truth_(temp__4090__auto____$1)) {
      var target_fn = temp__4090__auto____$1;
      return target_fn
    }else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val)
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  if(cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  }else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(old) {
    return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core._lookup.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y))
  });
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  return cljs.core.deref.call(null, self__.method_table)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  return cljs.core.deref.call(null, self__.prefer_table)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = function(mf, args) {
  var self__ = this;
  return cljs.core.do_dispatch.call(null, mf, self__.dispatch_fn, args)
};
cljs.core.MultiFn.prototype.call = function() {
  var G__6057__delegate = function(_, args) {
    var self = this;
    return cljs.core._dispatch.call(null, self, args)
  };
  var G__6057 = function(_, var_args) {
    var args = null;
    if(goog.isDef(var_args)) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return G__6057__delegate.call(this, _, args)
  };
  G__6057.cljs$lang$maxFixedArity = 1;
  G__6057.cljs$lang$applyTo = function(arglist__6058) {
    var _ = cljs.core.first(arglist__6058);
    var args = cljs.core.rest(arglist__6058);
    return G__6057__delegate(_, args)
  };
  G__6057.cljs$lang$arity$variadic = G__6057__delegate;
  return G__6057
}();
cljs.core.MultiFn.prototype.apply = function(_, args) {
  var self = this;
  return cljs.core._dispatch.call(null, self, args)
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn)
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val)
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y)
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn)
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val)
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn)
};
goog.provide("cljs.core.UUID");
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2690646016
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.core/UUID")
};
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.core/UUID")
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$))
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""))
};
cljs.core.UUID.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(_, ___$1) {
  var self__ = this;
  return cljs.core.list.call(null, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""))
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var and__3941__auto__ = cljs.core.instance_QMARK_.call(null, cljs.core.UUID, other);
  if(and__3941__auto__) {
    return self__.uuid === other.uuid
  }else {
    return and__3941__auto__
  }
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
goog.provide("cljs.core.ExceptionInfo");
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorPrSeq = function(this__4033__auto__) {
  return cljs.core.list.call(null, "cljs.core/ExceptionInfo")
};
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4033__auto__, writer__4034__auto__, opts__4035__auto__) {
  return cljs.core._write.call(null, writer__4034__auto__, "cljs.core/ExceptionInfo")
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null)
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause)
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$lang$arity$2 = ex_info__2;
  ex_info.cljs$lang$arity$3 = ex_info__3;
  return ex_info
}();
cljs.core.ex_data = function ex_data(ex) {
  if(cljs.core.instance_QMARK_.call(null, cljs.core.ExceptionInfo, ex)) {
    return ex.data
  }else {
    return null
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if(cljs.core.instance_QMARK_.call(null, Error, ex)) {
    return ex.message
  }else {
    return null
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if(cljs.core.instance_QMARK_.call(null, cljs.core.ExceptionInfo, ex)) {
    return ex.cause
  }else {
    return null
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if(cljs.core.truth_(pred.call(null, x, y))) {
      return-1
    }else {
      if(cljs.core.truth_(pred.call(null, y, x))) {
        return 1
      }else {
        if("\ufdd0:else") {
          return 0
        }else {
          return null
        }
      }
    }
  }
};
goog.provide("fogus.datalog.bacwn.impl.util");
goog.require("cljs.core");
fogus.datalog.bacwn.impl.util.separate = function separate(f, s) {
  return cljs.core.PersistentVector.fromArray([cljs.core.filter.call(null, f, s), cljs.core.filter.call(null, cljs.core.complement.call(null, f), s)], true)
};
fogus.datalog.bacwn.impl.util.is_var_QMARK_ = function is_var_QMARK_(sym) {
  if(cljs.core.symbol_QMARK_.call(null, sym)) {
    var name = cljs.core.name.call(null, sym);
    var and__3941__auto__ = cljs.core._EQ_.call(null, "?", cljs.core.first.call(null, name));
    if(and__3941__auto__) {
      return cljs.core.not_EQ_.call(null, "?", cljs.core.fnext.call(null, name))
    }else {
      return and__3941__auto__
    }
  }else {
    return null
  }
};
fogus.datalog.bacwn.impl.util.is_query_var_QMARK_ = function is_query_var_QMARK_(sym) {
  if(cljs.core.symbol_QMARK_.call(null, sym)) {
    var name = cljs.core.name.call(null, sym);
    var and__3941__auto__ = cljs.core._EQ_.call(null, "?", cljs.core.first.call(null, name));
    if(and__3941__auto__) {
      return cljs.core._EQ_.call(null, "?", cljs.core.fnext.call(null, name))
    }else {
      return and__3941__auto__
    }
  }else {
    return null
  }
};
fogus.datalog.bacwn.impl.util.map_values = function map_values(f, hash) {
  var key_vals = cljs.core.map.call(null, function(p__4619) {
    var vec__4620 = p__4619;
    var key = cljs.core.nth.call(null, vec__4620, 0, null);
    var val = cljs.core.nth.call(null, vec__4620, 1, null);
    return cljs.core.PersistentVector.fromArray([key, f.call(null, val)], true)
  }, hash);
  if(cljs.core.seq.call(null, key_vals)) {
    return cljs.core.apply.call(null, cljs.core.conj, cljs.core.empty.call(null, hash), key_vals)
  }else {
    return hash
  }
};
fogus.datalog.bacwn.impl.util.keys_to_vals = function keys_to_vals(m, ks) {
  return cljs.core.vals.call(null, cljs.core.select_keys.call(null, m, ks))
};
fogus.datalog.bacwn.impl.util.reverse_map = function reverse_map(m) {
  return cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, cljs.core.map.call(null, function(p__4624) {
    var vec__4625 = p__4624;
    var k = cljs.core.nth.call(null, vec__4625, 0, null);
    var v = cljs.core.nth.call(null, vec__4625, 1, null);
    return cljs.core.PersistentVector.fromArray([v, k], true)
  }, m))
};
fogus.datalog.bacwn.impl.util.preduce = function preduce(f, data) {
  var data_1 = cljs.core.map.call(null, function(h) {
    return fogus.datalog.bacwn.impl.util.map_values.call(null, function(p1__4621_SHARP_) {
      return cljs.core.list.call(null, p1__4621_SHARP_)
    }, h)
  }, data);
  var merged = cljs.core.doall.call(null, cljs.core.apply.call(null, cljs.core.merge_with, cljs.core.concat, data_1));
  var vec__4634 = fogus.datalog.bacwn.impl.util.separate.call(null, function(data_1, merged) {
    return function(p__4635) {
      var vec__4636 = p__4635;
      var key = cljs.core.nth.call(null, vec__4636, 0, null);
      var vals = cljs.core.nth.call(null, vec__4636, 1, null);
      return cljs.core.count.call(null, vals) > 1
    }
  }(data_1, merged), merged);
  var complex = cljs.core.nth.call(null, vec__4634, 0, null);
  var simple = cljs.core.nth.call(null, vec__4634, 1, null);
  var fold_group = function(data_1, merged, vec__4634, complex, simple) {
    return function(p__4637) {
      var vec__4638 = p__4637;
      var key = cljs.core.nth.call(null, vec__4638, 0, null);
      var vals = cljs.core.nth.call(null, vec__4638, 1, null);
      return cljs.core.PersistentArrayMap.fromArrays([key], [cljs.core.reduce.call(null, f, vals)])
    }
  }(data_1, merged, vec__4634, complex, simple);
  var fix_single = function(data_1, merged, vec__4634, complex, simple, fold_group) {
    return function(p__4639) {
      var vec__4640 = p__4639;
      var key = cljs.core.nth.call(null, vec__4640, 0, null);
      var vec__4641 = cljs.core.nth.call(null, vec__4640, 1, null);
      var val = cljs.core.nth.call(null, vec__4641, 0, null);
      return cljs.core.PersistentVector.fromArray([key, val], true)
    }
  }(data_1, merged, vec__4634, complex, simple, fold_group);
  return cljs.core.apply.call(null, cljs.core.merge, cljs.core.concat.call(null, cljs.core.map.call(null, fold_group, merged), cljs.core.map.call(null, fix_single, simple)))
};
goog.provide("clojure.set");
goog.require("cljs.core");
clojure.set.bubble_max_key = function bubble_max_key(k, coll) {
  var max = cljs.core.apply.call(null, cljs.core.max_key, k, coll);
  return cljs.core.cons.call(null, max, cljs.core.remove.call(null, function(p1__6059_SHARP_) {
    return max === p1__6059_SHARP_
  }, coll))
};
clojure.set.union = function() {
  var union = null;
  var union__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY
  };
  var union__1 = function(s1) {
    return s1
  };
  var union__2 = function(s1, s2) {
    if(cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
      return cljs.core.reduce.call(null, cljs.core.conj, s2, s1)
    }else {
      return cljs.core.reduce.call(null, cljs.core.conj, s1, s2)
    }
  };
  var union__3 = function() {
    var G__6061__delegate = function(s1, s2, sets) {
      var bubbled_sets = clojure.set.bubble_max_key.call(null, cljs.core.count, cljs.core.conj.call(null, sets, s2, s1));
      return cljs.core.reduce.call(null, cljs.core.into, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets))
    };
    var G__6061 = function(s1, s2, var_args) {
      var sets = null;
      if(goog.isDef(var_args)) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__6061__delegate.call(this, s1, s2, sets)
    };
    G__6061.cljs$lang$maxFixedArity = 2;
    G__6061.cljs$lang$applyTo = function(arglist__6062) {
      var s1 = cljs.core.first(arglist__6062);
      var s2 = cljs.core.first(cljs.core.next(arglist__6062));
      var sets = cljs.core.rest(cljs.core.next(arglist__6062));
      return G__6061__delegate(s1, s2, sets)
    };
    G__6061.cljs$lang$arity$variadic = G__6061__delegate;
    return G__6061
  }();
  union = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 0:
        return union__0.call(this);
      case 1:
        return union__1.call(this, s1);
      case 2:
        return union__2.call(this, s1, s2);
      default:
        return union__3.cljs$lang$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  union.cljs$lang$maxFixedArity = 2;
  union.cljs$lang$applyTo = union__3.cljs$lang$applyTo;
  union.cljs$lang$arity$0 = union__0;
  union.cljs$lang$arity$1 = union__1;
  union.cljs$lang$arity$2 = union__2;
  union.cljs$lang$arity$variadic = union__3.cljs$lang$arity$variadic;
  return union
}();
clojure.set.intersection = function() {
  var intersection = null;
  var intersection__1 = function(s1) {
    return s1
  };
  var intersection__2 = function(s1, s2) {
    while(true) {
      if(cljs.core.count.call(null, s2) < cljs.core.count.call(null, s1)) {
        var G__6063 = s2;
        var G__6064 = s1;
        s1 = G__6063;
        s2 = G__6064;
        continue
      }else {
        return cljs.core.reduce.call(null, function(s1, s2) {
          return function(result, item) {
            if(cljs.core.contains_QMARK_.call(null, s2, item)) {
              return result
            }else {
              return cljs.core.disj.call(null, result, item)
            }
          }
        }(s1, s2), s1, s1)
      }
      break
    }
  };
  var intersection__3 = function() {
    var G__6065__delegate = function(s1, s2, sets) {
      var bubbled_sets = clojure.set.bubble_max_key.call(null, function(p1__6060_SHARP_) {
        return-cljs.core.count.call(null, p1__6060_SHARP_)
      }, cljs.core.conj.call(null, sets, s2, s1));
      return cljs.core.reduce.call(null, intersection, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets))
    };
    var G__6065 = function(s1, s2, var_args) {
      var sets = null;
      if(goog.isDef(var_args)) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__6065__delegate.call(this, s1, s2, sets)
    };
    G__6065.cljs$lang$maxFixedArity = 2;
    G__6065.cljs$lang$applyTo = function(arglist__6066) {
      var s1 = cljs.core.first(arglist__6066);
      var s2 = cljs.core.first(cljs.core.next(arglist__6066));
      var sets = cljs.core.rest(cljs.core.next(arglist__6066));
      return G__6065__delegate(s1, s2, sets)
    };
    G__6065.cljs$lang$arity$variadic = G__6065__delegate;
    return G__6065
  }();
  intersection = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 1:
        return intersection__1.call(this, s1);
      case 2:
        return intersection__2.call(this, s1, s2);
      default:
        return intersection__3.cljs$lang$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  intersection.cljs$lang$maxFixedArity = 2;
  intersection.cljs$lang$applyTo = intersection__3.cljs$lang$applyTo;
  intersection.cljs$lang$arity$1 = intersection__1;
  intersection.cljs$lang$arity$2 = intersection__2;
  intersection.cljs$lang$arity$variadic = intersection__3.cljs$lang$arity$variadic;
  return intersection
}();
clojure.set.difference = function() {
  var difference = null;
  var difference__1 = function(s1) {
    return s1
  };
  var difference__2 = function(s1, s2) {
    if(cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
      return cljs.core.reduce.call(null, function(result, item) {
        if(cljs.core.contains_QMARK_.call(null, s2, item)) {
          return cljs.core.disj.call(null, result, item)
        }else {
          return result
        }
      }, s1, s1)
    }else {
      return cljs.core.reduce.call(null, cljs.core.disj, s1, s2)
    }
  };
  var difference__3 = function() {
    var G__6067__delegate = function(s1, s2, sets) {
      return cljs.core.reduce.call(null, difference, s1, cljs.core.conj.call(null, sets, s2))
    };
    var G__6067 = function(s1, s2, var_args) {
      var sets = null;
      if(goog.isDef(var_args)) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__6067__delegate.call(this, s1, s2, sets)
    };
    G__6067.cljs$lang$maxFixedArity = 2;
    G__6067.cljs$lang$applyTo = function(arglist__6068) {
      var s1 = cljs.core.first(arglist__6068);
      var s2 = cljs.core.first(cljs.core.next(arglist__6068));
      var sets = cljs.core.rest(cljs.core.next(arglist__6068));
      return G__6067__delegate(s1, s2, sets)
    };
    G__6067.cljs$lang$arity$variadic = G__6067__delegate;
    return G__6067
  }();
  difference = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 1:
        return difference__1.call(this, s1);
      case 2:
        return difference__2.call(this, s1, s2);
      default:
        return difference__3.cljs$lang$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  difference.cljs$lang$maxFixedArity = 2;
  difference.cljs$lang$applyTo = difference__3.cljs$lang$applyTo;
  difference.cljs$lang$arity$1 = difference__1;
  difference.cljs$lang$arity$2 = difference__2;
  difference.cljs$lang$arity$variadic = difference__3.cljs$lang$arity$variadic;
  return difference
}();
clojure.set.select = function select(pred, xset) {
  return cljs.core.reduce.call(null, function(s, k) {
    if(cljs.core.truth_(pred.call(null, k))) {
      return s
    }else {
      return cljs.core.disj.call(null, s, k)
    }
  }, xset, xset)
};
clojure.set.project = function project(xrel, ks) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__6069_SHARP_) {
    return cljs.core.select_keys.call(null, p1__6069_SHARP_, ks)
  }, xrel))
};
clojure.set.rename_keys = function rename_keys(map, kmap) {
  return cljs.core.reduce.call(null, function(m, p__6073) {
    var vec__6074 = p__6073;
    var old = cljs.core.nth.call(null, vec__6074, 0, null);
    var new$ = cljs.core.nth.call(null, vec__6074, 1, null);
    if(cljs.core.truth_(function() {
      var and__3941__auto__ = cljs.core.not_EQ_.call(null, old, new$);
      if(and__3941__auto__) {
        return cljs.core.contains_QMARK_.call(null, m, old)
      }else {
        return and__3941__auto__
      }
    }())) {
      return cljs.core.dissoc.call(null, cljs.core.assoc.call(null, m, new$, cljs.core._lookup.call(null, m, old, null)), old)
    }else {
      return m
    }
  }, map, kmap)
};
clojure.set.rename = function rename(xrel, kmap) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__6070_SHARP_) {
    return clojure.set.rename_keys.call(null, p1__6070_SHARP_, kmap)
  }, xrel))
};
clojure.set.index = function index(xrel, ks) {
  return cljs.core.reduce.call(null, function(m, x) {
    var ik = cljs.core.select_keys.call(null, x, ks);
    return cljs.core.assoc.call(null, m, ik, cljs.core.conj.call(null, cljs.core._lookup.call(null, m, ik, cljs.core.PersistentHashSet.EMPTY), x))
  }, cljs.core.ObjMap.EMPTY, xrel)
};
clojure.set.map_invert = function map_invert(m) {
  return cljs.core.reduce.call(null, function(m__$1, p__6081) {
    var vec__6082 = p__6081;
    var k = cljs.core.nth.call(null, vec__6082, 0, null);
    var v = cljs.core.nth.call(null, vec__6082, 1, null);
    return cljs.core.assoc.call(null, m__$1, v, k)
  }, cljs.core.ObjMap.EMPTY, m)
};
clojure.set.join = function() {
  var join = null;
  var join__2 = function(xrel, yrel) {
    if(cljs.core.truth_(function() {
      var and__3941__auto__ = cljs.core.seq.call(null, xrel);
      if(and__3941__auto__) {
        return cljs.core.seq.call(null, yrel)
      }else {
        return and__3941__auto__
      }
    }())) {
      var ks = clojure.set.intersection.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, xrel))), cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, yrel))));
      var vec__6086 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? cljs.core.PersistentVector.fromArray([xrel, yrel], true) : cljs.core.PersistentVector.fromArray([yrel, xrel], true);
      var r = cljs.core.nth.call(null, vec__6086, 0, null);
      var s = cljs.core.nth.call(null, vec__6086, 1, null);
      var idx = clojure.set.index.call(null, r, ks);
      return cljs.core.reduce.call(null, function(ret, x) {
        var found = idx.call(null, cljs.core.select_keys.call(null, x, ks));
        if(cljs.core.truth_(found)) {
          return cljs.core.reduce.call(null, function(p1__6075_SHARP_, p2__6076_SHARP_) {
            return cljs.core.conj.call(null, p1__6075_SHARP_, cljs.core.merge.call(null, p2__6076_SHARP_, x))
          }, ret, found)
        }else {
          return ret
        }
      }, cljs.core.PersistentHashSet.EMPTY, s)
    }else {
      return cljs.core.PersistentHashSet.EMPTY
    }
  };
  var join__3 = function(xrel, yrel, km) {
    var vec__6087 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? cljs.core.PersistentVector.fromArray([xrel, yrel, clojure.set.map_invert.call(null, km)], true) : cljs.core.PersistentVector.fromArray([yrel, xrel, km], true);
    var r = cljs.core.nth.call(null, vec__6087, 0, null);
    var s = cljs.core.nth.call(null, vec__6087, 1, null);
    var k = cljs.core.nth.call(null, vec__6087, 2, null);
    var idx = clojure.set.index.call(null, r, cljs.core.vals.call(null, k));
    return cljs.core.reduce.call(null, function(ret, x) {
      var found = idx.call(null, clojure.set.rename_keys.call(null, cljs.core.select_keys.call(null, x, cljs.core.keys.call(null, k)), k));
      if(cljs.core.truth_(found)) {
        return cljs.core.reduce.call(null, function(p1__6077_SHARP_, p2__6078_SHARP_) {
          return cljs.core.conj.call(null, p1__6077_SHARP_, cljs.core.merge.call(null, p2__6078_SHARP_, x))
        }, ret, found)
      }else {
        return ret
      }
    }, cljs.core.PersistentHashSet.EMPTY, s)
  };
  join = function(xrel, yrel, km) {
    switch(arguments.length) {
      case 2:
        return join__2.call(this, xrel, yrel);
      case 3:
        return join__3.call(this, xrel, yrel, km)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$lang$arity$2 = join__2;
  join.cljs$lang$arity$3 = join__3;
  return join
}();
clojure.set.subset_QMARK_ = function subset_QMARK_(set1, set2) {
  var and__3941__auto__ = cljs.core.count.call(null, set1) <= cljs.core.count.call(null, set2);
  if(and__3941__auto__) {
    return cljs.core.every_QMARK_.call(null, function(p1__6083_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, set2, p1__6083_SHARP_)
    }, set1)
  }else {
    return and__3941__auto__
  }
};
clojure.set.superset_QMARK_ = function superset_QMARK_(set1, set2) {
  var and__3941__auto__ = cljs.core.count.call(null, set1) >= cljs.core.count.call(null, set2);
  if(and__3941__auto__) {
    return cljs.core.every_QMARK_.call(null, function(p1__6088_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, set1, p1__6088_SHARP_)
    }, set2)
  }else {
    return and__3941__auto__
  }
};
goog.provide("fogus.datalog.bacwn.impl.database");
goog.require("cljs.core");
goog.require("clojure.set");
goog.require("fogus.datalog.bacwn.impl.util");
goog.provide("fogus.datalog.bacwn.impl.database.Relation");
fogus.datalog.bacwn.impl.database.Relation = function(schema, data, indexes, __meta, __extmap) {
  this.schema = schema;
  this.data = data;
  this.indexes = indexes;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if(arguments.length > 3) {
    this.__meta = __meta;
    this.__extmap = __extmap
  }else {
    this.__meta = null;
    this.__extmap = null
  }
};
fogus.datalog.bacwn.impl.database.Relation.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4043__auto__) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_imap.call(null, this__4043__auto__);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
fogus.datalog.bacwn.impl.database.Relation.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4048__auto__, k__4049__auto__) {
  var self__ = this;
  return this__4048__auto__.cljs$core$ILookup$_lookup$arity$3(this__4048__auto__, k__4049__auto__, null)
};
fogus.datalog.bacwn.impl.database.Relation.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4050__auto__, k4735, else__4051__auto__) {
  var self__ = this;
  if(k4735 === "\ufdd0:schema") {
    return self__.schema
  }else {
    if(k4735 === "\ufdd0:data") {
      return self__.data
    }else {
      if(k4735 === "\ufdd0:indexes") {
        return self__.indexes
      }else {
        if("\ufdd0:else") {
          return cljs.core._lookup.call(null, self__.__extmap, k4735, else__4051__auto__)
        }else {
          return null
        }
      }
    }
  }
};
fogus.datalog.bacwn.impl.database.Relation.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4055__auto__, k__4056__auto__, G__4734) {
  var self__ = this;
  var pred__4737 = cljs.core.identical_QMARK_;
  var expr__4738 = k__4056__auto__;
  if(pred__4737.call(null, "\ufdd0:schema", expr__4738)) {
    return new fogus.datalog.bacwn.impl.database.Relation(G__4734, self__.data, self__.indexes, self__.__meta, self__.__extmap, null)
  }else {
    if(pred__4737.call(null, "\ufdd0:data", expr__4738)) {
      return new fogus.datalog.bacwn.impl.database.Relation(self__.schema, G__4734, self__.indexes, self__.__meta, self__.__extmap, null)
    }else {
      if(pred__4737.call(null, "\ufdd0:indexes", expr__4738)) {
        return new fogus.datalog.bacwn.impl.database.Relation(self__.schema, self__.data, G__4734, self__.__meta, self__.__extmap, null)
      }else {
        return new fogus.datalog.bacwn.impl.database.Relation(self__.schema, self__.data, self__.indexes, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4056__auto__, G__4734), null)
      }
    }
  }
};
fogus.datalog.bacwn.impl.database.Relation.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4062__auto__, writer__4063__auto__, opts__4064__auto__) {
  var self__ = this;
  var pr_pair__4065__auto__ = function(keyval__4066__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__4063__auto__, cljs.core.pr_writer, "", " ", "", opts__4064__auto__, keyval__4066__auto__)
  };
  return cljs.core.pr_sequential_writer.call(null, writer__4063__auto__, pr_pair__4065__auto__, [cljs.core.str("#"), cljs.core.str("Relation"), cljs.core.str("{")].join(""), ", ", "}", opts__4064__auto__, cljs.core.concat.call(null, cljs.core.PersistentVector.fromArray([cljs.core.vector.call(null, "\ufdd0:schema", self__.schema), cljs.core.vector.call(null, "\ufdd0:data", self__.data), cljs.core.vector.call(null, "\ufdd0:indexes", self__.indexes)], true), self__.__extmap))
};
fogus.datalog.bacwn.impl.database.Relation.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4053__auto__, entry__4054__auto__) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry__4054__auto__)) {
    return this__4053__auto__.cljs$core$IAssociative$_assoc$arity$3(this__4053__auto__, cljs.core._nth.call(null, entry__4054__auto__, 0), cljs.core._nth.call(null, entry__4054__auto__, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4053__auto__, entry__4054__auto__)
  }
};
fogus.datalog.bacwn.impl.database.Relation.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.PersistentVector.fromArray([cljs.core.vector.call(null, "\ufdd0:schema", self__.schema), cljs.core.vector.call(null, "\ufdd0:data", self__.data), cljs.core.vector.call(null, "\ufdd0:indexes", self__.indexes)], true), self__.__extmap))
};
fogus.datalog.bacwn.impl.database.Relation.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4052__auto__) {
  var self__ = this;
  return 3 + cljs.core.count.call(null, self__.__extmap)
};
fogus.datalog.bacwn.impl.database.Relation.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4044__auto__, other__4045__auto__) {
  var self__ = this;
  if(cljs.core.truth_(function() {
    var and__3941__auto__ = other__4045__auto__;
    if(cljs.core.truth_(and__3941__auto__)) {
      var and__3941__auto____$1 = this__4044__auto__.constructor === other__4045__auto__.constructor;
      if(and__3941__auto____$1) {
        return cljs.core.equiv_map.call(null, this__4044__auto__, other__4045__auto__)
      }else {
        return and__3941__auto____$1
      }
    }else {
      return and__3941__auto__
    }
  }())) {
    return true
  }else {
    return false
  }
};
fogus.datalog.bacwn.impl.database.Relation.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4047__auto__, G__4734) {
  var self__ = this;
  return new fogus.datalog.bacwn.impl.database.Relation(self__.schema, self__.data, self__.indexes, G__4734, self__.__extmap, self__.__hash)
};
fogus.datalog.bacwn.impl.database.Relation.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4046__auto__) {
  var self__ = this;
  return self__.__meta
};
fogus.datalog.bacwn.impl.database.Relation.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4057__auto__, k__4058__auto__) {
  var self__ = this;
  if(cljs.core.contains_QMARK_.call(null, cljs.core.PersistentHashSet.fromArray(["\ufdd0:data", "\ufdd0:indexes", "\ufdd0:schema"]), k__4058__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, this__4057__auto__), self__.__meta), k__4058__auto__)
  }else {
    return new fogus.datalog.bacwn.impl.database.Relation(self__.schema, self__.data, self__.indexes, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4058__auto__)), null)
  }
};
fogus.datalog.bacwn.impl.database.Relation.cljs$lang$type = true;
fogus.datalog.bacwn.impl.database.Relation.cljs$lang$ctorPrSeq = function(this__4083__auto__) {
  return cljs.core.list.call(null, "fogus.datalog.bacwn.impl.database/Relation")
};
fogus.datalog.bacwn.impl.database.Relation.cljs$lang$ctorPrWriter = function(this__4083__auto__, writer__4084__auto__) {
  return cljs.core._write.call(null, writer__4084__auto__, "fogus.datalog.bacwn.impl.database/Relation")
};
fogus.datalog.bacwn.impl.database.__GT_Relation = function __GT_Relation(schema, data, indexes) {
  return new fogus.datalog.bacwn.impl.database.Relation(schema, data, indexes)
};
fogus.datalog.bacwn.impl.database.map__GT_Relation = function map__GT_Relation(G__4736) {
  return new fogus.datalog.bacwn.impl.database.Relation((new cljs.core.Keyword("\ufdd0:schema")).call(null, G__4736), (new cljs.core.Keyword("\ufdd0:data")).call(null, G__4736), (new cljs.core.Keyword("\ufdd0:indexes")).call(null, G__4736), null, cljs.core.dissoc.call(null, G__4736, "\ufdd0:schema", "\ufdd0:data", "\ufdd0:indexes"))
};
fogus.datalog.bacwn.impl.database.datalog_database = function datalog_database(rels) {
  return cljs.core.with_meta.call(null, rels, cljs.core.ObjMap.fromObject(["\ufdd0:type"], {"\ufdd0:type":"\ufdd0:fogus.datalog.bacwn.impl.database/datalog-database"}))
};
fogus.datalog.bacwn.impl.database.empty_database = fogus.datalog.bacwn.impl.database.datalog_database.call(null, cljs.core.ObjMap.EMPTY);
fogus.datalog.bacwn.impl.database.datalog_relation = function datalog_relation(schema, data, indexes) {
  return cljs.core.with_meta.call(null, fogus.datalog.bacwn.impl.database.__GT_Relation.call(null, schema, data, indexes), cljs.core.ObjMap.fromObject(["\ufdd0:type"], {"\ufdd0:type":"\ufdd0:fogus.datalog.bacwn.impl.database/datalog-relation"}))
};
fogus.datalog.bacwn.impl.database.add_relation = function add_relation(db, name, keys) {
  return cljs.core.assoc.call(null, db, name, fogus.datalog.bacwn.impl.database.datalog_relation.call(null, cljs.core.set.call(null, keys), cljs.core.PersistentHashSet.EMPTY, cljs.core.ObjMap.EMPTY))
};
fogus.datalog.bacwn.impl.database.add_index = function add_index(db, name, key) {
  if(cljs.core.empty_QMARK_.call(null, (new cljs.core.Keyword("\ufdd0:data")).call(null, db.call(null, name)))) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd0:data", cljs.core.with_meta(cljs.core.list("\ufdd1'db", "\ufdd1'name"), cljs.core.hash_map("\ufdd0:line", 49, "\ufdd0:column", 26))), cljs.core.hash_map("\ufdd0:line", 49, "\ufdd0:column", 19))), cljs.core.hash_map("\ufdd0:line", 49, "\ufdd0:column", 11))))].join(""));
  }
  var rel = db.call(null, name);
  var inx = cljs.core.assoc.call(null, (new cljs.core.Keyword("\ufdd0:indexes")).call(null, rel), key, cljs.core.ObjMap.EMPTY);
  return cljs.core.assoc.call(null, db, name, fogus.datalog.bacwn.impl.database.datalog_relation.call(null, (new cljs.core.Keyword("\ufdd0:schema")).call(null, rel), (new cljs.core.Keyword("\ufdd0:data")).call(null, rel), inx))
};
fogus.datalog.bacwn.impl.database.ensure_relation = function ensure_relation(db, name, keys, indexes) {
  var temp__4090__auto__ = db.call(null, name);
  if(cljs.core.truth_(temp__4090__auto__)) {
    var rel = temp__4090__auto__;
    if(cljs.core._EQ_.call(null, (new cljs.core.Keyword("\ufdd0:schema")).call(null, rel), cljs.core.set.call(null, keys))) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:schema", "\ufdd1'rel"), cljs.core.hash_map("\ufdd0:line", 61, "\ufdd0:column", 18)), cljs.core.with_meta(cljs.core.list("\ufdd1'set", "\ufdd1'keys"), cljs.core.hash_map("\ufdd0:line", 61, "\ufdd0:column", 32))), cljs.core.hash_map("\ufdd0:line", 61, "\ufdd0:column", 15))))].join(""));
    }
    return db
  }else {
    var db1 = fogus.datalog.bacwn.impl.database.add_relation.call(null, db, name, keys);
    return cljs.core.reduce.call(null, function(db__$1, key) {
      return fogus.datalog.bacwn.impl.database.add_index.call(null, db__$1, name, key)
    }, db1, indexes)
  }
};
fogus.datalog.bacwn.impl.database.get_relation = function get_relation(db, rel_name) {
  return db.call(null, rel_name)
};
fogus.datalog.bacwn.impl.database.replace_relation = function replace_relation(db, rel_name, rel) {
  return cljs.core.assoc.call(null, db, rel_name, rel)
};
fogus.datalog.bacwn.impl.database.database_counts = function database_counts(db) {
  return fogus.datalog.bacwn.impl.util.map_values.call(null, function(p1__4740_SHARP_) {
    return cljs.core.count.call(null, (new cljs.core.Keyword("\ufdd0:data")).call(null, p1__4740_SHARP_))
  }, db)
};
fogus.datalog.bacwn.impl.database.modify_indexes = function modify_indexes(idxs, tuple, f) {
  return cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, function() {
    var iter__4187__auto__ = function iter__4743(s__4744) {
      return new cljs.core.LazySeq(null, false, function() {
        var s__4744__$1 = s__4744;
        while(true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__4744__$1);
          if(temp__4092__auto__) {
            var xs__4579__auto__ = temp__4092__auto__;
            var ik = cljs.core.first.call(null, xs__4579__auto__);
            return cljs.core.cons.call(null, function() {
              var im = idxs.call(null, ik);
              var iv = tuple.call(null, ik);
              var os = cljs.core._lookup.call(null, im, iv, cljs.core.PersistentHashSet.EMPTY);
              var ns = f.call(null, os, tuple);
              return cljs.core.PersistentVector.fromArray([ik, cljs.core.empty_QMARK_.call(null, ns) ? cljs.core.dissoc.call(null, im, iv) : cljs.core.assoc.call(null, im, iv, f.call(null, os, tuple))], true)
            }(), iter__4743.call(null, cljs.core.rest.call(null, s__4744__$1)))
          }else {
            return null
          }
          break
        }
      }, null)
    };
    return iter__4187__auto__.call(null, cljs.core.keys.call(null, idxs))
  }())
};
fogus.datalog.bacwn.impl.database.add_to_indexes = function add_to_indexes(idxs, tuple) {
  return fogus.datalog.bacwn.impl.database.modify_indexes.call(null, idxs, tuple, cljs.core.conj)
};
fogus.datalog.bacwn.impl.database.remove_from_indexes = function remove_from_indexes(idxs, tuple) {
  return fogus.datalog.bacwn.impl.database.modify_indexes.call(null, idxs, tuple, cljs.core.disj)
};
fogus.datalog.bacwn.impl.database.add_tuple = function() {
  var add_tuple = null;
  var add_tuple__2 = function(rel, tuple) {
    var data = (new cljs.core.Keyword("\ufdd0:data")).call(null, rel);
    var new_data = cljs.core.conj.call(null, data, tuple);
    if(data === new_data) {
      return rel
    }else {
      var idxs = fogus.datalog.bacwn.impl.database.add_to_indexes.call(null, (new cljs.core.Keyword("\ufdd0:indexes")).call(null, rel), tuple);
      return cljs.core.assoc.call(null, rel, "\ufdd0:data", new_data, "\ufdd0:indexes", idxs)
    }
  };
  var add_tuple__3 = function(db, rel_name, tuple) {
    if(cljs.core._EQ_.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, tuple)), (new cljs.core.Keyword("\ufdd0:schema")).call(null, db.call(null, rel_name)))) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'->", "\ufdd1'tuple", "\ufdd1'keys", "\ufdd1'set"), cljs.core.hash_map("\ufdd0:line", 116, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list("\ufdd1'->", "\ufdd1'rel-name", "\ufdd1'db", "\ufdd0:schema"), cljs.core.hash_map("\ufdd0:line", 116, "\ufdd0:column", 37))), cljs.core.hash_map("\ufdd0:line", 116, 
      "\ufdd0:column", 14))))].join(""));
    }
    return cljs.core.assoc.call(null, db, rel_name, add_tuple.call(null, db.call(null, rel_name), tuple))
  };
  add_tuple = function(db, rel_name, tuple) {
    switch(arguments.length) {
      case 2:
        return add_tuple__2.call(this, db, rel_name);
      case 3:
        return add_tuple__3.call(this, db, rel_name, tuple)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  add_tuple.cljs$lang$arity$2 = add_tuple__2;
  add_tuple.cljs$lang$arity$3 = add_tuple__3;
  return add_tuple
}();
fogus.datalog.bacwn.impl.database.remove_tuple = function() {
  var remove_tuple = null;
  var remove_tuple__2 = function(rel, tuple) {
    var data = (new cljs.core.Keyword("\ufdd0:data")).call(null, rel);
    var new_data = cljs.core.disj.call(null, data, tuple);
    if(data === new_data) {
      return rel
    }else {
      var idxs = fogus.datalog.bacwn.impl.database.remove_from_indexes.call(null, (new cljs.core.Keyword("\ufdd0:indexes")).call(null, rel), tuple);
      return cljs.core.assoc.call(null, rel, "\ufdd0:data", new_data, "\ufdd0:indexes", idxs)
    }
  };
  var remove_tuple__3 = function(db, rel_name, tuple) {
    return cljs.core.assoc.call(null, db, rel_name, remove_tuple.call(null, db.call(null, rel_name), tuple))
  };
  remove_tuple = function(db, rel_name, tuple) {
    switch(arguments.length) {
      case 2:
        return remove_tuple__2.call(this, db, rel_name);
      case 3:
        return remove_tuple__3.call(this, db, rel_name, tuple)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_tuple.cljs$lang$arity$2 = remove_tuple__2;
  remove_tuple.cljs$lang$arity$3 = remove_tuple__3;
  return remove_tuple
}();
fogus.datalog.bacwn.impl.database.add_tuples = function() {
  var add_tuples__delegate = function(db, tupls) {
    return cljs.core.reduce.call(null, function(p1__4745_SHARP_, p2__4746_SHARP_) {
      return fogus.datalog.bacwn.impl.database.add_tuple.call(null, p1__4745_SHARP_, cljs.core.first.call(null, p2__4746_SHARP_), cljs.core.apply.call(null, cljs.core.hash_map, cljs.core.next.call(null, p2__4746_SHARP_)))
    }, db, tupls)
  };
  var add_tuples = function(db, var_args) {
    var tupls = null;
    if(goog.isDef(var_args)) {
      tupls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return add_tuples__delegate.call(this, db, tupls)
  };
  add_tuples.cljs$lang$maxFixedArity = 1;
  add_tuples.cljs$lang$applyTo = function(arglist__4747) {
    var db = cljs.core.first(arglist__4747);
    var tupls = cljs.core.rest(arglist__4747);
    return add_tuples__delegate(db, tupls)
  };
  add_tuples.cljs$lang$arity$variadic = add_tuples__delegate;
  return add_tuples
}();
fogus.datalog.bacwn.impl.database.find_indexes = function find_indexes(idxs, pt) {
  if(cljs.core.empty_QMARK_.call(null, idxs)) {
    return null
  }else {
    return cljs.core.filter.call(null, cljs.core.identity, function() {
      var iter__4187__auto__ = function iter__4750(s__4751) {
        return new cljs.core.LazySeq(null, false, function() {
          var s__4751__$1 = s__4751;
          while(true) {
            var temp__4092__auto__ = cljs.core.seq.call(null, s__4751__$1);
            if(temp__4092__auto__) {
              var xs__4579__auto__ = temp__4092__auto__;
              var key = cljs.core.first.call(null, xs__4579__auto__);
              return cljs.core.cons.call(null, function() {
                var temp__4090__auto__ = idxs.call(null, key);
                if(cljs.core.truth_(temp__4090__auto__)) {
                  var idx_map = temp__4090__auto__;
                  return cljs.core._lookup.call(null, idx_map, pt.call(null, key), cljs.core.PersistentHashSet.EMPTY)
                }else {
                  return null
                }
              }(), iter__4750.call(null, cljs.core.rest.call(null, s__4751__$1)))
            }else {
              return null
            }
            break
          }
        }, null)
      };
      return iter__4187__auto__.call(null, cljs.core.keys.call(null, pt))
    }())
  }
};
fogus.datalog.bacwn.impl.database.match_QMARK_ = function match_QMARK_(m1, m2) {
  var compare = function(key) {
    var and__3941__auto__ = cljs.core.contains_QMARK_.call(null, m1, key);
    if(and__3941__auto__) {
      return cljs.core._EQ_.call(null, m1.call(null, key), m2.call(null, key))
    }else {
      return and__3941__auto__
    }
  };
  return cljs.core.every_QMARK_.call(null, compare, cljs.core.keys.call(null, m2))
};
fogus.datalog.bacwn.impl.database.scan_space = function scan_space(fun, db, rn, pt) {
  var rel = db.call(null, rn);
  var idxs = fogus.datalog.bacwn.impl.database.find_indexes.call(null, (new cljs.core.Keyword("\ufdd0:indexes")).call(null, rel), pt);
  var space = cljs.core.empty_QMARK_.call(null, idxs) ? (new cljs.core.Keyword("\ufdd0:data")).call(null, rel) : cljs.core.reduce.call(null, clojure.set.intersection, idxs);
  return fun.call(null, function(p1__4752_SHARP_) {
    return fogus.datalog.bacwn.impl.database.match_QMARK_.call(null, p1__4752_SHARP_, pt)
  }, space)
};
fogus.datalog.bacwn.impl.database.select = function select(db, rn, pt) {
  return fogus.datalog.bacwn.impl.database.scan_space.call(null, cljs.core.filter, db, rn, pt)
};
fogus.datalog.bacwn.impl.database.any_match_QMARK_ = function any_match_QMARK_(db, rn, pt) {
  if(cljs.core._EQ_.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, pt)), (new cljs.core.Keyword("\ufdd0:schema")).call(null, db.call(null, rn)))) {
    return cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword("\ufdd0:data")).call(null, db.call(null, rn)), pt)
  }else {
    return fogus.datalog.bacwn.impl.database.scan_space.call(null, cljs.core.some, db, rn, pt)
  }
};
fogus.datalog.bacwn.impl.database.merge_indexes = function merge_indexes(idx1, idx2) {
  return cljs.core.merge_with.call(null, function(h1, h2) {
    return cljs.core.merge_with.call(null, clojure.set.union, h1, h2)
  }, idx1, idx2)
};
fogus.datalog.bacwn.impl.database.merge_relations = function merge_relations(r1, r2) {
  if(cljs.core._EQ_.call(null, (new cljs.core.Keyword("\ufdd0:schema")).call(null, r1), (new cljs.core.Keyword("\ufdd0:schema")).call(null, r2))) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:schema", "\ufdd1'r1"), cljs.core.hash_map("\ufdd0:line", 202, "\ufdd0:column", 14)), cljs.core.with_meta(cljs.core.list("\ufdd0:schema", "\ufdd1'r2"), cljs.core.hash_map("\ufdd0:line", 202, "\ufdd0:column", 27))), cljs.core.hash_map("\ufdd0:line", 202, "\ufdd0:column", 11))))].join(""));
  }
  var merged_indexes = fogus.datalog.bacwn.impl.database.merge_indexes.call(null, (new cljs.core.Keyword("\ufdd0:indexes")).call(null, r1), (new cljs.core.Keyword("\ufdd0:indexes")).call(null, r2));
  var merged_data = clojure.set.union.call(null, (new cljs.core.Keyword("\ufdd0:data")).call(null, r1), (new cljs.core.Keyword("\ufdd0:data")).call(null, r2));
  return cljs.core.assoc.call(null, r1, "\ufdd0:data", merged_data, "\ufdd0:indexes", merged_indexes)
};
fogus.datalog.bacwn.impl.database.database_merge = function database_merge(dbs) {
  return cljs.core.apply.call(null, cljs.core.merge_with, fogus.datalog.bacwn.impl.database.merge_relations, dbs)
};
fogus.datalog.bacwn.impl.database.database_merge_parallel = function database_merge_parallel(dbs) {
  return fogus.datalog.bacwn.impl.util.preduce.call(null, fogus.datalog.bacwn.impl.database.merge_relations, dbs)
};
goog.provide("fogus.datalog.bacwn.impl.graph");
goog.require("cljs.core");
goog.require("clojure.set");
goog.provide("fogus.datalog.bacwn.impl.graph.DirectedGraph");
fogus.datalog.bacwn.impl.graph.DirectedGraph = function(nodes, neighbors, __meta, __extmap) {
  this.nodes = nodes;
  this.neighbors = neighbors;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if(arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap
  }else {
    this.__meta = null;
    this.__extmap = null
  }
};
fogus.datalog.bacwn.impl.graph.DirectedGraph.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4043__auto__) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_imap.call(null, this__4043__auto__);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
fogus.datalog.bacwn.impl.graph.DirectedGraph.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4048__auto__, k__4049__auto__) {
  var self__ = this;
  return this__4048__auto__.cljs$core$ILookup$_lookup$arity$3(this__4048__auto__, k__4049__auto__, null)
};
fogus.datalog.bacwn.impl.graph.DirectedGraph.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4050__auto__, k4643, else__4051__auto__) {
  var self__ = this;
  if(k4643 === "\ufdd0:nodes") {
    return self__.nodes
  }else {
    if(k4643 === "\ufdd0:neighbors") {
      return self__.neighbors
    }else {
      if("\ufdd0:else") {
        return cljs.core._lookup.call(null, self__.__extmap, k4643, else__4051__auto__)
      }else {
        return null
      }
    }
  }
};
fogus.datalog.bacwn.impl.graph.DirectedGraph.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4055__auto__, k__4056__auto__, G__4642) {
  var self__ = this;
  var pred__4645 = cljs.core.identical_QMARK_;
  var expr__4646 = k__4056__auto__;
  if(pred__4645.call(null, "\ufdd0:nodes", expr__4646)) {
    return new fogus.datalog.bacwn.impl.graph.DirectedGraph(G__4642, self__.neighbors, self__.__meta, self__.__extmap, null)
  }else {
    if(pred__4645.call(null, "\ufdd0:neighbors", expr__4646)) {
      return new fogus.datalog.bacwn.impl.graph.DirectedGraph(self__.nodes, G__4642, self__.__meta, self__.__extmap, null)
    }else {
      return new fogus.datalog.bacwn.impl.graph.DirectedGraph(self__.nodes, self__.neighbors, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4056__auto__, G__4642), null)
    }
  }
};
fogus.datalog.bacwn.impl.graph.DirectedGraph.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4062__auto__, writer__4063__auto__, opts__4064__auto__) {
  var self__ = this;
  var pr_pair__4065__auto__ = function(keyval__4066__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__4063__auto__, cljs.core.pr_writer, "", " ", "", opts__4064__auto__, keyval__4066__auto__)
  };
  return cljs.core.pr_sequential_writer.call(null, writer__4063__auto__, pr_pair__4065__auto__, [cljs.core.str("#"), cljs.core.str("DirectedGraph"), cljs.core.str("{")].join(""), ", ", "}", opts__4064__auto__, cljs.core.concat.call(null, cljs.core.PersistentVector.fromArray([cljs.core.vector.call(null, "\ufdd0:nodes", self__.nodes), cljs.core.vector.call(null, "\ufdd0:neighbors", self__.neighbors)], true), self__.__extmap))
};
fogus.datalog.bacwn.impl.graph.DirectedGraph.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4053__auto__, entry__4054__auto__) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry__4054__auto__)) {
    return this__4053__auto__.cljs$core$IAssociative$_assoc$arity$3(this__4053__auto__, cljs.core._nth.call(null, entry__4054__auto__, 0), cljs.core._nth.call(null, entry__4054__auto__, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4053__auto__, entry__4054__auto__)
  }
};
fogus.datalog.bacwn.impl.graph.DirectedGraph.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.PersistentVector.fromArray([cljs.core.vector.call(null, "\ufdd0:nodes", self__.nodes), cljs.core.vector.call(null, "\ufdd0:neighbors", self__.neighbors)], true), self__.__extmap))
};
fogus.datalog.bacwn.impl.graph.DirectedGraph.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4052__auto__) {
  var self__ = this;
  return 2 + cljs.core.count.call(null, self__.__extmap)
};
fogus.datalog.bacwn.impl.graph.DirectedGraph.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4044__auto__, other__4045__auto__) {
  var self__ = this;
  if(cljs.core.truth_(function() {
    var and__3941__auto__ = other__4045__auto__;
    if(cljs.core.truth_(and__3941__auto__)) {
      var and__3941__auto____$1 = this__4044__auto__.constructor === other__4045__auto__.constructor;
      if(and__3941__auto____$1) {
        return cljs.core.equiv_map.call(null, this__4044__auto__, other__4045__auto__)
      }else {
        return and__3941__auto____$1
      }
    }else {
      return and__3941__auto__
    }
  }())) {
    return true
  }else {
    return false
  }
};
fogus.datalog.bacwn.impl.graph.DirectedGraph.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4047__auto__, G__4642) {
  var self__ = this;
  return new fogus.datalog.bacwn.impl.graph.DirectedGraph(self__.nodes, self__.neighbors, G__4642, self__.__extmap, self__.__hash)
};
fogus.datalog.bacwn.impl.graph.DirectedGraph.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4046__auto__) {
  var self__ = this;
  return self__.__meta
};
fogus.datalog.bacwn.impl.graph.DirectedGraph.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4057__auto__, k__4058__auto__) {
  var self__ = this;
  if(cljs.core.contains_QMARK_.call(null, cljs.core.PersistentHashSet.fromArray(["\ufdd0:neighbors", "\ufdd0:nodes"]), k__4058__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, this__4057__auto__), self__.__meta), k__4058__auto__)
  }else {
    return new fogus.datalog.bacwn.impl.graph.DirectedGraph(self__.nodes, self__.neighbors, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4058__auto__)), null)
  }
};
fogus.datalog.bacwn.impl.graph.DirectedGraph.cljs$lang$type = true;
fogus.datalog.bacwn.impl.graph.DirectedGraph.cljs$lang$ctorPrSeq = function(this__4083__auto__) {
  return cljs.core.list.call(null, "fogus.datalog.bacwn.impl.graph/DirectedGraph")
};
fogus.datalog.bacwn.impl.graph.DirectedGraph.cljs$lang$ctorPrWriter = function(this__4083__auto__, writer__4084__auto__) {
  return cljs.core._write.call(null, writer__4084__auto__, "fogus.datalog.bacwn.impl.graph/DirectedGraph")
};
fogus.datalog.bacwn.impl.graph.__GT_DirectedGraph = function __GT_DirectedGraph(nodes, neighbors) {
  return new fogus.datalog.bacwn.impl.graph.DirectedGraph(nodes, neighbors)
};
fogus.datalog.bacwn.impl.graph.map__GT_DirectedGraph = function map__GT_DirectedGraph(G__4644) {
  return new fogus.datalog.bacwn.impl.graph.DirectedGraph((new cljs.core.Keyword("\ufdd0:nodes")).call(null, G__4644), (new cljs.core.Keyword("\ufdd0:neighbors")).call(null, G__4644), null, cljs.core.dissoc.call(null, G__4644, "\ufdd0:nodes", "\ufdd0:neighbors"))
};
fogus.datalog.bacwn.impl.graph.get_neighbors = function get_neighbors(g, n) {
  return(new cljs.core.Keyword("\ufdd0:neighbors")).call(null, g).call(null, n)
};
fogus.datalog.bacwn.impl.graph.reverse_graph = function reverse_graph(g) {
  var op = function(rna, idx) {
    var ns = fogus.datalog.bacwn.impl.graph.get_neighbors.call(null, g, idx);
    var am = function(ns) {
      return function(m, val) {
        return cljs.core.assoc.call(null, m, val, cljs.core.conj.call(null, cljs.core._lookup.call(null, m, val, cljs.core.PersistentHashSet.EMPTY), idx))
      }
    }(ns);
    return cljs.core.reduce.call(null, am, rna, ns)
  };
  var rn = cljs.core.reduce.call(null, op, cljs.core.ObjMap.EMPTY, (new cljs.core.Keyword("\ufdd0:nodes")).call(null, g));
  return fogus.datalog.bacwn.impl.graph.__GT_DirectedGraph.call(null, (new cljs.core.Keyword("\ufdd0:nodes")).call(null, g), rn)
};
fogus.datalog.bacwn.impl.graph.add_loops = function add_loops(g) {
  return fogus.datalog.bacwn.impl.graph.__GT_DirectedGraph.call(null, (new cljs.core.Keyword("\ufdd0:nodes")).call(null, g), cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, cljs.core.map.call(null, function(n) {
    return cljs.core.PersistentVector.fromArray([n, cljs.core.conj.call(null, cljs.core.set.call(null, fogus.datalog.bacwn.impl.graph.get_neighbors.call(null, g, n)), n)], true)
  }, (new cljs.core.Keyword("\ufdd0:nodes")).call(null, g))))
};
fogus.datalog.bacwn.impl.graph.remove_loops = function remove_loops(g) {
  return fogus.datalog.bacwn.impl.graph.__GT_DirectedGraph.call(null, (new cljs.core.Keyword("\ufdd0:nodes")).call(null, g), cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, cljs.core.map.call(null, function(n) {
    return cljs.core.PersistentVector.fromArray([n, cljs.core.disj.call(null, cljs.core.set.call(null, fogus.datalog.bacwn.impl.graph.get_neighbors.call(null, g, n)), n)], true)
  }, (new cljs.core.Keyword("\ufdd0:nodes")).call(null, g))))
};
fogus.datalog.bacwn.impl.graph.lazy_walk = function() {
  var lazy_walk = null;
  var lazy_walk__2 = function(g, n) {
    return lazy_walk.call(null, g, cljs.core.PersistentVector.fromArray([n], true), cljs.core.PersistentHashSet.EMPTY)
  };
  var lazy_walk__3 = function(g, ns, v) {
    return new cljs.core.LazySeq(null, false, function() {
      var s = cljs.core.seq.call(null, cljs.core.drop_while.call(null, v, ns));
      var n = cljs.core.first.call(null, s);
      var ns__$1 = cljs.core.rest.call(null, s);
      if(s) {
        return cljs.core.cons.call(null, n, lazy_walk.call(null, g, cljs.core.concat.call(null, fogus.datalog.bacwn.impl.graph.get_neighbors.call(null, g, n), ns__$1), cljs.core.conj.call(null, v, n)))
      }else {
        return null
      }
    }, null)
  };
  lazy_walk = function(g, ns, v) {
    switch(arguments.length) {
      case 2:
        return lazy_walk__2.call(this, g, ns);
      case 3:
        return lazy_walk__3.call(this, g, ns, v)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  lazy_walk.cljs$lang$arity$2 = lazy_walk__2;
  lazy_walk.cljs$lang$arity$3 = lazy_walk__3;
  return lazy_walk
}();
fogus.datalog.bacwn.impl.graph.transitive_closure = function transitive_closure(g) {
  var nns = function(n) {
    return cljs.core.PersistentVector.fromArray([n, new cljs.core.Delay(cljs.core.atom.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:done", "\ufdd0:value"], {"\ufdd0:done":false, "\ufdd0:value":null})), function() {
      return fogus.datalog.bacwn.impl.graph.lazy_walk.call(null, g, fogus.datalog.bacwn.impl.graph.get_neighbors.call(null, g, n), cljs.core.PersistentHashSet.EMPTY)
    })], true)
  };
  var nbs = cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, cljs.core.map.call(null, nns, (new cljs.core.Keyword("\ufdd0:nodes")).call(null, g)));
  return fogus.datalog.bacwn.impl.graph.__GT_DirectedGraph.call(null, (new cljs.core.Keyword("\ufdd0:nodes")).call(null, g), function(n) {
    return cljs.core.force.call(null, nbs.call(null, n))
  })
};
fogus.datalog.bacwn.impl.graph.post_ordered_visit = function post_ordered_visit(g, n, p__4650) {
  var vec__4653 = p__4650;
  var visited = cljs.core.nth.call(null, vec__4653, 0, null);
  var acc = cljs.core.nth.call(null, vec__4653, 1, null);
  var state = vec__4653;
  if(cljs.core.truth_(visited.call(null, n))) {
    return state
  }else {
    var vec__4654 = cljs.core.reduce.call(null, function(st, nd) {
      return post_ordered_visit.call(null, g, nd, st)
    }, cljs.core.PersistentVector.fromArray([cljs.core.conj.call(null, visited, n), acc], true), fogus.datalog.bacwn.impl.graph.get_neighbors.call(null, g, n));
    var v2 = cljs.core.nth.call(null, vec__4654, 0, null);
    var acc2 = cljs.core.nth.call(null, vec__4654, 1, null);
    return cljs.core.PersistentVector.fromArray([v2, cljs.core.conj.call(null, acc2, n)], true)
  }
};
fogus.datalog.bacwn.impl.graph.post_ordered_nodes = function post_ordered_nodes(g) {
  return cljs.core.fnext.call(null, cljs.core.reduce.call(null, function(p1__4649_SHARP_, p2__4648_SHARP_) {
    return fogus.datalog.bacwn.impl.graph.post_ordered_visit.call(null, g, p2__4648_SHARP_, p1__4649_SHARP_)
  }, cljs.core.PersistentVector.fromArray([cljs.core.PersistentHashSet.EMPTY, cljs.core.PersistentVector.EMPTY], true), (new cljs.core.Keyword("\ufdd0:nodes")).call(null, g)))
};
fogus.datalog.bacwn.impl.graph.scc = function scc(g) {
  var po = cljs.core.reverse.call(null, fogus.datalog.bacwn.impl.graph.post_ordered_nodes.call(null, g));
  var rev = fogus.datalog.bacwn.impl.graph.reverse_graph.call(null, g);
  var step = function(po, rev) {
    return function(stack, visited, acc) {
      while(true) {
        if(cljs.core.empty_QMARK_.call(null, stack)) {
          return acc
        }else {
          var vec__4657 = fogus.datalog.bacwn.impl.graph.post_ordered_visit.call(null, rev, cljs.core.first.call(null, stack), cljs.core.PersistentVector.fromArray([visited, cljs.core.PersistentHashSet.EMPTY], true));
          var nv = cljs.core.nth.call(null, vec__4657, 0, null);
          var comp = cljs.core.nth.call(null, vec__4657, 1, null);
          var ns = cljs.core.remove.call(null, nv, stack);
          var G__4658 = ns;
          var G__4659 = nv;
          var G__4660 = cljs.core.conj.call(null, acc, comp);
          stack = G__4658;
          visited = G__4659;
          acc = G__4660;
          continue
        }
        break
      }
    }
  }(po, rev);
  return step.call(null, po, cljs.core.PersistentHashSet.EMPTY, cljs.core.PersistentVector.EMPTY)
};
fogus.datalog.bacwn.impl.graph.component_graph = function() {
  var component_graph = null;
  var component_graph__1 = function(g) {
    return component_graph.call(null, g, fogus.datalog.bacwn.impl.graph.scc.call(null, g))
  };
  var component_graph__2 = function(g, sccs) {
    var find_node_set = function(n) {
      return cljs.core.some.call(null, function(p1__4655_SHARP_) {
        if(cljs.core.truth_(p1__4655_SHARP_.call(null, n))) {
          return p1__4655_SHARP_
        }else {
          return null
        }
      }, sccs)
    };
    var find_neighbors = function(find_node_set) {
      return function(ns) {
        var nbs1 = cljs.core.map.call(null, cljs.core.partial.call(null, fogus.datalog.bacwn.impl.graph.get_neighbors, g), ns);
        var nbs2 = cljs.core.map.call(null, cljs.core.set, nbs1);
        var nbs3 = cljs.core.apply.call(null, clojure.set.union, nbs2);
        return cljs.core.set.call(null, cljs.core.map.call(null, find_node_set, nbs3))
      }
    }(find_node_set);
    var nm = cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, cljs.core.map.call(null, function(find_node_set, find_neighbors) {
      return function(ns) {
        return cljs.core.PersistentVector.fromArray([ns, find_neighbors.call(null, ns)], true)
      }
    }(find_node_set, find_neighbors), sccs));
    return fogus.datalog.bacwn.impl.graph.__GT_DirectedGraph.call(null, cljs.core.set.call(null, sccs), nm)
  };
  component_graph = function(g, sccs) {
    switch(arguments.length) {
      case 1:
        return component_graph__1.call(this, g);
      case 2:
        return component_graph__2.call(this, g, sccs)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  component_graph.cljs$lang$arity$1 = component_graph__1;
  component_graph.cljs$lang$arity$2 = component_graph__2;
  return component_graph
}();
fogus.datalog.bacwn.impl.graph.recursive_component_QMARK_ = function recursive_component_QMARK_(g, ns) {
  var or__3943__auto__ = cljs.core.count.call(null, ns) > 1;
  if(or__3943__auto__) {
    return or__3943__auto__
  }else {
    var n = cljs.core.first.call(null, ns);
    return cljs.core.some.call(null, function(p1__4661_SHARP_) {
      return cljs.core._EQ_.call(null, p1__4661_SHARP_, n)
    }, fogus.datalog.bacwn.impl.graph.get_neighbors.call(null, g, n))
  }
};
fogus.datalog.bacwn.impl.graph.self_recursive_sets = function self_recursive_sets(g) {
  return cljs.core.filter.call(null, cljs.core.partial.call(null, fogus.datalog.bacwn.impl.graph.recursive_component_QMARK_, g), fogus.datalog.bacwn.impl.graph.scc.call(null, g))
};
fogus.datalog.bacwn.impl.graph.fixed_point = function fixed_point(data, fun, max, equal) {
  var step = function step(data__$1, idx) {
    while(true) {
      if(cljs.core.truth_(function() {
        var and__3941__auto__ = idx;
        if(cljs.core.truth_(and__3941__auto__)) {
          return cljs.core._EQ_.call(null, 0, idx)
        }else {
          return and__3941__auto__
        }
      }())) {
        throw new Error("Fixed point overflow");
      }else {
      }
      var new_data = fun.call(null, data__$1);
      if(cljs.core.truth_(equal.call(null, data__$1, new_data))) {
        return new_data
      }else {
        var G__4662 = new_data;
        var G__4663 = function() {
          var and__3941__auto__ = idx;
          if(cljs.core.truth_(and__3941__auto__)) {
            return idx - 1
          }else {
            return and__3941__auto__
          }
        }();
        data__$1 = G__4662;
        idx = G__4663;
        continue
      }
      break
    }
  };
  return step.call(null, data, max)
};
fogus.datalog.bacwn.impl.graph.fold_into_sets = function fold_into_sets(priorities) {
  var max = cljs.core.apply.call(null, cljs.core.max, 0, cljs.core.vals.call(null, priorities)) + 1;
  var step = function(max) {
    return function(acc, p__4666) {
      var vec__4667 = p__4666;
      var n = cljs.core.nth.call(null, vec__4667, 0, null);
      var dep = cljs.core.nth.call(null, vec__4667, 1, null);
      return cljs.core.assoc.call(null, acc, dep, cljs.core.conj.call(null, acc.call(null, dep), n))
    }
  }(max);
  return cljs.core.reduce.call(null, step, cljs.core.vec.call(null, cljs.core.replicate.call(null, max, cljs.core.PersistentHashSet.EMPTY)), priorities)
};
fogus.datalog.bacwn.impl.graph.dependency_list = function dependency_list(g) {
  var step = function(d) {
    var update = function(n) {
      return cljs.core.apply.call(null, cljs.core.max, -1, cljs.core.map.call(null, d, fogus.datalog.bacwn.impl.graph.get_neighbors.call(null, g, n))) + 1
    };
    return cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, cljs.core.map.call(null, function(update) {
      return function(p__4670) {
        var vec__4671 = p__4670;
        var k = cljs.core.nth.call(null, vec__4671, 0, null);
        var v = cljs.core.nth.call(null, vec__4671, 1, null);
        return cljs.core.PersistentVector.fromArray([k, update.call(null, k)], true)
      }
    }(update), d))
  };
  var counts = fogus.datalog.bacwn.impl.graph.fixed_point.call(null, cljs.core.zipmap.call(null, (new cljs.core.Keyword("\ufdd0:nodes")).call(null, g), cljs.core.repeat.call(null, 0)), step, cljs.core.count.call(null, (new cljs.core.Keyword("\ufdd0:nodes")).call(null, g)) + 1, cljs.core._EQ_);
  return fogus.datalog.bacwn.impl.graph.fold_into_sets.call(null, counts)
};
fogus.datalog.bacwn.impl.graph.stratification_list = function stratification_list(g1, g2) {
  if(cljs.core._EQ_.call(null, cljs.core.set.call(null, (new cljs.core.Keyword("\ufdd0:nodes")).call(null, g1)), cljs.core.set.call(null, (new cljs.core.Keyword("\ufdd0:nodes")).call(null, g2)))) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'->", "\ufdd1'g1", "\ufdd0:nodes", "\ufdd1'set"), cljs.core.hash_map("\ufdd0:line", 211, "\ufdd0:column", 14)), cljs.core.with_meta(cljs.core.list("\ufdd1'->", "\ufdd1'g2", "\ufdd0:nodes", "\ufdd1'set"), cljs.core.hash_map("\ufdd0:line", 211, "\ufdd0:column", 33))), cljs.core.hash_map("\ufdd0:line", 211, "\ufdd0:column", 
    11))))].join(""));
  }
  var step = function(d) {
    var update = function(n) {
      return cljs.core.apply.call(null, cljs.core.max, -1, cljs.core.map.call(null, d, fogus.datalog.bacwn.impl.graph.get_neighbors.call(null, g1, n))) + 1 > cljs.core.apply.call(null, cljs.core.max, -1, cljs.core.map.call(null, d, fogus.datalog.bacwn.impl.graph.get_neighbors.call(null, g2, n))) ? cljs.core.apply.call(null, cljs.core.max, -1, cljs.core.map.call(null, d, fogus.datalog.bacwn.impl.graph.get_neighbors.call(null, g1, n))) + 1 : cljs.core.apply.call(null, cljs.core.max, -1, cljs.core.map.call(null, 
      d, fogus.datalog.bacwn.impl.graph.get_neighbors.call(null, g2, n)))
    };
    return cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, cljs.core.map.call(null, function(update) {
      return function(p__4674) {
        var vec__4675 = p__4674;
        var k = cljs.core.nth.call(null, vec__4675, 0, null);
        var v = cljs.core.nth.call(null, vec__4675, 1, null);
        return cljs.core.PersistentVector.fromArray([k, update.call(null, k)], true)
      }
    }(update), d))
  };
  var counts = fogus.datalog.bacwn.impl.graph.fixed_point.call(null, cljs.core.zipmap.call(null, (new cljs.core.Keyword("\ufdd0:nodes")).call(null, g1), cljs.core.repeat.call(null, 0)), step, cljs.core.count.call(null, (new cljs.core.Keyword("\ufdd0:nodes")).call(null, g1)) + 1, cljs.core._EQ_);
  return fogus.datalog.bacwn.impl.graph.fold_into_sets.call(null, counts)
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
cljs.reader.PushbackReader = {};
cljs.reader.read_char = function read_char(reader) {
  if(function() {
    var and__3941__auto__ = reader;
    if(and__3941__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader)
  }else {
    var x__4090__auto__ = reader == null ? null : reader;
    return function() {
      var or__3943__auto__ = cljs.reader.read_char[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.reader.read_char["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader)
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if(function() {
    var and__3941__auto__ = reader;
    if(and__3941__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch)
  }else {
    var x__4090__auto__ = reader == null ? null : reader;
    return function() {
      var or__3943__auto__ = cljs.reader.unread[goog.typeOf(x__4090__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.reader.unread["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch)
  }
};
goog.provide("cljs.reader.StringPushbackReader");
cljs.reader.StringPushbackReader = function(s, index_atom, buffer_atom) {
  this.s = s;
  this.index_atom = index_atom;
  this.buffer_atom = buffer_atom
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorPrSeq = function(this__4030__auto__) {
  return cljs.core.list.call(null, "cljs.reader/StringPushbackReader")
};
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4030__auto__, writer__4031__auto__, opt__4032__auto__) {
  return cljs.core._write.call(null, writer__4031__auto__, "cljs.reader/StringPushbackReader")
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  if(cljs.core.empty_QMARK_.call(null, cljs.core.deref.call(null, self__.buffer_atom))) {
    var idx = cljs.core.deref.call(null, self__.index_atom);
    cljs.core.swap_BANG_.call(null, self__.index_atom, cljs.core.inc);
    return self__.s[idx]
  }else {
    var buf = cljs.core.deref.call(null, self__.buffer_atom);
    cljs.core.swap_BANG_.call(null, self__.buffer_atom, cljs.core.rest);
    return cljs.core.first.call(null, buf)
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  return cljs.core.swap_BANG_.call(null, self__.buffer_atom, function(p1__6089_SHARP_) {
    return cljs.core.cons.call(null, ch, p1__6089_SHARP_)
  })
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, cljs.core.atom.call(null, 0), cljs.core.atom.call(null, null))
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3943__auto__ = goog.string.isBreakingWhitespace(ch);
  if(cljs.core.truth_(or__3943__auto__)) {
    return or__3943__auto__
  }else {
    return"," === ch
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch)
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return";" === ch
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  var or__3943__auto__ = cljs.reader.numeric_QMARK_.call(null, initch);
  if(or__3943__auto__) {
    return or__3943__auto__
  }else {
    var and__3941__auto__ = function() {
      var or__3943__auto____$1 = "+" === initch;
      if(or__3943__auto____$1) {
        return or__3943__auto____$1
      }else {
        return"-" === initch
      }
    }();
    if(cljs.core.truth_(and__3941__auto__)) {
      return cljs.reader.numeric_QMARK_.call(null, function() {
        var next_ch = cljs.reader.read_char.call(null, reader);
        cljs.reader.unread.call(null, reader, next_ch);
        return next_ch
      }())
    }else {
      return and__3941__auto__
    }
  }
};
cljs.reader.read = undefined;
cljs.reader.macros = undefined;
cljs.reader.dispatch_macros = undefined;
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if(goog.isDef(var_args)) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return reader_error__delegate.call(this, rdr, msg)
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__6090) {
    var rdr = cljs.core.first(arglist__6090);
    var msg = cljs.core.rest(arglist__6090);
    return reader_error__delegate(rdr, msg)
  };
  reader_error.cljs$lang$arity$variadic = reader_error__delegate;
  return reader_error
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3941__auto__ = !(ch === "#");
  if(and__3941__auto__) {
    var and__3941__auto____$1 = !(ch === "'");
    if(and__3941__auto____$1) {
      var and__3941__auto____$2 = !(ch === ":");
      if(and__3941__auto____$2) {
        return cljs.reader.macros.call(null, ch)
      }else {
        return and__3941__auto____$2
      }
    }else {
      return and__3941__auto____$1
    }
  }else {
    return and__3941__auto__
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while(true) {
    if(cljs.core.truth_(function() {
      var or__3943__auto__ = ch == null;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          return cljs.reader.macro_terminating_QMARK_.call(null, ch)
        }
      }
    }())) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString()
    }else {
      var G__6091 = function() {
        sb.append(ch);
        return sb
      }();
      var G__6092 = cljs.reader.read_char.call(null, rdr);
      sb = G__6091;
      ch = G__6092;
      continue
    }
    break
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while(true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if(cljs.core.truth_(function() {
      var or__3943__auto__ = ch === "n";
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = ch === "r";
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          return ch == null
        }
      }
    }())) {
      return reader
    }else {
      continue
    }
    break
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+)/([0-9]+)");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "[:]?([^0-9/].*/)?([^0-9/][^/]*)");
cljs.reader.re_find_STAR_ = function re_find_STAR_(re, s) {
  var matches = re.exec(s);
  if(matches == null) {
    return null
  }else {
    if(matches.length === 1) {
      return matches[0]
    }else {
      return matches
    }
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.int_pattern, s);
  var group3 = groups[2];
  if(cljs.core.not.call(null, function() {
    var or__3943__auto__ = group3 == null;
    if(or__3943__auto__) {
      return or__3943__auto__
    }else {
      return group3.length < 1
    }
  }())) {
    return 0
  }else {
    var negate = "-" === groups[1] ? -1 : 1;
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[7]) ? [groups[7], parseInt(groups[7])] : "\ufdd0:default" ? [null, null] : null;
    var n = a[0];
    var radix = a[1];
    if(n == null) {
      return null
    }else {
      return negate * parseInt(n, radix)
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator) / parseInt(denominator)
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s)
};
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if(cljs.core.truth_(function() {
    var and__3941__auto__ = !(matches == null);
    if(and__3941__auto__) {
      return matches[0] === s
    }else {
      return and__3941__auto__
    }
  }())) {
    if(matches.length === 1) {
      return matches[0]
    }else {
      return matches
    }
  }else {
    return null
  }
};
cljs.reader.match_number = function match_number(s) {
  if(cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s)
  }else {
    if(cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s)
    }else {
      if(cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s)
      }else {
        return null
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if(c === "t") {
    return"\t"
  }else {
    if(c === "r") {
      return"\r"
    }else {
      if(c === "n") {
        return"\n"
      }else {
        if(c === "\\") {
          return"\\"
        }else {
          if(c === '"') {
            return'"'
          }else {
            if(c === "b") {
              return"\b"
            }else {
              if(c === "f") {
                return"\f"
              }else {
                if("\ufdd0:else") {
                  return null
                }else {
                  return null
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString()
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString()
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{2}");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{4}");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if(cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str
  }else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str)
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code)
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if(cljs.core.truth_(mapresult)) {
    return mapresult
  }else {
    if(ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)))
    }else {
      if(ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)))
      }else {
        if(cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch)
        }else {
          if("\ufdd0:else") {
            return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch)
          }else {
            return null
          }
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while(true) {
    if(cljs.core.truth_(pred.call(null, ch))) {
      var G__6093 = cljs.reader.read_char.call(null, rdr);
      ch = G__6093;
      continue
    }else {
      return ch
    }
    break
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while(true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if(cljs.core.truth_(ch)) {
    }else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading")
    }
    if(delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a)
    }else {
      var temp__4090__auto__ = cljs.reader.macros.call(null, ch);
      if(cljs.core.truth_(temp__4090__auto__)) {
        var macrofn = temp__4090__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__6094 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__6094;
        continue
      }else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__6095 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__6095;
        continue
      }
    }
    break
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet")
};
cljs.reader.maybe_read_tagged_type = undefined;
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if(cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _)
  }else {
    var temp__4090__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if(cljs.core.truth_(temp__4090__auto__)) {
      var obj = temp__4090__auto__;
      return obj
    }else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch)
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch)
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true))
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true)
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if(cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms")
  }else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l)
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while(true) {
    if(cljs.core.truth_(function() {
      var or__3943__auto__ = ch == null;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          return cljs.reader.macros.call(null, ch)
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3943__auto__ = cljs.reader.match_number.call(null, s);
      if(cljs.core.truth_(or__3943__auto__)) {
        return or__3943__auto__
      }else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]")
      }
    }else {
      var G__6096 = function() {
        buffer.append(ch);
        return buffer
      }();
      var G__6097 = cljs.reader.read_char.call(null, reader);
      buffer = G__6096;
      ch = G__6097;
      continue
    }
    break
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while(true) {
    if(ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading")
    }else {
      if("\\" === ch) {
        var G__6098 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer
        }();
        var G__6099 = cljs.reader.read_char.call(null, reader);
        buffer = G__6098;
        ch = G__6099;
        continue
      }else {
        if('"' === ch) {
          return buffer.toString()
        }else {
          if("\ufdd0:default") {
            var G__6100 = function() {
              buffer.append(ch);
              return buffer
            }();
            var G__6101 = cljs.reader.read_char.call(null, reader);
            buffer = G__6100;
            ch = G__6101;
            continue
          }else {
            return null
          }
        }
      }
    }
    break
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if(t === "nil") {
    return null
  }else {
    if(t === "true") {
      return true
    }else {
      if(t === "false") {
        return false
      }else {
        if("\ufdd0:else") {
          return not_found
        }else {
          return null
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if(cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length))
  }else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token))
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if(cljs.core.truth_(function() {
    var or__3943__auto__ = function() {
      var and__3941__auto__ = !(void 0 === ns);
      if(and__3941__auto__) {
        return ns.substring(ns.length - 2, ns.length) === ":/"
      }else {
        return and__3941__auto__
      }
    }();
    if(cljs.core.truth_(or__3943__auto__)) {
      return or__3943__auto__
    }else {
      var or__3943__auto____$1 = name[name.length - 1] === ":";
      if(or__3943__auto____$1) {
        return or__3943__auto____$1
      }else {
        return!(token__$1.indexOf("::", 1) === -1)
      }
    }
  }())) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1)
  }else {
    if(cljs.core.truth_(function() {
      var and__3941__auto__ = !(ns == null);
      if(and__3941__auto__) {
        return ns.length > 0
      }else {
        return and__3941__auto__
      }
    }())) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name)
    }else {
      return cljs.core.keyword.call(null, token__$1)
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if(cljs.core.symbol_QMARK_.call(null, f)) {
    return cljs.core.ObjMap.fromObject(["\ufdd0:tag"], {"\ufdd0:tag":f})
  }else {
    if(cljs.core.string_QMARK_.call(null, f)) {
      return cljs.core.ObjMap.fromObject(["\ufdd0:tag"], {"\ufdd0:tag":f})
    }else {
      if(cljs.core.keyword_QMARK_.call(null, f)) {
        return cljs.core.PersistentArrayMap.fromArrays([f], [true])
      }else {
        if("\ufdd0:else") {
          return f
        }else {
          return null
        }
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core.list.call(null, sym, cljs.reader.read.call(null, rdr, true, null, true))
  }
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg)
  }
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if(cljs.core.map_QMARK_.call(null, m)) {
  }else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map")
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if(cljs.core.truth_(function() {
    var G__6103 = o;
    if(G__6103) {
      if(cljs.core.truth_(function() {
        var or__3943__auto__ = G__6103.cljs$lang$protocol_mask$partition0$ & 262144;
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          return G__6103.cljs$core$IWithMeta$
        }
      }())) {
        return true
      }else {
        if(!G__6103.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.IWithMeta, G__6103)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.IWithMeta, G__6103)
    }
  }())) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m))
  }else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas")
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true))
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_string_STAR_.call(null, rdr, ch))
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr
};
cljs.reader.macros = function macros(c) {
  if(c === '"') {
    return cljs.reader.read_string_STAR_
  }else {
    if(c === ":") {
      return cljs.reader.read_keyword
    }else {
      if(c === ";") {
        return cljs.reader.not_implemented
      }else {
        if(c === "'") {
          return cljs.reader.wrapping_reader.call(null, "\ufdd1'quote")
        }else {
          if(c === "@") {
            return cljs.reader.wrapping_reader.call(null, "\ufdd1'deref")
          }else {
            if(c === "^") {
              return cljs.reader.read_meta
            }else {
              if(c === "`") {
                return cljs.reader.not_implemented
              }else {
                if(c === "~") {
                  return cljs.reader.not_implemented
                }else {
                  if(c === "(") {
                    return cljs.reader.read_list
                  }else {
                    if(c === ")") {
                      return cljs.reader.read_unmatched_delimiter
                    }else {
                      if(c === "[") {
                        return cljs.reader.read_vector
                      }else {
                        if(c === "]") {
                          return cljs.reader.read_unmatched_delimiter
                        }else {
                          if(c === "{") {
                            return cljs.reader.read_map
                          }else {
                            if(c === "}") {
                              return cljs.reader.read_unmatched_delimiter
                            }else {
                              if(c === "\\") {
                                return cljs.reader.read_char
                              }else {
                                if(c === "%") {
                                  return cljs.reader.not_implemented
                                }else {
                                  if(c === "#") {
                                    return cljs.reader.read_dispatch
                                  }else {
                                    if("\ufdd0:else") {
                                      return null
                                    }else {
                                      return null
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if(s === "{") {
    return cljs.reader.read_set
  }else {
    if(s === "<") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form")
    }else {
      if(s === '"') {
        return cljs.reader.read_regex
      }else {
        if(s === "!") {
          return cljs.reader.read_comment
        }else {
          if(s === "_") {
            return cljs.reader.read_discard
          }else {
            if("\ufdd0:else") {
              return null
            }else {
              return null
            }
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while(true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if(ch == null) {
      if(cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading")
      }else {
        return sentinel
      }
    }else {
      if(cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__6104 = reader;
        var G__6105 = eof_is_error;
        var G__6106 = sentinel;
        var G__6107 = is_recursive;
        reader = G__6104;
        eof_is_error = G__6105;
        sentinel = G__6106;
        is_recursive = G__6107;
        continue
      }else {
        if(cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__6108 = cljs.reader.read_comment.call(null, reader, ch);
          var G__6109 = eof_is_error;
          var G__6110 = sentinel;
          var G__6111 = is_recursive;
          reader = G__6108;
          eof_is_error = G__6109;
          sentinel = G__6110;
          is_recursive = G__6111;
          continue
        }else {
          if("\ufdd0:else") {
            var f = cljs.reader.macros.call(null, ch);
            var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : "\ufdd0:else" ? cljs.reader.read_symbol.call(null, reader, ch) : null;
            if(res === reader) {
              var G__6112 = reader;
              var G__6113 = eof_is_error;
              var G__6114 = sentinel;
              var G__6115 = is_recursive;
              reader = G__6112;
              eof_is_error = G__6113;
              sentinel = G__6114;
              is_recursive = G__6115;
              continue
            }else {
              return res
            }
          }else {
            return null
          }
        }
      }
    }
    break
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, true, null, false)
};
cljs.reader.zero_fill_right = function zero_fill_right(s, width) {
  if(cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s
  }else {
    if(width < cljs.core.count.call(null, s)) {
      return s.substring(0, width)
    }else {
      if("\ufdd0:else") {
        var b = new goog.string.StringBuffer(s);
        while(true) {
          if(b.getLength() < width) {
            var G__6116 = b.append("0");
            b = G__6116;
            continue
          }else {
            return b.toString()
          }
          break
        }
      }else {
        return null
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return cljs.core.not.call(null, cljs.reader.divisible_QMARK_.call(null, num, div))
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  var and__3941__auto__ = cljs.reader.divisible_QMARK_.call(null, year, 4);
  if(cljs.core.truth_(and__3941__auto__)) {
    var or__3943__auto__ = cljs.reader.indivisible_QMARK_.call(null, year, 100);
    if(cljs.core.truth_(or__3943__auto__)) {
      return or__3943__auto__
    }else {
      return cljs.reader.divisible_QMARK_.call(null, year, 400)
    }
  }else {
    return and__3941__auto__
  }
};
cljs.reader.days_in_month = function() {
  var dim_norm = cljs.core.PersistentVector.fromArray([null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], true);
  var dim_leap = cljs.core.PersistentVector.fromArray([null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], true);
  return function(month, leap_year_QMARK_) {
    return cljs.core._lookup.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month, null)
  }
}();
cljs.reader.parse_and_validate_timestamp = function() {
  var timestamp = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
  var check = function(timestamp) {
    return function(low, n, high, msg) {
      if(cljs.core.truth_(function() {
        var and__3941__auto__ = low <= n;
        if(and__3941__auto__) {
          return n <= high
        }else {
          return and__3941__auto__
        }
      }())) {
      }else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("<="), cljs.core.str(n), cljs.core.str("<="), cljs.core.str(high)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'<=", "\ufdd1'low", "\ufdd1'n", "\ufdd1'high"), cljs.core.hash_map("\ufdd0:line", 474, "\ufdd0:column", 25))))].join(""));
      }
      return n
    }
  }(timestamp);
  return function(ts) {
    var temp__4092__auto__ = cljs.core.map.call(null, cljs.core.vec, cljs.core.split_at.call(null, 8, cljs.core.re_matches.call(null, timestamp, ts)));
    if(cljs.core.truth_(temp__4092__auto__)) {
      var vec__6121 = temp__4092__auto__;
      var vec__6122 = cljs.core.nth.call(null, vec__6121, 0, null);
      var _ = cljs.core.nth.call(null, vec__6122, 0, null);
      var years = cljs.core.nth.call(null, vec__6122, 1, null);
      var months = cljs.core.nth.call(null, vec__6122, 2, null);
      var days = cljs.core.nth.call(null, vec__6122, 3, null);
      var hours = cljs.core.nth.call(null, vec__6122, 4, null);
      var minutes = cljs.core.nth.call(null, vec__6122, 5, null);
      var seconds = cljs.core.nth.call(null, vec__6122, 6, null);
      var milliseconds = cljs.core.nth.call(null, vec__6122, 7, null);
      var vec__6123 = cljs.core.nth.call(null, vec__6121, 1, null);
      var ___$1 = cljs.core.nth.call(null, vec__6123, 0, null);
      var ___$2 = cljs.core.nth.call(null, vec__6123, 1, null);
      var ___$3 = cljs.core.nth.call(null, vec__6123, 2, null);
      var V = vec__6121;
      var vec__6124 = cljs.core.map.call(null, function(v) {
        return cljs.core.map.call(null, function(p1__6120_SHARP_) {
          return parseInt(p1__6120_SHARP_, 10)
        }, v)
      }, cljs.core.map.call(null, function(p1__6118_SHARP_, p2__6117_SHARP_) {
        return cljs.core.update_in.call(null, p2__6117_SHARP_, cljs.core.PersistentVector.fromArray([0], true), p1__6118_SHARP_)
      }, cljs.core.PersistentVector.fromArray([cljs.core.constantly.call(null, null), function(p1__6119_SHARP_) {
        if(cljs.core._EQ_.call(null, p1__6119_SHARP_, "-")) {
          return"-1"
        }else {
          return"1"
        }
      }], true), V));
      var vec__6125 = cljs.core.nth.call(null, vec__6124, 0, null);
      var ___$4 = cljs.core.nth.call(null, vec__6125, 0, null);
      var y = cljs.core.nth.call(null, vec__6125, 1, null);
      var mo = cljs.core.nth.call(null, vec__6125, 2, null);
      var d = cljs.core.nth.call(null, vec__6125, 3, null);
      var h = cljs.core.nth.call(null, vec__6125, 4, null);
      var m = cljs.core.nth.call(null, vec__6125, 5, null);
      var s = cljs.core.nth.call(null, vec__6125, 6, null);
      var ms = cljs.core.nth.call(null, vec__6125, 7, null);
      var vec__6126 = cljs.core.nth.call(null, vec__6124, 1, null);
      var offset_sign = cljs.core.nth.call(null, vec__6126, 0, null);
      var offset_hours = cljs.core.nth.call(null, vec__6126, 1, null);
      var offset_minutes = cljs.core.nth.call(null, vec__6126, 2, null);
      var offset = offset_sign * (offset_hours * 60 + offset_minutes);
      return cljs.core.PersistentVector.fromArray([cljs.core.not.call(null, years) ? 1970 : y, cljs.core.not.call(null, months) ? 1 : check.call(null, 1, mo, 12, "timestamp month field must be in range 1..12"), cljs.core.not.call(null, days) ? 1 : check.call(null, 1, d, cljs.reader.days_in_month.call(null, mo, cljs.reader.leap_year_QMARK_.call(null, y)), "timestamp day field must be in range 1..last day in month"), cljs.core.not.call(null, hours) ? 0 : check.call(null, 0, h, 23, "timestamp hour field must be in range 0..23"), 
      cljs.core.not.call(null, minutes) ? 0 : check.call(null, 0, m, 59, "timestamp minute field must be in range 0..59"), cljs.core.not.call(null, seconds) ? 0 : check.call(null, 0, s, cljs.core._EQ_.call(null, m, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.core.not.call(null, milliseconds) ? 0 : check.call(null, 0, ms, 999, "timestamp millisecond field must be in range 0..999"), offset], true)
    }else {
      return null
    }
  }
}();
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4090__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if(cljs.core.truth_(temp__4090__auto__)) {
    var vec__6128 = temp__4090__auto__;
    var years = cljs.core.nth.call(null, vec__6128, 0, null);
    var months = cljs.core.nth.call(null, vec__6128, 1, null);
    var days = cljs.core.nth.call(null, vec__6128, 2, null);
    var hours = cljs.core.nth.call(null, vec__6128, 3, null);
    var minutes = cljs.core.nth.call(null, vec__6128, 4, null);
    var seconds = cljs.core.nth.call(null, vec__6128, 5, null);
    var ms = cljs.core.nth.call(null, vec__6128, 6, null);
    var offset = cljs.core.nth.call(null, vec__6128, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3)
  }else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""))
  }
};
cljs.reader.read_date = function read_date(s) {
  if(cljs.core.string_QMARK_.call(null, s)) {
    return cljs.reader.parse_timestamp.call(null, s)
  }else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.")
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if(cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems)
  }else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.")
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if(cljs.core.string_QMARK_.call(null, uuid)) {
    return new cljs.core.UUID(uuid)
  }else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.")
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, cljs.core.ObjMap.fromObject(["inst", "uuid", "queue"], {"inst":cljs.reader.read_date, "uuid":cljs.reader.read_uuid, "queue":cljs.reader.read_queue}));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core._lookup.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""), null);
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if(cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false))
  }else {
    if(cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false))
    }else {
      if("\ufdd0:else") {
        return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))))
      }else {
        return null
      }
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core._lookup.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1, null);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core._lookup.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1, null);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return f
  });
  return old_parser
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return null
  });
  return old_parser
};
goog.provide("fogus.datalog.bacwn.impl.literals");
goog.require("cljs.core");
goog.require("clojure.set");
goog.require("fogus.datalog.bacwn.impl.database");
goog.require("fogus.datalog.bacwn.impl.util");
goog.provide("fogus.datalog.bacwn.impl.literals.AtomicLiteral");
fogus.datalog.bacwn.impl.literals.AtomicLiteral = function(predicate, term_bindings, literal_type, __meta, __extmap) {
  this.predicate = predicate;
  this.term_bindings = term_bindings;
  this.literal_type = literal_type;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if(arguments.length > 3) {
    this.__meta = __meta;
    this.__extmap = __extmap
  }else {
    this.__meta = null;
    this.__extmap = null
  }
};
fogus.datalog.bacwn.impl.literals.AtomicLiteral.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4043__auto__) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_imap.call(null, this__4043__auto__);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
fogus.datalog.bacwn.impl.literals.AtomicLiteral.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4048__auto__, k__4049__auto__) {
  var self__ = this;
  return this__4048__auto__.cljs$core$ILookup$_lookup$arity$3(this__4048__auto__, k__4049__auto__, null)
};
fogus.datalog.bacwn.impl.literals.AtomicLiteral.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4050__auto__, k4568, else__4051__auto__) {
  var self__ = this;
  if(k4568 === "\ufdd0:predicate") {
    return self__.predicate
  }else {
    if(k4568 === "\ufdd0:term-bindings") {
      return self__.term_bindings
    }else {
      if(k4568 === "\ufdd0:literal-type") {
        return self__.literal_type
      }else {
        if("\ufdd0:else") {
          return cljs.core._lookup.call(null, self__.__extmap, k4568, else__4051__auto__)
        }else {
          return null
        }
      }
    }
  }
};
fogus.datalog.bacwn.impl.literals.AtomicLiteral.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4055__auto__, k__4056__auto__, G__4567) {
  var self__ = this;
  var pred__4570 = cljs.core.identical_QMARK_;
  var expr__4571 = k__4056__auto__;
  if(pred__4570.call(null, "\ufdd0:predicate", expr__4571)) {
    return new fogus.datalog.bacwn.impl.literals.AtomicLiteral(G__4567, self__.term_bindings, self__.literal_type, self__.__meta, self__.__extmap, null)
  }else {
    if(pred__4570.call(null, "\ufdd0:term-bindings", expr__4571)) {
      return new fogus.datalog.bacwn.impl.literals.AtomicLiteral(self__.predicate, G__4567, self__.literal_type, self__.__meta, self__.__extmap, null)
    }else {
      if(pred__4570.call(null, "\ufdd0:literal-type", expr__4571)) {
        return new fogus.datalog.bacwn.impl.literals.AtomicLiteral(self__.predicate, self__.term_bindings, G__4567, self__.__meta, self__.__extmap, null)
      }else {
        return new fogus.datalog.bacwn.impl.literals.AtomicLiteral(self__.predicate, self__.term_bindings, self__.literal_type, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4056__auto__, G__4567), null)
      }
    }
  }
};
fogus.datalog.bacwn.impl.literals.AtomicLiteral.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4062__auto__, writer__4063__auto__, opts__4064__auto__) {
  var self__ = this;
  var pr_pair__4065__auto__ = function(keyval__4066__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__4063__auto__, cljs.core.pr_writer, "", " ", "", opts__4064__auto__, keyval__4066__auto__)
  };
  return cljs.core.pr_sequential_writer.call(null, writer__4063__auto__, pr_pair__4065__auto__, [cljs.core.str("#"), cljs.core.str("AtomicLiteral"), cljs.core.str("{")].join(""), ", ", "}", opts__4064__auto__, cljs.core.concat.call(null, cljs.core.PersistentVector.fromArray([cljs.core.vector.call(null, "\ufdd0:predicate", self__.predicate), cljs.core.vector.call(null, "\ufdd0:term-bindings", self__.term_bindings), cljs.core.vector.call(null, "\ufdd0:literal-type", self__.literal_type)], true), self__.__extmap))
};
fogus.datalog.bacwn.impl.literals.AtomicLiteral.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4053__auto__, entry__4054__auto__) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry__4054__auto__)) {
    return this__4053__auto__.cljs$core$IAssociative$_assoc$arity$3(this__4053__auto__, cljs.core._nth.call(null, entry__4054__auto__, 0), cljs.core._nth.call(null, entry__4054__auto__, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4053__auto__, entry__4054__auto__)
  }
};
fogus.datalog.bacwn.impl.literals.AtomicLiteral.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.PersistentVector.fromArray([cljs.core.vector.call(null, "\ufdd0:predicate", self__.predicate), cljs.core.vector.call(null, "\ufdd0:term-bindings", self__.term_bindings), cljs.core.vector.call(null, "\ufdd0:literal-type", self__.literal_type)], true), self__.__extmap))
};
fogus.datalog.bacwn.impl.literals.AtomicLiteral.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4052__auto__) {
  var self__ = this;
  return 3 + cljs.core.count.call(null, self__.__extmap)
};
fogus.datalog.bacwn.impl.literals.AtomicLiteral.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4044__auto__, other__4045__auto__) {
  var self__ = this;
  if(cljs.core.truth_(function() {
    var and__3941__auto__ = other__4045__auto__;
    if(cljs.core.truth_(and__3941__auto__)) {
      var and__3941__auto____$1 = this__4044__auto__.constructor === other__4045__auto__.constructor;
      if(and__3941__auto____$1) {
        return cljs.core.equiv_map.call(null, this__4044__auto__, other__4045__auto__)
      }else {
        return and__3941__auto____$1
      }
    }else {
      return and__3941__auto__
    }
  }())) {
    return true
  }else {
    return false
  }
};
fogus.datalog.bacwn.impl.literals.AtomicLiteral.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4047__auto__, G__4567) {
  var self__ = this;
  return new fogus.datalog.bacwn.impl.literals.AtomicLiteral(self__.predicate, self__.term_bindings, self__.literal_type, G__4567, self__.__extmap, self__.__hash)
};
fogus.datalog.bacwn.impl.literals.AtomicLiteral.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4046__auto__) {
  var self__ = this;
  return self__.__meta
};
fogus.datalog.bacwn.impl.literals.AtomicLiteral.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4057__auto__, k__4058__auto__) {
  var self__ = this;
  if(cljs.core.contains_QMARK_.call(null, cljs.core.PersistentHashSet.fromArray(["\ufdd0:literal-type", "\ufdd0:predicate", "\ufdd0:term-bindings"]), k__4058__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, this__4057__auto__), self__.__meta), k__4058__auto__)
  }else {
    return new fogus.datalog.bacwn.impl.literals.AtomicLiteral(self__.predicate, self__.term_bindings, self__.literal_type, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4058__auto__)), null)
  }
};
fogus.datalog.bacwn.impl.literals.AtomicLiteral.cljs$lang$type = true;
fogus.datalog.bacwn.impl.literals.AtomicLiteral.cljs$lang$ctorPrSeq = function(this__4083__auto__) {
  return cljs.core.list.call(null, "fogus.datalog.bacwn.impl.literals/AtomicLiteral")
};
fogus.datalog.bacwn.impl.literals.AtomicLiteral.cljs$lang$ctorPrWriter = function(this__4083__auto__, writer__4084__auto__) {
  return cljs.core._write.call(null, writer__4084__auto__, "fogus.datalog.bacwn.impl.literals/AtomicLiteral")
};
fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral = function __GT_AtomicLiteral(predicate, term_bindings, literal_type) {
  return new fogus.datalog.bacwn.impl.literals.AtomicLiteral(predicate, term_bindings, literal_type)
};
fogus.datalog.bacwn.impl.literals.map__GT_AtomicLiteral = function map__GT_AtomicLiteral(G__4569) {
  return new fogus.datalog.bacwn.impl.literals.AtomicLiteral((new cljs.core.Keyword("\ufdd0:predicate")).call(null, G__4569), (new cljs.core.Keyword("\ufdd0:term-bindings")).call(null, G__4569), (new cljs.core.Keyword("\ufdd0:literal-type")).call(null, G__4569), null, cljs.core.dissoc.call(null, G__4569, "\ufdd0:predicate", "\ufdd0:term-bindings", "\ufdd0:literal-type"))
};
cljs.core.derive.call(null, "\ufdd0:fogus.datalog.bacwn.impl.literals/negated", "\ufdd0:fogus.datalog.bacwn.impl.literals/literal");
goog.provide("fogus.datalog.bacwn.impl.literals.ConditionalLiteral");
fogus.datalog.bacwn.impl.literals.ConditionalLiteral = function(fun, symbol, terms, literal_type, __meta, __extmap) {
  this.fun = fun;
  this.symbol = symbol;
  this.terms = terms;
  this.literal_type = literal_type;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if(arguments.length > 4) {
    this.__meta = __meta;
    this.__extmap = __extmap
  }else {
    this.__meta = null;
    this.__extmap = null
  }
};
fogus.datalog.bacwn.impl.literals.ConditionalLiteral.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4043__auto__) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_imap.call(null, this__4043__auto__);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
fogus.datalog.bacwn.impl.literals.ConditionalLiteral.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4048__auto__, k__4049__auto__) {
  var self__ = this;
  return this__4048__auto__.cljs$core$ILookup$_lookup$arity$3(this__4048__auto__, k__4049__auto__, null)
};
fogus.datalog.bacwn.impl.literals.ConditionalLiteral.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4050__auto__, k4574, else__4051__auto__) {
  var self__ = this;
  if(k4574 === "\ufdd0:fun") {
    return self__.fun
  }else {
    if(k4574 === "\ufdd0:symbol") {
      return self__.symbol
    }else {
      if(k4574 === "\ufdd0:terms") {
        return self__.terms
      }else {
        if(k4574 === "\ufdd0:literal-type") {
          return self__.literal_type
        }else {
          if("\ufdd0:else") {
            return cljs.core._lookup.call(null, self__.__extmap, k4574, else__4051__auto__)
          }else {
            return null
          }
        }
      }
    }
  }
};
fogus.datalog.bacwn.impl.literals.ConditionalLiteral.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4055__auto__, k__4056__auto__, G__4573) {
  var self__ = this;
  var pred__4576 = cljs.core.identical_QMARK_;
  var expr__4577 = k__4056__auto__;
  if(pred__4576.call(null, "\ufdd0:fun", expr__4577)) {
    return new fogus.datalog.bacwn.impl.literals.ConditionalLiteral(G__4573, self__.symbol, self__.terms, self__.literal_type, self__.__meta, self__.__extmap, null)
  }else {
    if(pred__4576.call(null, "\ufdd0:symbol", expr__4577)) {
      return new fogus.datalog.bacwn.impl.literals.ConditionalLiteral(self__.fun, G__4573, self__.terms, self__.literal_type, self__.__meta, self__.__extmap, null)
    }else {
      if(pred__4576.call(null, "\ufdd0:terms", expr__4577)) {
        return new fogus.datalog.bacwn.impl.literals.ConditionalLiteral(self__.fun, self__.symbol, G__4573, self__.literal_type, self__.__meta, self__.__extmap, null)
      }else {
        if(pred__4576.call(null, "\ufdd0:literal-type", expr__4577)) {
          return new fogus.datalog.bacwn.impl.literals.ConditionalLiteral(self__.fun, self__.symbol, self__.terms, G__4573, self__.__meta, self__.__extmap, null)
        }else {
          return new fogus.datalog.bacwn.impl.literals.ConditionalLiteral(self__.fun, self__.symbol, self__.terms, self__.literal_type, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4056__auto__, G__4573), null)
        }
      }
    }
  }
};
fogus.datalog.bacwn.impl.literals.ConditionalLiteral.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4062__auto__, writer__4063__auto__, opts__4064__auto__) {
  var self__ = this;
  var pr_pair__4065__auto__ = function(keyval__4066__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__4063__auto__, cljs.core.pr_writer, "", " ", "", opts__4064__auto__, keyval__4066__auto__)
  };
  return cljs.core.pr_sequential_writer.call(null, writer__4063__auto__, pr_pair__4065__auto__, [cljs.core.str("#"), cljs.core.str("ConditionalLiteral"), cljs.core.str("{")].join(""), ", ", "}", opts__4064__auto__, cljs.core.concat.call(null, cljs.core.PersistentVector.fromArray([cljs.core.vector.call(null, "\ufdd0:fun", self__.fun), cljs.core.vector.call(null, "\ufdd0:symbol", self__.symbol), cljs.core.vector.call(null, "\ufdd0:terms", self__.terms), cljs.core.vector.call(null, "\ufdd0:literal-type", 
  self__.literal_type)], true), self__.__extmap))
};
fogus.datalog.bacwn.impl.literals.ConditionalLiteral.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4053__auto__, entry__4054__auto__) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry__4054__auto__)) {
    return this__4053__auto__.cljs$core$IAssociative$_assoc$arity$3(this__4053__auto__, cljs.core._nth.call(null, entry__4054__auto__, 0), cljs.core._nth.call(null, entry__4054__auto__, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4053__auto__, entry__4054__auto__)
  }
};
fogus.datalog.bacwn.impl.literals.ConditionalLiteral.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.PersistentVector.fromArray([cljs.core.vector.call(null, "\ufdd0:fun", self__.fun), cljs.core.vector.call(null, "\ufdd0:symbol", self__.symbol), cljs.core.vector.call(null, "\ufdd0:terms", self__.terms), cljs.core.vector.call(null, "\ufdd0:literal-type", self__.literal_type)], true), self__.__extmap))
};
fogus.datalog.bacwn.impl.literals.ConditionalLiteral.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4052__auto__) {
  var self__ = this;
  return 4 + cljs.core.count.call(null, self__.__extmap)
};
fogus.datalog.bacwn.impl.literals.ConditionalLiteral.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4044__auto__, other__4045__auto__) {
  var self__ = this;
  if(cljs.core.truth_(function() {
    var and__3941__auto__ = other__4045__auto__;
    if(cljs.core.truth_(and__3941__auto__)) {
      var and__3941__auto____$1 = this__4044__auto__.constructor === other__4045__auto__.constructor;
      if(and__3941__auto____$1) {
        return cljs.core.equiv_map.call(null, this__4044__auto__, other__4045__auto__)
      }else {
        return and__3941__auto____$1
      }
    }else {
      return and__3941__auto__
    }
  }())) {
    return true
  }else {
    return false
  }
};
fogus.datalog.bacwn.impl.literals.ConditionalLiteral.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4047__auto__, G__4573) {
  var self__ = this;
  return new fogus.datalog.bacwn.impl.literals.ConditionalLiteral(self__.fun, self__.symbol, self__.terms, self__.literal_type, G__4573, self__.__extmap, self__.__hash)
};
fogus.datalog.bacwn.impl.literals.ConditionalLiteral.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4046__auto__) {
  var self__ = this;
  return self__.__meta
};
fogus.datalog.bacwn.impl.literals.ConditionalLiteral.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4057__auto__, k__4058__auto__) {
  var self__ = this;
  if(cljs.core.contains_QMARK_.call(null, cljs.core.PersistentHashSet.fromArray(["\ufdd0:literal-type", "\ufdd0:symbol", "\ufdd0:fun", "\ufdd0:terms"]), k__4058__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, this__4057__auto__), self__.__meta), k__4058__auto__)
  }else {
    return new fogus.datalog.bacwn.impl.literals.ConditionalLiteral(self__.fun, self__.symbol, self__.terms, self__.literal_type, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4058__auto__)), null)
  }
};
fogus.datalog.bacwn.impl.literals.ConditionalLiteral.cljs$lang$type = true;
fogus.datalog.bacwn.impl.literals.ConditionalLiteral.cljs$lang$ctorPrSeq = function(this__4083__auto__) {
  return cljs.core.list.call(null, "fogus.datalog.bacwn.impl.literals/ConditionalLiteral")
};
fogus.datalog.bacwn.impl.literals.ConditionalLiteral.cljs$lang$ctorPrWriter = function(this__4083__auto__, writer__4084__auto__) {
  return cljs.core._write.call(null, writer__4084__auto__, "fogus.datalog.bacwn.impl.literals/ConditionalLiteral")
};
fogus.datalog.bacwn.impl.literals.__GT_ConditionalLiteral = function __GT_ConditionalLiteral(fun, symbol, terms, literal_type) {
  return new fogus.datalog.bacwn.impl.literals.ConditionalLiteral(fun, symbol, terms, literal_type)
};
fogus.datalog.bacwn.impl.literals.map__GT_ConditionalLiteral = function map__GT_ConditionalLiteral(G__4575) {
  return new fogus.datalog.bacwn.impl.literals.ConditionalLiteral((new cljs.core.Keyword("\ufdd0:fun")).call(null, G__4575), (new cljs.core.Keyword("\ufdd0:symbol")).call(null, G__4575), (new cljs.core.Keyword("\ufdd0:terms")).call(null, G__4575), (new cljs.core.Keyword("\ufdd0:literal-type")).call(null, G__4575), null, cljs.core.dissoc.call(null, G__4575, "\ufdd0:fun", "\ufdd0:symbol", "\ufdd0:terms", "\ufdd0:literal-type"))
};
fogus.datalog.bacwn.impl.literals.literal_predicate = function() {
  var method_table__4262__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var prefer_table__4263__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var method_cache__4264__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var cached_hierarchy__4265__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var hierarchy__4266__auto__ = cljs.core._lookup.call(null, cljs.core.ObjMap.EMPTY, "\ufdd0:hierarchy", cljs.core.global_hierarchy);
  return new cljs.core.MultiFn("literal-predicate", "\ufdd0:literal-type", "\ufdd0:default", hierarchy__4266__auto__, method_table__4262__auto__, prefer_table__4263__auto__, method_cache__4264__auto__, cached_hierarchy__4265__auto__)
}();
fogus.datalog.bacwn.impl.literals.literal_columns = function() {
  var method_table__4262__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var prefer_table__4263__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var method_cache__4264__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var cached_hierarchy__4265__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var hierarchy__4266__auto__ = cljs.core._lookup.call(null, cljs.core.ObjMap.EMPTY, "\ufdd0:hierarchy", cljs.core.global_hierarchy);
  return new cljs.core.MultiFn("literal-columns", "\ufdd0:literal-type", "\ufdd0:default", hierarchy__4266__auto__, method_table__4262__auto__, prefer_table__4263__auto__, method_cache__4264__auto__, cached_hierarchy__4265__auto__)
}();
fogus.datalog.bacwn.impl.literals.literal_vars = function() {
  var method_table__4262__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var prefer_table__4263__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var method_cache__4264__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var cached_hierarchy__4265__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var hierarchy__4266__auto__ = cljs.core._lookup.call(null, cljs.core.ObjMap.EMPTY, "\ufdd0:hierarchy", cljs.core.global_hierarchy);
  return new cljs.core.MultiFn("literal-vars", "\ufdd0:literal-type", "\ufdd0:default", hierarchy__4266__auto__, method_table__4262__auto__, prefer_table__4263__auto__, method_cache__4264__auto__, cached_hierarchy__4265__auto__)
}();
fogus.datalog.bacwn.impl.literals.positive_vars = function() {
  var method_table__4262__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var prefer_table__4263__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var method_cache__4264__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var cached_hierarchy__4265__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var hierarchy__4266__auto__ = cljs.core._lookup.call(null, cljs.core.ObjMap.EMPTY, "\ufdd0:hierarchy", cljs.core.global_hierarchy);
  return new cljs.core.MultiFn("positive-vars", "\ufdd0:literal-type", "\ufdd0:default", hierarchy__4266__auto__, method_table__4262__auto__, prefer_table__4263__auto__, method_cache__4264__auto__, cached_hierarchy__4265__auto__)
}();
fogus.datalog.bacwn.impl.literals.negative_vars = function() {
  var method_table__4262__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var prefer_table__4263__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var method_cache__4264__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var cached_hierarchy__4265__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var hierarchy__4266__auto__ = cljs.core._lookup.call(null, cljs.core.ObjMap.EMPTY, "\ufdd0:hierarchy", cljs.core.global_hierarchy);
  return new cljs.core.MultiFn("negative-vars", "\ufdd0:literal-type", "\ufdd0:default", hierarchy__4266__auto__, method_table__4262__auto__, prefer_table__4263__auto__, method_cache__4264__auto__, cached_hierarchy__4265__auto__)
}();
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.literal_predicate, "\ufdd0:fogus.datalog.bacwn.impl.literals/literal", function(l) {
  return(new cljs.core.Keyword("\ufdd0:predicate")).call(null, l)
});
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.literal_predicate, "\ufdd0:fogus.datalog.bacwn.impl.literals/conditional", function(l) {
  return null
});
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.literal_columns, "\ufdd0:fogus.datalog.bacwn.impl.literals/literal", function(l) {
  return cljs.core.set.call(null, cljs.core.keys.call(null, (new cljs.core.Keyword("\ufdd0:term-bindings")).call(null, l)))
});
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.literal_columns, "\ufdd0:fogus.datalog.bacwn.impl.literals/conditional", function(l) {
  return null
});
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.literal_vars, "\ufdd0:fogus.datalog.bacwn.impl.literals/literal", function(l) {
  return cljs.core.set.call(null, cljs.core.filter.call(null, fogus.datalog.bacwn.impl.util.is_var_QMARK_, cljs.core.vals.call(null, (new cljs.core.Keyword("\ufdd0:term-bindings")).call(null, l))))
});
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.literal_vars, "\ufdd0:fogus.datalog.bacwn.impl.literals/conditional", function(l) {
  return cljs.core.set.call(null, cljs.core.filter.call(null, fogus.datalog.bacwn.impl.util.is_var_QMARK_, (new cljs.core.Keyword("\ufdd0:terms")).call(null, l)))
});
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.positive_vars, "\ufdd0:fogus.datalog.bacwn.impl.literals/literal", function(l) {
  return fogus.datalog.bacwn.impl.literals.literal_vars.call(null, l)
});
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.positive_vars, "\ufdd0:fogus.datalog.bacwn.impl.literals/negated", function(l) {
  return null
});
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.positive_vars, "\ufdd0:fogus.datalog.bacwn.impl.literals/conditional", function(l) {
  return null
});
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.negative_vars, "\ufdd0:fogus.datalog.bacwn.impl.literals/literal", function(l) {
  return null
});
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.negative_vars, "\ufdd0:fogus.datalog.bacwn.impl.literals/negated", function(l) {
  return fogus.datalog.bacwn.impl.literals.literal_vars.call(null, l)
});
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.negative_vars, "\ufdd0:fogus.datalog.bacwn.impl.literals/conditional", function(l) {
  return fogus.datalog.bacwn.impl.literals.literal_vars.call(null, l)
});
fogus.datalog.bacwn.impl.literals.negated_QMARK_ = function negated_QMARK_(l) {
  return cljs.core._EQ_.call(null, (new cljs.core.Keyword("\ufdd0:literal-type")).call(null, l), "\ufdd0:fogus.datalog.bacwn.impl.literals/negated")
};
fogus.datalog.bacwn.impl.literals.positive_QMARK_ = function positive_QMARK_(l) {
  return cljs.core._EQ_.call(null, (new cljs.core.Keyword("\ufdd0:literal-type")).call(null, l), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")
};
fogus.datalog.bacwn.impl.literals.negation_symbol = "\ufdd1'not!";
fogus.datalog.bacwn.impl.literals.conditional_symbol = "\ufdd1'if";
fogus.datalog.bacwn.impl.literals.build_literal = function() {
  var method_table__4262__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var prefer_table__4263__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var method_cache__4264__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var cached_hierarchy__4265__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var hierarchy__4266__auto__ = cljs.core._lookup.call(null, cljs.core.ObjMap.EMPTY, "\ufdd0:hierarchy", cljs.core.global_hierarchy);
  return new cljs.core.MultiFn("build-literal", cljs.core.first, "\ufdd0:default", hierarchy__4266__auto__, method_table__4262__auto__, prefer_table__4263__auto__, method_cache__4264__auto__, cached_hierarchy__4265__auto__)
}();
fogus.datalog.bacwn.impl.literals.build_atom = function build_atom(f, type) {
  var p = cljs.core.first.call(null, f);
  var ts = cljs.core.map.call(null, function(p) {
    return function(p1__4579_SHARP_) {
      if(cljs.core.truth_(fogus.datalog.bacwn.impl.util.is_var_QMARK_.call(null, p1__4579_SHARP_))) {
        return cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.list.call(null, "\ufdd1'quote"), cljs.core.list.call(null, p1__4579_SHARP_)))
      }else {
        return p1__4579_SHARP_
      }
    }
  }(p), cljs.core.next.call(null, f));
  var b = cljs.core.seq.call(null, ts) ? cljs.core.apply.call(null, cljs.core.assoc, cljs.core.ObjMap.EMPTY, ts) : null;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.list.call(null, "\ufdd1'G__144/->AtomicLiteral"), cljs.core.list.call(null, p), cljs.core.list.call(null, b), cljs.core.list.call(null, type)))
};
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.build_literal, "\ufdd0:default", function(f) {
  return fogus.datalog.bacwn.impl.literals.build_atom.call(null, f, "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")
});
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.build_literal, fogus.datalog.bacwn.impl.literals.negation_symbol, function(f) {
  return fogus.datalog.bacwn.impl.literals.build_atom.call(null, cljs.core.rest.call(null, f), "\ufdd0:fogus.datalog.bacwn.impl.literals/negated")
});
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.build_literal, fogus.datalog.bacwn.impl.literals.conditional_symbol, function(f) {
  var symbol = cljs.core.fnext.call(null, f);
  var terms = cljs.core.nnext.call(null, f);
  var fun = cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.list.call(null, "\ufdd1'G__144/fn"), cljs.core.list.call(null, cljs.core.apply.call(null, cljs.core.vector, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.list.call(null, "\ufdd1'binds__4580__auto__"))))), cljs.core.list.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.list.call(null, "\ufdd1'G__144/apply"), cljs.core.list.call(null, symbol), cljs.core.list.call(null, "\ufdd1'binds__4580__auto__"))))));
  return cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.list.call(null, "\ufdd1'G__144/->ConditionalLiteral"), cljs.core.list.call(null, fun), cljs.core.list.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.list.call(null, "\ufdd1'quote"), cljs.core.list.call(null, symbol)))), cljs.core.list.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.list.call(null, "\ufdd1'quote"), cljs.core.list.call(null, terms)))), cljs.core.list.call(null, 
  "\ufdd0:fogus.datalog.bacwn.impl.literals/conditional")))
});
fogus.datalog.bacwn.impl.literals.display_literal = function() {
  var method_table__4262__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var prefer_table__4263__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var method_cache__4264__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var cached_hierarchy__4265__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var hierarchy__4266__auto__ = cljs.core._lookup.call(null, cljs.core.ObjMap.EMPTY, "\ufdd0:hierarchy", cljs.core.global_hierarchy);
  return new cljs.core.MultiFn("display-literal", "\ufdd0:literal-type", "\ufdd0:default", hierarchy__4266__auto__, method_table__4262__auto__, prefer_table__4263__auto__, method_cache__4264__auto__, cached_hierarchy__4265__auto__)
}();
fogus.datalog.bacwn.impl.literals.display = function display(l) {
  return cljs.core.conj.call(null, cljs.core.flatten.call(null, cljs.core.list_STAR_.call(null, (new cljs.core.Keyword("\ufdd0:term-bindings")).call(null, l))), fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, l))
};
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.display_literal, "\ufdd0:fogus.datalog.bacwn.impl.literals/literal", function(l) {
  return fogus.datalog.bacwn.impl.literals.display.call(null, l)
});
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.display_literal, "\ufdd0:fogus.datalog.bacwn.impl.literals/negated", function(l) {
  return cljs.core.conj.call(null, fogus.datalog.bacwn.impl.literals.display.call(null, l), fogus.datalog.bacwn.impl.literals.negation_symbol)
});
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.display_literal, "\ufdd0:fogus.datalog.bacwn.impl.literals/conditional", function(l) {
  return cljs.core.list_STAR_.call(null, fogus.datalog.bacwn.impl.literals.conditional_symbol, (new cljs.core.Keyword("\ufdd0:symbol")).call(null, l), (new cljs.core.Keyword("\ufdd0:terms")).call(null, l))
});
fogus.datalog.bacwn.impl.literals.get_vs_from_cs = function() {
  var method_table__4262__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var prefer_table__4263__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var method_cache__4264__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var cached_hierarchy__4265__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var hierarchy__4266__auto__ = cljs.core._lookup.call(null, cljs.core.ObjMap.EMPTY, "\ufdd0:hierarchy", cljs.core.global_hierarchy);
  return new cljs.core.MultiFn("get-vs-from-cs", "\ufdd0:literal-type", "\ufdd0:default", hierarchy__4266__auto__, method_table__4262__auto__, prefer_table__4263__auto__, method_cache__4264__auto__, cached_hierarchy__4265__auto__)
}();
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.get_vs_from_cs, "\ufdd0:fogus.datalog.bacwn.impl.literals/literal", function(l, bound) {
  return cljs.core.set.call(null, cljs.core.filter.call(null, fogus.datalog.bacwn.impl.util.is_var_QMARK_, cljs.core.vals.call(null, cljs.core.select_keys.call(null, (new cljs.core.Keyword("\ufdd0:term-bindings")).call(null, l), bound))))
});
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.get_vs_from_cs, "\ufdd0:fogus.datalog.bacwn.impl.literals/conditional", function(l, bound) {
  return null
});
fogus.datalog.bacwn.impl.literals.get_cs_from_vs = function() {
  var method_table__4262__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var prefer_table__4263__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var method_cache__4264__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var cached_hierarchy__4265__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var hierarchy__4266__auto__ = cljs.core._lookup.call(null, cljs.core.ObjMap.EMPTY, "\ufdd0:hierarchy", cljs.core.global_hierarchy);
  return new cljs.core.MultiFn("get-cs-from-vs", "\ufdd0:literal-type", "\ufdd0:default", hierarchy__4266__auto__, method_table__4262__auto__, prefer_table__4263__auto__, method_cache__4264__auto__, cached_hierarchy__4265__auto__)
}();
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.get_cs_from_vs, "\ufdd0:fogus.datalog.bacwn.impl.literals/literal", function(l, bound) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.PersistentHashSet.EMPTY, cljs.core.remove.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, function(p__4581) {
    var vec__4582 = p__4581;
    var k = cljs.core.nth.call(null, vec__4582, 0, null);
    var v = cljs.core.nth.call(null, vec__4582, 1, null);
    if(cljs.core.truth_(bound.call(null, v))) {
      return k
    }else {
      return null
    }
  }, (new cljs.core.Keyword("\ufdd0:term-bindings")).call(null, l))))
});
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.get_cs_from_vs, "\ufdd0:fogus.datalog.bacwn.impl.literals/conditional", function(l, bound) {
  return null
});
fogus.datalog.bacwn.impl.literals.get_self_bound_cs = function() {
  var method_table__4262__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var prefer_table__4263__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var method_cache__4264__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var cached_hierarchy__4265__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var hierarchy__4266__auto__ = cljs.core._lookup.call(null, cljs.core.ObjMap.EMPTY, "\ufdd0:hierarchy", cljs.core.global_hierarchy);
  return new cljs.core.MultiFn("get-self-bound-cs", "\ufdd0:literal-type", "\ufdd0:default", hierarchy__4266__auto__, method_table__4262__auto__, prefer_table__4263__auto__, method_cache__4264__auto__, cached_hierarchy__4265__auto__)
}();
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.get_self_bound_cs, "\ufdd0:fogus.datalog.bacwn.impl.literals/literal", function(l) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.PersistentHashSet.EMPTY, cljs.core.remove.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, function(p__4583) {
    var vec__4584 = p__4583;
    var k = cljs.core.nth.call(null, vec__4584, 0, null);
    var v = cljs.core.nth.call(null, vec__4584, 1, null);
    if(cljs.core.not.call(null, fogus.datalog.bacwn.impl.util.is_var_QMARK_.call(null, v))) {
      return k
    }else {
      return null
    }
  }, (new cljs.core.Keyword("\ufdd0:term-bindings")).call(null, l))))
});
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.get_self_bound_cs, "\ufdd0:fogus.datalog.bacwn.impl.literals/conditional", function(l) {
  return null
});
fogus.datalog.bacwn.impl.literals.literal_appropriate_QMARK_ = function() {
  var method_table__4262__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var prefer_table__4263__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var method_cache__4264__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var cached_hierarchy__4265__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var hierarchy__4266__auto__ = cljs.core._lookup.call(null, cljs.core.ObjMap.EMPTY, "\ufdd0:hierarchy", cljs.core.global_hierarchy);
  return new cljs.core.MultiFn("literal-appropriate?", function(b, l) {
    return(new cljs.core.Keyword("\ufdd0:literal-type")).call(null, l)
  }, "\ufdd0:default", hierarchy__4266__auto__, method_table__4262__auto__, prefer_table__4263__auto__, method_cache__4264__auto__, cached_hierarchy__4265__auto__)
}();
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.literal_appropriate_QMARK_, "\ufdd0:fogus.datalog.bacwn.impl.literals/literal", function(bound, l) {
  return!cljs.core.empty_QMARK_.call(null, clojure.set.intersection.call(null, fogus.datalog.bacwn.impl.literals.literal_vars.call(null, l), bound))
});
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.literal_appropriate_QMARK_, "\ufdd0:fogus.datalog.bacwn.impl.literals/negated", function(bound, l) {
  return clojure.set.subset_QMARK_.call(null, fogus.datalog.bacwn.impl.literals.literal_vars.call(null, l), bound)
});
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.literal_appropriate_QMARK_, "\ufdd0:fogus.datalog.bacwn.impl.literals/conditional", function(bound, l) {
  return clojure.set.subset_QMARK_.call(null, fogus.datalog.bacwn.impl.literals.literal_vars.call(null, l), bound)
});
fogus.datalog.bacwn.impl.literals.adorned_literal = function() {
  var method_table__4262__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var prefer_table__4263__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var method_cache__4264__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var cached_hierarchy__4265__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var hierarchy__4266__auto__ = cljs.core._lookup.call(null, cljs.core.ObjMap.EMPTY, "\ufdd0:hierarchy", cljs.core.global_hierarchy);
  return new cljs.core.MultiFn("adorned-literal", function(l, b) {
    return(new cljs.core.Keyword("\ufdd0:literal-type")).call(null, l)
  }, "\ufdd0:default", hierarchy__4266__auto__, method_table__4262__auto__, prefer_table__4263__auto__, method_cache__4264__auto__, cached_hierarchy__4265__auto__)
}();
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.adorned_literal, "\ufdd0:fogus.datalog.bacwn.impl.literals/literal", function(l, bound) {
  var pred = fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, l);
  var bnds = clojure.set.intersection.call(null, fogus.datalog.bacwn.impl.literals.literal_columns.call(null, l), bound);
  if(cljs.core.empty_QMARK_.call(null, bound)) {
    return l
  }else {
    return cljs.core.assoc.call(null, l, "\ufdd0:predicate", cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":pred, "\ufdd0:bound":bnds}))
  }
});
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.adorned_literal, "\ufdd0:fogus.datalog.bacwn.impl.literals/conditional", function(l, bound) {
  return l
});
fogus.datalog.bacwn.impl.literals.get_adorned_bindings = function get_adorned_bindings(pred) {
  try {
    return(new cljs.core.Keyword("\ufdd0:bound")).call(null, pred)
  }catch(e4586) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4586)) {
      var e = e4586;
      return null
    }else {
      if("\ufdd0:else") {
        throw e4586;
      }else {
        return null
      }
    }
  }
};
fogus.datalog.bacwn.impl.literals.get_base_predicate = function get_base_predicate(pred) {
  if(cljs.core.map_QMARK_.call(null, pred)) {
    return(new cljs.core.Keyword("\ufdd0:pred")).call(null, pred)
  }else {
    return pred
  }
};
fogus.datalog.bacwn.impl.literals.magic_literal = function magic_literal(l) {
  if(cljs.core.isa_QMARK_.call(null, (new cljs.core.Keyword("\ufdd0:literal-type")).call(null, l), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'->", "\ufdd1'l", "\ufdd0:literal-type", cljs.core.with_meta(cljs.core.list("\ufdd1'isa?", "\ufdd0:G__144/literal"), cljs.core.hash_map("\ufdd0:line", 285, "\ufdd0:column", 31))), cljs.core.hash_map("\ufdd0:line", 285, "\ufdd0:column", 11))))].join(""));
  }
  var pred = fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, l);
  var pred_map = cljs.core.map_QMARK_.call(null, pred) ? pred : cljs.core.ObjMap.fromObject(["\ufdd0:pred"], {"\ufdd0:pred":pred});
  var bound = fogus.datalog.bacwn.impl.literals.get_adorned_bindings.call(null, pred);
  var ntb = cljs.core.select_keys.call(null, (new cljs.core.Keyword("\ufdd0:term-bindings")).call(null, l), bound);
  return cljs.core.assoc.call(null, l, "\ufdd0:predicate", cljs.core.assoc.call(null, pred_map, "\ufdd0:magic", true), "\ufdd0:term-bindings", ntb, "\ufdd0:literal-type", "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")
};
fogus.datalog.bacwn.impl.literals.literal_magic_QMARK_ = function literal_magic_QMARK_(lit) {
  var pred = fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, lit);
  if(cljs.core.map_QMARK_.call(null, pred)) {
    return(new cljs.core.Keyword("\ufdd0:magic")).call(null, pred)
  }else {
    return null
  }
};
fogus.datalog.bacwn.impl.literals.build_seed_bindings = function build_seed_bindings(s) {
  if(cljs.core.isa_QMARK_.call(null, (new cljs.core.Keyword("\ufdd0:literal-type")).call(null, s), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'->", "\ufdd1's", "\ufdd0:literal-type", cljs.core.with_meta(cljs.core.list("\ufdd1'isa?", "\ufdd0:G__144/literal"), cljs.core.hash_map("\ufdd0:line", 303, "\ufdd0:column", 31))), cljs.core.hash_map("\ufdd0:line", 303, "\ufdd0:column", 11))))].join(""));
  }
  var ntbs = fogus.datalog.bacwn.impl.util.map_values.call(null, function(_) {
    return cljs.core.gensym.call(null, "\ufdd1'?_gen_")
  }, (new cljs.core.Keyword("\ufdd0:term-bindings")).call(null, s));
  return cljs.core.assoc.call(null, s, "\ufdd0:term-bindings", ntbs)
};
fogus.datalog.bacwn.impl.literals.negated_literal = function negated_literal(l) {
  if(cljs.core._EQ_.call(null, (new cljs.core.Keyword("\ufdd0:literal-type")).call(null, l), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'->", "\ufdd1'l", "\ufdd0:literal-type", cljs.core.with_meta(cljs.core.list("\ufdd1'=", "\ufdd0:G__144/literal"), cljs.core.hash_map("\ufdd0:line", 313, "\ufdd0:column", 31))), cljs.core.hash_map("\ufdd0:line", 313, "\ufdd0:column", 11))))].join(""));
  }
  return cljs.core.assoc.call(null, l, "\ufdd0:literal-type", "\ufdd0:fogus.datalog.bacwn.impl.literals/negated")
};
fogus.datalog.bacwn.impl.literals.delta_literal = function delta_literal(l) {
  var pred_STAR_ = (new cljs.core.Keyword("\ufdd0:predicate")).call(null, l);
  var pred = cljs.core.map_QMARK_.call(null, pred_STAR_) ? pred_STAR_ : cljs.core.ObjMap.fromObject(["\ufdd0:pred"], {"\ufdd0:pred":pred_STAR_});
  return cljs.core.assoc.call(null, l, "\ufdd0:predicate", cljs.core.assoc.call(null, pred, "\ufdd0:delta", true))
};
fogus.datalog.bacwn.impl.literals.build_partial_tuple = function build_partial_tuple(lit, binds) {
  var tbs = (new cljs.core.Keyword("\ufdd0:term-bindings")).call(null, lit);
  var each = function(tbs) {
    return function(p__4589) {
      var vec__4590 = p__4589;
      var key = cljs.core.nth.call(null, vec__4590, 0, null);
      var val = cljs.core.nth.call(null, vec__4590, 1, null);
      var pair = vec__4590;
      if(cljs.core.truth_(fogus.datalog.bacwn.impl.util.is_var_QMARK_.call(null, val))) {
        var temp__4090__auto__ = binds.call(null, val);
        if(cljs.core.truth_(temp__4090__auto__)) {
          var n = temp__4090__auto__;
          return cljs.core.PersistentVector.fromArray([key, n], true)
        }else {
          return null
        }
      }else {
        return pair
      }
    }
  }(tbs);
  return cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, cljs.core.remove.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, each, tbs)))
};
fogus.datalog.bacwn.impl.literals.project_onto_literal = function project_onto_literal(lit, tuple) {
  var step = function(binds, p__4593) {
    var vec__4594 = p__4593;
    var key = cljs.core.nth.call(null, vec__4594, 0, null);
    var val = cljs.core.nth.call(null, vec__4594, 1, null);
    if(cljs.core.truth_(function() {
      var and__3941__auto__ = fogus.datalog.bacwn.impl.util.is_var_QMARK_.call(null, val);
      if(cljs.core.truth_(and__3941__auto__)) {
        return cljs.core.contains_QMARK_.call(null, tuple, key)
      }else {
        return and__3941__auto__
      }
    }())) {
      return cljs.core.assoc.call(null, binds, val, tuple.call(null, key))
    }else {
      return binds
    }
  };
  return cljs.core.reduce.call(null, step, cljs.core.ObjMap.EMPTY, (new cljs.core.Keyword("\ufdd0:term-bindings")).call(null, lit))
};
fogus.datalog.bacwn.impl.literals.join_literal_STAR_ = function join_literal_STAR_(db, lit, bs, fun) {
  var each = function(binds) {
    var pt = fogus.datalog.bacwn.impl.literals.build_partial_tuple.call(null, lit, binds);
    return fun.call(null, binds, pt)
  };
  if(cljs.core.contains_QMARK_.call(null, db, fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, lit))) {
    return cljs.core.apply.call(null, cljs.core.concat, cljs.core.map.call(null, each, bs))
  }else {
    return null
  }
};
fogus.datalog.bacwn.impl.literals.join_literal = function() {
  var method_table__4262__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var prefer_table__4263__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var method_cache__4264__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var cached_hierarchy__4265__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var hierarchy__4266__auto__ = cljs.core._lookup.call(null, cljs.core.ObjMap.EMPTY, "\ufdd0:hierarchy", cljs.core.global_hierarchy);
  return new cljs.core.MultiFn("join-literal", function(db, lit, bs) {
    return(new cljs.core.Keyword("\ufdd0:literal-type")).call(null, lit)
  }, "\ufdd0:default", hierarchy__4266__auto__, method_table__4262__auto__, prefer_table__4263__auto__, method_cache__4264__auto__, cached_hierarchy__4265__auto__)
}();
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.join_literal, "\ufdd0:fogus.datalog.bacwn.impl.literals/literal", function(db, lit, bs) {
  return fogus.datalog.bacwn.impl.literals.join_literal_STAR_.call(null, db, lit, bs, function(binds, pt) {
    return cljs.core.map.call(null, function(p1__4595_SHARP_) {
      return cljs.core.merge.call(null, binds, p1__4595_SHARP_)
    }, cljs.core.map.call(null, cljs.core.partial.call(null, fogus.datalog.bacwn.impl.literals.project_onto_literal, lit), fogus.datalog.bacwn.impl.database.select.call(null, db, fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, lit), pt)))
  })
});
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.join_literal, "\ufdd0:fogus.datalog.bacwn.impl.literals/negated", function(db, lit, bs) {
  return fogus.datalog.bacwn.impl.literals.join_literal_STAR_.call(null, db, lit, bs, function(binds, pt) {
    if(cljs.core.truth_(fogus.datalog.bacwn.impl.database.any_match_QMARK_.call(null, db, fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, lit), pt))) {
      return null
    }else {
      return cljs.core.PersistentVector.fromArray([binds], true)
    }
  })
});
cljs.core._add_method.call(null, fogus.datalog.bacwn.impl.literals.join_literal, "\ufdd0:fogus.datalog.bacwn.impl.literals/conditional", function(db, lit, bs) {
  var each = function(binds) {
    var resolve = function(term) {
      if(cljs.core.truth_(fogus.datalog.bacwn.impl.util.is_var_QMARK_.call(null, term))) {
        return binds.call(null, term)
      }else {
        return term
      }
    };
    var args = cljs.core.map.call(null, resolve, (new cljs.core.Keyword("\ufdd0:terms")).call(null, lit));
    if(cljs.core.truth_((new cljs.core.Keyword("\ufdd0:fun")).call(null, lit).call(null, args))) {
      return binds
    }else {
      return null
    }
  };
  return cljs.core.remove.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, each, bs))
});
fogus.datalog.bacwn.impl.literals.project_literal = function() {
  var project_literal = null;
  var project_literal__3 = function(db, lit, bs) {
    return project_literal.call(null, db, lit, bs, fogus.datalog.bacwn.impl.util.is_var_QMARK_)
  };
  var project_literal__4 = function(db, lit, bs, var_QMARK_) {
    if(cljs.core._EQ_.call(null, (new cljs.core.Keyword("\ufdd0:literal-type")).call(null, lit), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:literal-type", "\ufdd1'lit"), cljs.core.hash_map("\ufdd0:line", 393, "\ufdd0:column", 17)), "\ufdd0:G__144/literal"), cljs.core.hash_map("\ufdd0:line", 393, "\ufdd0:column", 14))))].join(""));
    }
    var rel_name = fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, lit);
    var columns = cljs.core.keys.call(null, (new cljs.core.Keyword("\ufdd0:term-bindings")).call(null, lit));
    var idxs = cljs.core.vec.call(null, fogus.datalog.bacwn.impl.literals.get_adorned_bindings.call(null, fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, lit)));
    var db1 = fogus.datalog.bacwn.impl.database.ensure_relation.call(null, db, rel_name, columns, idxs);
    var rel = fogus.datalog.bacwn.impl.database.get_relation.call(null, db1, rel_name);
    var step = function(rel_name, columns, idxs, db1, rel) {
      return function(rel__$1, bindings) {
        var step = function(rel_name, columns, idxs, db1, rel) {
          return function(t, p__4598) {
            var vec__4599 = p__4598;
            var k = cljs.core.nth.call(null, vec__4599, 0, null);
            var v = cljs.core.nth.call(null, vec__4599, 1, null);
            if(cljs.core.truth_(var_QMARK_.call(null, v))) {
              return cljs.core.assoc.call(null, t, k, bindings.call(null, v))
            }else {
              return cljs.core.assoc.call(null, t, k, v)
            }
          }
        }(rel_name, columns, idxs, db1, rel);
        var tuple = cljs.core.reduce.call(null, step, cljs.core.ObjMap.EMPTY, (new cljs.core.Keyword("\ufdd0:term-bindings")).call(null, lit));
        return fogus.datalog.bacwn.impl.database.add_tuple.call(null, rel__$1, tuple)
      }
    }(rel_name, columns, idxs, db1, rel);
    return fogus.datalog.bacwn.impl.database.replace_relation.call(null, db, rel_name, cljs.core.reduce.call(null, step, rel, bs))
  };
  project_literal = function(db, lit, bs, var_QMARK_) {
    switch(arguments.length) {
      case 3:
        return project_literal__3.call(this, db, lit, bs);
      case 4:
        return project_literal__4.call(this, db, lit, bs, var_QMARK_)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  project_literal.cljs$lang$arity$3 = project_literal__3;
  project_literal.cljs$lang$arity$4 = project_literal__4;
  return project_literal
}();
cljs.reader.register_tag_parser_BANG_.call(null, "fogus.datalog.bacwn.impl.literals.AtomicLiteral", fogus.datalog.bacwn.impl.literals.map__GT_AtomicLiteral);
fogus.datalog.bacwn.impl.literals.AtomicLiteral.prototype.cljs$core$IPrintWithWriter$ = true;
fogus.datalog.bacwn.impl.literals.AtomicLiteral.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(query, writer, opts) {
  return cljs.core.write_all.call(null, writer, cljs.core.pr_str.call(null, cljs.core.list_STAR_.call(null, "\ufdd1'?-", fogus.datalog.bacwn.impl.literals.display_literal.call(null, query))))
};
goog.provide("fogus.datalog.bacwn.impl.rules");
goog.require("cljs.core");
goog.require("cljs.reader");
goog.require("clojure.set");
goog.require("fogus.datalog.bacwn.impl.database");
goog.require("fogus.datalog.bacwn.impl.literals");
goog.require("fogus.datalog.bacwn.impl.util");
goog.provide("fogus.datalog.bacwn.impl.rules.DatalogRule");
fogus.datalog.bacwn.impl.rules.DatalogRule = function(head, body, __meta, __extmap) {
  this.head = head;
  this.body = body;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if(arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap
  }else {
    this.__meta = null;
    this.__extmap = null
  }
};
fogus.datalog.bacwn.impl.rules.DatalogRule.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4043__auto__) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_imap.call(null, this__4043__auto__);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
fogus.datalog.bacwn.impl.rules.DatalogRule.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4048__auto__, k__4049__auto__) {
  var self__ = this;
  return this__4048__auto__.cljs$core$ILookup$_lookup$arity$3(this__4048__auto__, k__4049__auto__, null)
};
fogus.datalog.bacwn.impl.rules.DatalogRule.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4050__auto__, k4722, else__4051__auto__) {
  var self__ = this;
  if(k4722 === "\ufdd0:head") {
    return self__.head
  }else {
    if(k4722 === "\ufdd0:body") {
      return self__.body
    }else {
      if("\ufdd0:else") {
        return cljs.core._lookup.call(null, self__.__extmap, k4722, else__4051__auto__)
      }else {
        return null
      }
    }
  }
};
fogus.datalog.bacwn.impl.rules.DatalogRule.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4055__auto__, k__4056__auto__, G__4721) {
  var self__ = this;
  var pred__4724 = cljs.core.identical_QMARK_;
  var expr__4725 = k__4056__auto__;
  if(pred__4724.call(null, "\ufdd0:head", expr__4725)) {
    return new fogus.datalog.bacwn.impl.rules.DatalogRule(G__4721, self__.body, self__.__meta, self__.__extmap, null)
  }else {
    if(pred__4724.call(null, "\ufdd0:body", expr__4725)) {
      return new fogus.datalog.bacwn.impl.rules.DatalogRule(self__.head, G__4721, self__.__meta, self__.__extmap, null)
    }else {
      return new fogus.datalog.bacwn.impl.rules.DatalogRule(self__.head, self__.body, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4056__auto__, G__4721), null)
    }
  }
};
fogus.datalog.bacwn.impl.rules.DatalogRule.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4062__auto__, writer__4063__auto__, opts__4064__auto__) {
  var self__ = this;
  var pr_pair__4065__auto__ = function(keyval__4066__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__4063__auto__, cljs.core.pr_writer, "", " ", "", opts__4064__auto__, keyval__4066__auto__)
  };
  return cljs.core.pr_sequential_writer.call(null, writer__4063__auto__, pr_pair__4065__auto__, [cljs.core.str("#"), cljs.core.str("DatalogRule"), cljs.core.str("{")].join(""), ", ", "}", opts__4064__auto__, cljs.core.concat.call(null, cljs.core.PersistentVector.fromArray([cljs.core.vector.call(null, "\ufdd0:head", self__.head), cljs.core.vector.call(null, "\ufdd0:body", self__.body)], true), self__.__extmap))
};
fogus.datalog.bacwn.impl.rules.DatalogRule.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4053__auto__, entry__4054__auto__) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry__4054__auto__)) {
    return this__4053__auto__.cljs$core$IAssociative$_assoc$arity$3(this__4053__auto__, cljs.core._nth.call(null, entry__4054__auto__, 0), cljs.core._nth.call(null, entry__4054__auto__, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4053__auto__, entry__4054__auto__)
  }
};
fogus.datalog.bacwn.impl.rules.DatalogRule.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.PersistentVector.fromArray([cljs.core.vector.call(null, "\ufdd0:head", self__.head), cljs.core.vector.call(null, "\ufdd0:body", self__.body)], true), self__.__extmap))
};
fogus.datalog.bacwn.impl.rules.DatalogRule.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4052__auto__) {
  var self__ = this;
  return 2 + cljs.core.count.call(null, self__.__extmap)
};
fogus.datalog.bacwn.impl.rules.DatalogRule.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4044__auto__, other__4045__auto__) {
  var self__ = this;
  if(cljs.core.truth_(function() {
    var and__3941__auto__ = other__4045__auto__;
    if(cljs.core.truth_(and__3941__auto__)) {
      var and__3941__auto____$1 = this__4044__auto__.constructor === other__4045__auto__.constructor;
      if(and__3941__auto____$1) {
        return cljs.core.equiv_map.call(null, this__4044__auto__, other__4045__auto__)
      }else {
        return and__3941__auto____$1
      }
    }else {
      return and__3941__auto__
    }
  }())) {
    return true
  }else {
    return false
  }
};
fogus.datalog.bacwn.impl.rules.DatalogRule.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4047__auto__, G__4721) {
  var self__ = this;
  return new fogus.datalog.bacwn.impl.rules.DatalogRule(self__.head, self__.body, G__4721, self__.__extmap, self__.__hash)
};
fogus.datalog.bacwn.impl.rules.DatalogRule.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4046__auto__) {
  var self__ = this;
  return self__.__meta
};
fogus.datalog.bacwn.impl.rules.DatalogRule.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4057__auto__, k__4058__auto__) {
  var self__ = this;
  if(cljs.core.contains_QMARK_.call(null, cljs.core.PersistentHashSet.fromArray(["\ufdd0:head", "\ufdd0:body"]), k__4058__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, this__4057__auto__), self__.__meta), k__4058__auto__)
  }else {
    return new fogus.datalog.bacwn.impl.rules.DatalogRule(self__.head, self__.body, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4058__auto__)), null)
  }
};
fogus.datalog.bacwn.impl.rules.DatalogRule.cljs$lang$type = true;
fogus.datalog.bacwn.impl.rules.DatalogRule.cljs$lang$ctorPrSeq = function(this__4083__auto__) {
  return cljs.core.list.call(null, "fogus.datalog.bacwn.impl.rules/DatalogRule")
};
fogus.datalog.bacwn.impl.rules.DatalogRule.cljs$lang$ctorPrWriter = function(this__4083__auto__, writer__4084__auto__) {
  return cljs.core._write.call(null, writer__4084__auto__, "fogus.datalog.bacwn.impl.rules/DatalogRule")
};
fogus.datalog.bacwn.impl.rules.__GT_DatalogRule = function __GT_DatalogRule(head, body) {
  return new fogus.datalog.bacwn.impl.rules.DatalogRule(head, body)
};
fogus.datalog.bacwn.impl.rules.map__GT_DatalogRule = function map__GT_DatalogRule(G__4723) {
  return new fogus.datalog.bacwn.impl.rules.DatalogRule((new cljs.core.Keyword("\ufdd0:head")).call(null, G__4723), (new cljs.core.Keyword("\ufdd0:body")).call(null, G__4723), null, cljs.core.dissoc.call(null, G__4723, "\ufdd0:head", "\ufdd0:body"))
};
fogus.datalog.bacwn.impl.rules.display_rule = function display_rule(rule) {
  return cljs.core.list_STAR_.call(null, "\ufdd1'<-", fogus.datalog.bacwn.impl.literals.display_literal.call(null, (new cljs.core.Keyword("\ufdd0:head")).call(null, rule)), cljs.core.map.call(null, fogus.datalog.bacwn.impl.literals.display_literal, (new cljs.core.Keyword("\ufdd0:body")).call(null, rule)))
};
fogus.datalog.bacwn.impl.rules.display_query = function display_query(query) {
  return cljs.core.list_STAR_.call(null, "\ufdd1'?-", fogus.datalog.bacwn.impl.literals.display_literal.call(null, query))
};
fogus.datalog.bacwn.impl.rules.is_safe_QMARK_ = function is_safe_QMARK_(rule) {
  var hv = fogus.datalog.bacwn.impl.literals.literal_vars.call(null, (new cljs.core.Keyword("\ufdd0:head")).call(null, rule));
  var bpv = cljs.core.apply.call(null, clojure.set.union, cljs.core.map.call(null, fogus.datalog.bacwn.impl.literals.positive_vars, (new cljs.core.Keyword("\ufdd0:body")).call(null, rule)));
  var bnv = cljs.core.apply.call(null, clojure.set.union, cljs.core.map.call(null, fogus.datalog.bacwn.impl.literals.negative_vars, (new cljs.core.Keyword("\ufdd0:body")).call(null, rule)));
  var ehv = clojure.set.difference.call(null, hv, bpv);
  var env = clojure.set.difference.call(null, bnv, bpv);
  if(cljs.core.empty_QMARK_.call(null, ehv)) {
  }else {
    throw new Error([cljs.core.str("Head vars"), cljs.core.str(ehv), cljs.core.str("not bound in body of rule"), cljs.core.str(rule)].join(""));
  }
  if(cljs.core.empty_QMARK_.call(null, env)) {
  }else {
    throw new Error([cljs.core.str("Body vars"), cljs.core.str(env), cljs.core.str("not bound in negative positions of rule"), cljs.core.str(rule)].join(""));
  }
  return rule
};
fogus.datalog.bacwn.impl.rules.build_rule = function build_rule(hd, bd) {
  return cljs.core.with_meta.call(null, fogus.datalog.bacwn.impl.rules.__GT_DatalogRule.call(null, hd, bd), cljs.core.ObjMap.fromObject(["\ufdd0:type"], {"\ufdd0:type":"\ufdd0:fogus.datalog.bacwn.impl.rules/datalog-rule"}))
};
cljs.reader.register_tag_parser_BANG_.call(null, "fogus.datalog.bacwn.impl.rules.DatalogRule", fogus.datalog.bacwn.impl.rules.map__GT_DatalogRule);
fogus.datalog.bacwn.impl.rules.DatalogRule.prototype.cljs$core$IPrintWithWriter$ = true;
fogus.datalog.bacwn.impl.rules.DatalogRule.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(rule, writer, opts) {
  return cljs.core.write_all.call(null, writer, cljs.core.pr_str.call(null, fogus.datalog.bacwn.impl.rules.display_rule.call(null, rule)))
};
fogus.datalog.bacwn.impl.rules.return_rule_data = function return_rule_data(rule) {
  return cljs.core.with_meta.call(null, rule, cljs.core.ObjMap.EMPTY)
};
fogus.datalog.bacwn.impl.rules.compute_sip = function compute_sip(bindings, i_preds, rule) {
  var next_lit = function(bv, body) {
    var or__3943__auto__ = cljs.core.first.call(null, cljs.core.drop_while.call(null, function(p1__4727_SHARP_) {
      return cljs.core.not.call(null, fogus.datalog.bacwn.impl.literals.literal_appropriate_QMARK_.call(null, bv, p1__4727_SHARP_))
    }, body));
    if(cljs.core.truth_(or__3943__auto__)) {
      return or__3943__auto__
    }else {
      return cljs.core.first.call(null, cljs.core.drop_while.call(null, cljs.core.complement.call(null, fogus.datalog.bacwn.impl.literals.positive_QMARK_), body))
    }
  };
  var adorn = function(next_lit) {
    return function(lit, bvs) {
      if(cljs.core.truth_(i_preds.call(null, fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, lit)))) {
        var bnds = clojure.set.union.call(null, fogus.datalog.bacwn.impl.literals.get_cs_from_vs.call(null, lit, bvs), fogus.datalog.bacwn.impl.literals.get_self_bound_cs.call(null, lit));
        return fogus.datalog.bacwn.impl.literals.adorned_literal.call(null, lit, bnds)
      }else {
        return lit
      }
    }
  }(next_lit);
  var new_h = fogus.datalog.bacwn.impl.literals.adorned_literal.call(null, (new cljs.core.Keyword("\ufdd0:head")).call(null, rule), bindings);
  var bound_vars = fogus.datalog.bacwn.impl.literals.get_vs_from_cs.call(null, (new cljs.core.Keyword("\ufdd0:head")).call(null, rule), bindings);
  var body = (new cljs.core.Keyword("\ufdd0:body")).call(null, rule);
  var sip = cljs.core.PersistentVector.EMPTY;
  while(true) {
    var temp__4090__auto__ = next_lit.call(null, bound_vars, body);
    if(cljs.core.truth_(temp__4090__auto__)) {
      var next = temp__4090__auto__;
      var G__4729 = clojure.set.union.call(null, bound_vars, fogus.datalog.bacwn.impl.literals.literal_vars.call(null, next));
      var G__4730 = cljs.core.remove.call(null, function(bound_vars, body, sip, next, temp__4090__auto__) {
        return function(p1__4728_SHARP_) {
          return cljs.core._EQ_.call(null, p1__4728_SHARP_, next)
        }
      }(bound_vars, body, sip, next, temp__4090__auto__), body);
      var G__4731 = cljs.core.conj.call(null, sip, adorn.call(null, next, bound_vars));
      bound_vars = G__4729;
      body = G__4730;
      sip = G__4731;
      continue
    }else {
      return fogus.datalog.bacwn.impl.rules.build_rule.call(null, new_h, cljs.core.concat.call(null, sip, body))
    }
    break
  }
};
fogus.datalog.bacwn.impl.rules.make_rules_set = function make_rules_set(rs) {
  return cljs.core.with_meta.call(null, rs, cljs.core.ObjMap.fromObject(["\ufdd0:type"], {"\ufdd0:type":"\ufdd0:fogus.datalog.bacwn.impl.rules/datalog-rules-set"}))
};
fogus.datalog.bacwn.impl.rules.empty_rules_set = fogus.datalog.bacwn.impl.rules.make_rules_set.call(null, cljs.core.PersistentHashSet.EMPTY);
fogus.datalog.bacwn.impl.rules.rules_set = function() {
  var rules_set__delegate = function(rules) {
    return cljs.core.reduce.call(null, cljs.core.conj, fogus.datalog.bacwn.impl.rules.empty_rules_set, rules)
  };
  var rules_set = function(var_args) {
    var rules = null;
    if(goog.isDef(var_args)) {
      rules = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return rules_set__delegate.call(this, rules)
  };
  rules_set.cljs$lang$maxFixedArity = 0;
  rules_set.cljs$lang$applyTo = function(arglist__4732) {
    var rules = cljs.core.seq(arglist__4732);
    return rules_set__delegate(rules)
  };
  rules_set.cljs$lang$arity$variadic = rules_set__delegate;
  return rules_set
}();
fogus.datalog.bacwn.impl.rules.predicate_map = function predicate_map(rs) {
  var add_rule = function(m, r) {
    var pred = fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, (new cljs.core.Keyword("\ufdd0:head")).call(null, r));
    var os = cljs.core._lookup.call(null, m, pred, cljs.core.PersistentHashSet.EMPTY);
    return cljs.core.assoc.call(null, m, pred, cljs.core.conj.call(null, os, r))
  };
  return cljs.core.reduce.call(null, add_rule, cljs.core.ObjMap.EMPTY, rs)
};
fogus.datalog.bacwn.impl.rules.all_predicates = function all_predicates(rs) {
  return cljs.core.set.call(null, cljs.core.map.call(null, fogus.datalog.bacwn.impl.literals.literal_predicate, cljs.core.map.call(null, "\ufdd0:head", rs)))
};
fogus.datalog.bacwn.impl.rules.non_base_rules = function non_base_rules(rs) {
  var pred = fogus.datalog.bacwn.impl.rules.all_predicates.call(null, rs);
  var non_base = function(pred) {
    return function(r) {
      if(cljs.core.truth_(cljs.core.some.call(null, function(pred) {
        return function(p1__4733_SHARP_) {
          return pred.call(null, p1__4733_SHARP_)
        }
      }(pred), cljs.core.map.call(null, fogus.datalog.bacwn.impl.literals.literal_predicate, (new cljs.core.Keyword("\ufdd0:body")).call(null, r))))) {
        return r
      }else {
        return null
      }
    }
  }(pred);
  return cljs.core.remove.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, non_base, rs))
};
fogus.datalog.bacwn.impl.rules.empty_bindings = cljs.core.PersistentVector.fromArray([cljs.core.ObjMap.EMPTY], true);
fogus.datalog.bacwn.impl.rules.apply_rule = function() {
  var apply_rule = null;
  var apply_rule__2 = function(db, rule) {
    return apply_rule.call(null, db, db, rule)
  };
  var apply_rule__3 = function(db_1, db_2, rule) {
    var head = (new cljs.core.Keyword("\ufdd0:head")).call(null, rule);
    var body = (new cljs.core.Keyword("\ufdd0:body")).call(null, rule);
    var step = function(head, body) {
      return function(bs, lit) {
        return fogus.datalog.bacwn.impl.literals.join_literal.call(null, db_1, lit, bs)
      }
    }(head, body);
    var bs = cljs.core.reduce.call(null, step, fogus.datalog.bacwn.impl.rules.empty_bindings, body);
    return fogus.datalog.bacwn.impl.literals.project_literal.call(null, db_2, head, bs)
  };
  apply_rule = function(db_1, db_2, rule) {
    switch(arguments.length) {
      case 2:
        return apply_rule__2.call(this, db_1, db_2);
      case 3:
        return apply_rule__3.call(this, db_1, db_2, rule)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply_rule.cljs$lang$arity$2 = apply_rule__2;
  apply_rule.cljs$lang$arity$3 = apply_rule__3;
  return apply_rule
}();
fogus.datalog.bacwn.impl.rules.apply_rules_set = function apply_rules_set(db, rs) {
  return cljs.core.reduce.call(null, function(rdb, rule) {
    return fogus.datalog.bacwn.impl.rules.apply_rule.call(null, db, rdb, rule)
  }, db, rs)
};
goog.provide("fogus.datalog.bacwn.impl.magic");
goog.require("cljs.core");
goog.require("clojure.set");
goog.require("fogus.datalog.bacwn.impl.rules");
goog.require("fogus.datalog.bacwn.impl.literals");
goog.require("fogus.datalog.bacwn.impl.util");
fogus.datalog.bacwn.impl.magic.adorn_query = function adorn_query(q) {
  return fogus.datalog.bacwn.impl.literals.adorned_literal.call(null, q, fogus.datalog.bacwn.impl.literals.get_self_bound_cs.call(null, q))
};
fogus.datalog.bacwn.impl.magic.adorn_rules_set = function adorn_rules_set(rs, q) {
  var i_preds = fogus.datalog.bacwn.impl.rules.all_predicates.call(null, rs);
  var p_map = fogus.datalog.bacwn.impl.rules.predicate_map.call(null, rs);
  var nrs = fogus.datalog.bacwn.impl.rules.empty_rules_set;
  var needed = cljs.core.PersistentHashSet.fromArray([fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, q)]);
  while(true) {
    if(cljs.core.empty_QMARK_.call(null, needed)) {
      return nrs
    }else {
      var pred = cljs.core.first.call(null, needed);
      var remaining = cljs.core.disj.call(null, needed, pred);
      var base_pred = fogus.datalog.bacwn.impl.literals.get_base_predicate.call(null, pred);
      var bindings = fogus.datalog.bacwn.impl.literals.get_adorned_bindings.call(null, pred);
      var new_rules = p_map.call(null, base_pred);
      var new_adorned_rules = cljs.core.map.call(null, cljs.core.partial.call(null, fogus.datalog.bacwn.impl.rules.compute_sip, bindings, i_preds), new_rules);
      var new_nrs = cljs.core.reduce.call(null, cljs.core.conj, nrs, new_adorned_rules);
      var current_preds = fogus.datalog.bacwn.impl.rules.all_predicates.call(null, new_nrs);
      var not_needed_QMARK_ = function(nrs, needed, pred, remaining, base_pred, bindings, new_rules, new_adorned_rules, new_nrs, current_preds) {
        return function(pred__$1) {
          var or__3943__auto__ = current_preds.call(null, pred__$1);
          if(cljs.core.truth_(or__3943__auto__)) {
            return or__3943__auto__
          }else {
            return cljs.core.not.call(null, i_preds.call(null, fogus.datalog.bacwn.impl.literals.get_base_predicate.call(null, pred__$1)))
          }
        }
      }(nrs, needed, pred, remaining, base_pred, bindings, new_rules, new_adorned_rules, new_nrs, current_preds);
      var add_pred = function(nrs, needed, pred, remaining, base_pred, bindings, new_rules, new_adorned_rules, new_nrs, current_preds, not_needed_QMARK_) {
        return function(np, pred__$1) {
          if(cljs.core.truth_(not_needed_QMARK_.call(null, pred__$1))) {
            return np
          }else {
            return cljs.core.conj.call(null, np, pred__$1)
          }
        }
      }(nrs, needed, pred, remaining, base_pred, bindings, new_rules, new_adorned_rules, new_nrs, current_preds, not_needed_QMARK_);
      var add_preds = function(nrs, needed, pred, remaining, base_pred, bindings, new_rules, new_adorned_rules, new_nrs, current_preds, not_needed_QMARK_, add_pred) {
        return function(np, rule) {
          return cljs.core.reduce.call(null, add_pred, np, cljs.core.map.call(null, fogus.datalog.bacwn.impl.literals.literal_predicate, (new cljs.core.Keyword("\ufdd0:body")).call(null, rule)))
        }
      }(nrs, needed, pred, remaining, base_pred, bindings, new_rules, new_adorned_rules, new_nrs, current_preds, not_needed_QMARK_, add_pred);
      var new_needed = cljs.core.reduce.call(null, add_preds, remaining, new_adorned_rules);
      var G__4753 = new_nrs;
      var G__4754 = new_needed;
      nrs = G__4753;
      needed = G__4754;
      continue
    }
    break
  }
};
fogus.datalog.bacwn.impl.magic.seed_relation = function seed_relation(q) {
  var pred = fogus.datalog.bacwn.impl.literals.get_base_predicate.call(null, fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, q));
  var bnds = fogus.datalog.bacwn.impl.literals.get_adorned_bindings.call(null, fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, q));
  return cljs.core.with_meta.call(null, cljs.core.assoc.call(null, q, "\ufdd0:predicate", cljs.core.PersistentVector.fromArray([pred, "\ufdd0:magic-seed", bnds], true)), cljs.core.ObjMap.EMPTY)
};
fogus.datalog.bacwn.impl.magic.seed_rule = function seed_rule(q) {
  var mq = fogus.datalog.bacwn.impl.literals.build_seed_bindings.call(null, fogus.datalog.bacwn.impl.literals.magic_literal.call(null, q));
  var sr = fogus.datalog.bacwn.impl.magic.seed_relation.call(null, mq);
  return fogus.datalog.bacwn.impl.rules.build_rule.call(null, mq, cljs.core.PersistentVector.fromArray([sr], true))
};
fogus.datalog.bacwn.impl.magic.build_partial_tuple = function build_partial_tuple(q, bindings) {
  return cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, cljs.core.remove.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, function(p__4757) {
    var vec__4758 = p__4757;
    var k = cljs.core.nth.call(null, vec__4758, 0, null);
    var v = cljs.core.nth.call(null, vec__4758, 1, null);
    var pair = vec__4758;
    if(cljs.core.truth_(fogus.datalog.bacwn.impl.util.is_var_QMARK_.call(null, v))) {
      return null
    }else {
      if(cljs.core.truth_(fogus.datalog.bacwn.impl.util.is_query_var_QMARK_.call(null, v))) {
        return cljs.core.PersistentVector.fromArray([k, bindings.call(null, v)], true)
      }else {
        return pair
      }
    }
  }, (new cljs.core.Keyword("\ufdd0:term-bindings")).call(null, q))))
};
fogus.datalog.bacwn.impl.magic.seed_predicate_for_insertion = function seed_predicate_for_insertion(q) {
  var seed = cljs.core.first.call(null, (new cljs.core.Keyword("\ufdd0:body")).call(null, fogus.datalog.bacwn.impl.magic.seed_rule.call(null, q)));
  var columns = cljs.core.keys.call(null, (new cljs.core.Keyword("\ufdd0:term-bindings")).call(null, seed));
  var new_term_bindings = cljs.core.select_keys.call(null, (new cljs.core.Keyword("\ufdd0:term-bindings")).call(null, q), columns);
  return cljs.core.assoc.call(null, seed, "\ufdd0:term-bindings", new_term_bindings)
};
fogus.datalog.bacwn.impl.magic.magic_transform = function() {
  var magic_transform = null;
  var magic_transform__1 = function(rs) {
    return magic_transform.call(null, rs, fogus.datalog.bacwn.impl.rules.all_predicates.call(null, rs))
  };
  var magic_transform__2 = function(rs, i_preds) {
    var not_duplicate_QMARK_ = function(l, mh, bd) {
      var or__3943__auto__ = !cljs.core.empty_QMARK_.call(null, bd);
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return!cljs.core._EQ_.call(null, fogus.datalog.bacwn.impl.literals.magic_literal.call(null, l), mh)
      }
    };
    var xr = function(not_duplicate_QMARK_) {
      return function(rs__$1, rule) {
        var head = (new cljs.core.Keyword("\ufdd0:head")).call(null, rule);
        var body = (new cljs.core.Keyword("\ufdd0:body")).call(null, rule);
        var mh = fogus.datalog.bacwn.impl.literals.magic_literal.call(null, head);
        var answer_rule = fogus.datalog.bacwn.impl.rules.build_rule.call(null, head, cljs.core.concat.call(null, cljs.core.PersistentVector.fromArray([mh], true), body));
        var step = function(head, body, mh, answer_rule, not_duplicate_QMARK_) {
          return function(p__4763, l) {
            var vec__4764 = p__4763;
            var rs__$2 = cljs.core.nth.call(null, vec__4764, 0, null);
            var bd = cljs.core.nth.call(null, vec__4764, 1, null);
            if(cljs.core.truth_(function() {
              var and__3941__auto__ = i_preds.call(null, fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, l));
              if(cljs.core.truth_(and__3941__auto__)) {
                return not_duplicate_QMARK_.call(null, l, mh, bd)
              }else {
                return and__3941__auto__
              }
            }())) {
              var nr = fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.magic_literal.call(null, l), cljs.core.concat.call(null, cljs.core.PersistentVector.fromArray([mh], true), bd));
              return cljs.core.PersistentVector.fromArray([cljs.core.conj.call(null, rs__$2, nr), cljs.core.conj.call(null, bd, l)], true)
            }else {
              return cljs.core.PersistentVector.fromArray([rs__$2, cljs.core.conj.call(null, bd, l)], true)
            }
          }
        }(head, body, mh, answer_rule, not_duplicate_QMARK_);
        var vec__4762 = cljs.core.reduce.call(null, step, cljs.core.PersistentVector.fromArray([rs__$1, cljs.core.PersistentVector.EMPTY], true), body);
        var nrs = cljs.core.nth.call(null, vec__4762, 0, null);
        var _ = cljs.core.nth.call(null, vec__4762, 1, null);
        return cljs.core.conj.call(null, nrs, answer_rule)
      }
    }(not_duplicate_QMARK_);
    return cljs.core.reduce.call(null, xr, fogus.datalog.bacwn.impl.rules.empty_rules_set, rs)
  };
  magic_transform = function(rs, i_preds) {
    switch(arguments.length) {
      case 1:
        return magic_transform__1.call(this, rs);
      case 2:
        return magic_transform__2.call(this, rs, i_preds)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  magic_transform.cljs$lang$arity$1 = magic_transform__1;
  magic_transform.cljs$lang$arity$2 = magic_transform__2;
  return magic_transform
}();
goog.provide("fogus.datalog.bacwn.impl.softstrat");
goog.require("cljs.core");
goog.require("clojure.set");
goog.require("fogus.datalog.bacwn.impl.graph");
goog.require("fogus.datalog.bacwn.impl.magic");
goog.require("fogus.datalog.bacwn.impl.rules");
goog.require("fogus.datalog.bacwn.impl.literals");
goog.require("fogus.datalog.bacwn.impl.database");
goog.require("fogus.datalog.bacwn.impl.util");
fogus.datalog.bacwn.impl.softstrat.build_rules_graph = function build_rules_graph(rs) {
  var preds = fogus.datalog.bacwn.impl.rules.all_predicates.call(null, rs);
  var pred_map = fogus.datalog.bacwn.impl.rules.predicate_map.call(null, rs);
  var step = function(preds, pred_map) {
    return function(nbs, pred) {
      var rules = pred_map.call(null, pred);
      var preds__$1 = cljs.core.reduce.call(null, function(rules, preds, pred_map) {
        return function(pds, lits) {
          return cljs.core.reduce.call(null, function(rules, preds, pred_map) {
            return function(pds__$1, lit) {
              var temp__4090__auto__ = fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, lit);
              if(cljs.core.truth_(temp__4090__auto__)) {
                var pred__$1 = temp__4090__auto__;
                return cljs.core.conj.call(null, pds__$1, pred__$1)
              }else {
                return pds__$1
              }
            }
          }(rules, preds, pred_map), pds, lits)
        }
      }(rules, preds, pred_map), cljs.core.PersistentHashSet.EMPTY, cljs.core.map.call(null, "\ufdd0:body", rules));
      return cljs.core.assoc.call(null, nbs, pred, preds__$1)
    }
  }(preds, pred_map);
  var neighbors = cljs.core.reduce.call(null, step, cljs.core.ObjMap.EMPTY, preds);
  return fogus.datalog.bacwn.impl.graph.__GT_DirectedGraph.call(null, preds, neighbors)
};
fogus.datalog.bacwn.impl.softstrat.build_def = function build_def(rs) {
  var pred_map = fogus.datalog.bacwn.impl.rules.predicate_map.call(null, rs);
  var graph = fogus.datalog.bacwn.impl.graph.add_loops.call(null, fogus.datalog.bacwn.impl.graph.transitive_closure.call(null, fogus.datalog.bacwn.impl.softstrat.build_rules_graph.call(null, rs)));
  return function(pred) {
    return cljs.core.apply.call(null, clojure.set.union, cljs.core.map.call(null, cljs.core.set, cljs.core.map.call(null, pred_map, fogus.datalog.bacwn.impl.graph.get_neighbors.call(null, graph, pred))))
  }
};
fogus.datalog.bacwn.impl.softstrat.req = function req(rs, soft_def, rule, lit_index) {
  var head = (new cljs.core.Keyword("\ufdd0:head")).call(null, rule);
  var body = (new cljs.core.Keyword("\ufdd0:body")).call(null, rule);
  var lit = cljs.core.nth.call(null, body, lit_index);
  var pre = cljs.core.subvec.call(null, cljs.core.vec.call(null, body), 0, lit_index);
  return cljs.core.conj.call(null, fogus.datalog.bacwn.impl.magic.magic_transform.call(null, soft_def.call(null, fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, lit)), fogus.datalog.bacwn.impl.rules.all_predicates.call(null, rs)), fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.magic_literal.call(null, lit), pre))
};
fogus.datalog.bacwn.impl.softstrat.rule_dep = function rule_dep(rs, mrs, soft_def, rule) {
  var step = function(nrs, p__4712) {
    var vec__4713 = p__4712;
    var idx = cljs.core.nth.call(null, vec__4713, 0, null);
    var lit = cljs.core.nth.call(null, vec__4713, 1, null);
    if(cljs.core.truth_(fogus.datalog.bacwn.impl.literals.negated_QMARK_.call(null, lit))) {
      return clojure.set.union.call(null, nrs, fogus.datalog.bacwn.impl.softstrat.req.call(null, rs, soft_def, rule, idx))
    }else {
      return nrs
    }
  };
  return clojure.set.intersection.call(null, mrs, cljs.core.reduce.call(null, step, fogus.datalog.bacwn.impl.rules.empty_rules_set, cljs.core.map_indexed.call(null, cljs.core.vector, (new cljs.core.Keyword("\ufdd0:body")).call(null, rule))))
};
fogus.datalog.bacwn.impl.softstrat.soft_strat_graph = function soft_strat_graph(rs, mrs) {
  var soft_def = fogus.datalog.bacwn.impl.softstrat.build_def.call(null, rs);
  var step = function(soft_def) {
    return function(nbrs, rule) {
      return cljs.core.assoc.call(null, nbrs, rule, fogus.datalog.bacwn.impl.softstrat.rule_dep.call(null, rs, mrs, soft_def, rule))
    }
  }(soft_def);
  var nbrs = cljs.core.reduce.call(null, step, cljs.core.ObjMap.EMPTY, mrs);
  return fogus.datalog.bacwn.impl.graph.__GT_DirectedGraph.call(null, mrs, nbrs)
};
fogus.datalog.bacwn.impl.softstrat.build_soft_strat = function build_soft_strat(rs, q) {
  var ars = fogus.datalog.bacwn.impl.magic.adorn_rules_set.call(null, rs, q);
  var mrs = cljs.core.conj.call(null, fogus.datalog.bacwn.impl.magic.magic_transform.call(null, ars), fogus.datalog.bacwn.impl.magic.seed_rule.call(null, q));
  var gr = fogus.datalog.bacwn.impl.softstrat.soft_strat_graph.call(null, ars, mrs);
  return cljs.core.map.call(null, fogus.datalog.bacwn.impl.rules.make_rules_set, fogus.datalog.bacwn.impl.graph.dependency_list.call(null, gr))
};
goog.provide("fogus.datalog.bacwn.impl.softstrat.SoftStratWorkPlan");
fogus.datalog.bacwn.impl.softstrat.SoftStratWorkPlan = function(query, stratification, __meta, __extmap) {
  this.query = query;
  this.stratification = stratification;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if(arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap
  }else {
    this.__meta = null;
    this.__extmap = null
  }
};
fogus.datalog.bacwn.impl.softstrat.SoftStratWorkPlan.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4043__auto__) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_imap.call(null, this__4043__auto__);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
fogus.datalog.bacwn.impl.softstrat.SoftStratWorkPlan.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4048__auto__, k__4049__auto__) {
  var self__ = this;
  return this__4048__auto__.cljs$core$ILookup$_lookup$arity$3(this__4048__auto__, k__4049__auto__, null)
};
fogus.datalog.bacwn.impl.softstrat.SoftStratWorkPlan.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4050__auto__, k4715, else__4051__auto__) {
  var self__ = this;
  if(k4715 === "\ufdd0:query") {
    return self__.query
  }else {
    if(k4715 === "\ufdd0:stratification") {
      return self__.stratification
    }else {
      if("\ufdd0:else") {
        return cljs.core._lookup.call(null, self__.__extmap, k4715, else__4051__auto__)
      }else {
        return null
      }
    }
  }
};
fogus.datalog.bacwn.impl.softstrat.SoftStratWorkPlan.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4055__auto__, k__4056__auto__, G__4714) {
  var self__ = this;
  var pred__4717 = cljs.core.identical_QMARK_;
  var expr__4718 = k__4056__auto__;
  if(pred__4717.call(null, "\ufdd0:query", expr__4718)) {
    return new fogus.datalog.bacwn.impl.softstrat.SoftStratWorkPlan(G__4714, self__.stratification, self__.__meta, self__.__extmap, null)
  }else {
    if(pred__4717.call(null, "\ufdd0:stratification", expr__4718)) {
      return new fogus.datalog.bacwn.impl.softstrat.SoftStratWorkPlan(self__.query, G__4714, self__.__meta, self__.__extmap, null)
    }else {
      return new fogus.datalog.bacwn.impl.softstrat.SoftStratWorkPlan(self__.query, self__.stratification, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4056__auto__, G__4714), null)
    }
  }
};
fogus.datalog.bacwn.impl.softstrat.SoftStratWorkPlan.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4062__auto__, writer__4063__auto__, opts__4064__auto__) {
  var self__ = this;
  var pr_pair__4065__auto__ = function(keyval__4066__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__4063__auto__, cljs.core.pr_writer, "", " ", "", opts__4064__auto__, keyval__4066__auto__)
  };
  return cljs.core.pr_sequential_writer.call(null, writer__4063__auto__, pr_pair__4065__auto__, [cljs.core.str("#"), cljs.core.str("SoftStratWorkPlan"), cljs.core.str("{")].join(""), ", ", "}", opts__4064__auto__, cljs.core.concat.call(null, cljs.core.PersistentVector.fromArray([cljs.core.vector.call(null, "\ufdd0:query", self__.query), cljs.core.vector.call(null, "\ufdd0:stratification", self__.stratification)], true), self__.__extmap))
};
fogus.datalog.bacwn.impl.softstrat.SoftStratWorkPlan.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4053__auto__, entry__4054__auto__) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry__4054__auto__)) {
    return this__4053__auto__.cljs$core$IAssociative$_assoc$arity$3(this__4053__auto__, cljs.core._nth.call(null, entry__4054__auto__, 0), cljs.core._nth.call(null, entry__4054__auto__, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4053__auto__, entry__4054__auto__)
  }
};
fogus.datalog.bacwn.impl.softstrat.SoftStratWorkPlan.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.PersistentVector.fromArray([cljs.core.vector.call(null, "\ufdd0:query", self__.query), cljs.core.vector.call(null, "\ufdd0:stratification", self__.stratification)], true), self__.__extmap))
};
fogus.datalog.bacwn.impl.softstrat.SoftStratWorkPlan.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4052__auto__) {
  var self__ = this;
  return 2 + cljs.core.count.call(null, self__.__extmap)
};
fogus.datalog.bacwn.impl.softstrat.SoftStratWorkPlan.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4044__auto__, other__4045__auto__) {
  var self__ = this;
  if(cljs.core.truth_(function() {
    var and__3941__auto__ = other__4045__auto__;
    if(cljs.core.truth_(and__3941__auto__)) {
      var and__3941__auto____$1 = this__4044__auto__.constructor === other__4045__auto__.constructor;
      if(and__3941__auto____$1) {
        return cljs.core.equiv_map.call(null, this__4044__auto__, other__4045__auto__)
      }else {
        return and__3941__auto____$1
      }
    }else {
      return and__3941__auto__
    }
  }())) {
    return true
  }else {
    return false
  }
};
fogus.datalog.bacwn.impl.softstrat.SoftStratWorkPlan.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4047__auto__, G__4714) {
  var self__ = this;
  return new fogus.datalog.bacwn.impl.softstrat.SoftStratWorkPlan(self__.query, self__.stratification, G__4714, self__.__extmap, self__.__hash)
};
fogus.datalog.bacwn.impl.softstrat.SoftStratWorkPlan.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4046__auto__) {
  var self__ = this;
  return self__.__meta
};
fogus.datalog.bacwn.impl.softstrat.SoftStratWorkPlan.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4057__auto__, k__4058__auto__) {
  var self__ = this;
  if(cljs.core.contains_QMARK_.call(null, cljs.core.PersistentHashSet.fromArray(["\ufdd0:stratification", "\ufdd0:query"]), k__4058__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, this__4057__auto__), self__.__meta), k__4058__auto__)
  }else {
    return new fogus.datalog.bacwn.impl.softstrat.SoftStratWorkPlan(self__.query, self__.stratification, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4058__auto__)), null)
  }
};
fogus.datalog.bacwn.impl.softstrat.SoftStratWorkPlan.cljs$lang$type = true;
fogus.datalog.bacwn.impl.softstrat.SoftStratWorkPlan.cljs$lang$ctorPrSeq = function(this__4083__auto__) {
  return cljs.core.list.call(null, "fogus.datalog.bacwn.impl.softstrat/SoftStratWorkPlan")
};
fogus.datalog.bacwn.impl.softstrat.SoftStratWorkPlan.cljs$lang$ctorPrWriter = function(this__4083__auto__, writer__4084__auto__) {
  return cljs.core._write.call(null, writer__4084__auto__, "fogus.datalog.bacwn.impl.softstrat/SoftStratWorkPlan")
};
fogus.datalog.bacwn.impl.softstrat.__GT_SoftStratWorkPlan = function __GT_SoftStratWorkPlan(query, stratification) {
  return new fogus.datalog.bacwn.impl.softstrat.SoftStratWorkPlan(query, stratification)
};
fogus.datalog.bacwn.impl.softstrat.map__GT_SoftStratWorkPlan = function map__GT_SoftStratWorkPlan(G__4716) {
  return new fogus.datalog.bacwn.impl.softstrat.SoftStratWorkPlan((new cljs.core.Keyword("\ufdd0:query")).call(null, G__4716), (new cljs.core.Keyword("\ufdd0:stratification")).call(null, G__4716), null, cljs.core.dissoc.call(null, G__4716, "\ufdd0:query", "\ufdd0:stratification"))
};
fogus.datalog.bacwn.impl.softstrat.build_soft_strat_work_plan = function build_soft_strat_work_plan(rs, q) {
  var aq = fogus.datalog.bacwn.impl.magic.adorn_query.call(null, q);
  return fogus.datalog.bacwn.impl.softstrat.__GT_SoftStratWorkPlan.call(null, aq, fogus.datalog.bacwn.impl.softstrat.build_soft_strat.call(null, rs, aq))
};
fogus.datalog.bacwn.impl.softstrat.get_all_relations = function get_all_relations(ws) {
  return cljs.core.apply.call(null, clojure.set.union, cljs.core.map.call(null, fogus.datalog.bacwn.impl.rules.all_predicates, (new cljs.core.Keyword("\ufdd0:stratification")).call(null, ws)))
};
fogus.datalog.bacwn.impl.softstrat.weak_consq_operator = function weak_consq_operator(db, strat) {
  var counts = fogus.datalog.bacwn.impl.database.database_counts.call(null, db);
  var strat__$1 = strat;
  while(true) {
    var rs = cljs.core.first.call(null, strat__$1);
    if(cljs.core.truth_(rs)) {
      var new_db = fogus.datalog.bacwn.impl.rules.apply_rules_set.call(null, db, rs);
      if(cljs.core._EQ_.call(null, counts, fogus.datalog.bacwn.impl.database.database_counts.call(null, new_db))) {
        var G__4720 = cljs.core.next.call(null, strat__$1);
        strat__$1 = G__4720;
        continue
      }else {
        return new_db
      }
    }else {
      return db
    }
    break
  }
};
fogus.datalog.bacwn.impl.softstrat.evaluate_soft_work_set = function() {
  var evaluate_soft_work_set = null;
  var evaluate_soft_work_set__2 = function(ws, db) {
    return evaluate_soft_work_set.call(null, ws, db, cljs.core.ObjMap.EMPTY)
  };
  var evaluate_soft_work_set__3 = function(ws, db, bindings) {
    var query = (new cljs.core.Keyword("\ufdd0:query")).call(null, ws);
    var strat = (new cljs.core.Keyword("\ufdd0:stratification")).call(null, ws);
    var seed = fogus.datalog.bacwn.impl.magic.seed_predicate_for_insertion.call(null, query);
    var seeded_db = fogus.datalog.bacwn.impl.literals.project_literal.call(null, db, seed, cljs.core.PersistentVector.fromArray([bindings], true), fogus.datalog.bacwn.impl.util.is_query_var_QMARK_);
    var fun = function(query, strat, seed, seeded_db) {
      return function(data) {
        return fogus.datalog.bacwn.impl.softstrat.weak_consq_operator.call(null, data, strat)
      }
    }(query, strat, seed, seeded_db);
    var equal = function(query, strat, seed, seeded_db, fun) {
      return function(db1, db2) {
        return cljs.core._EQ_.call(null, fogus.datalog.bacwn.impl.database.database_counts.call(null, db1), fogus.datalog.bacwn.impl.database.database_counts.call(null, db2))
      }
    }(query, strat, seed, seeded_db, fun);
    var new_db = fogus.datalog.bacwn.impl.graph.fixed_point.call(null, seeded_db, fun, null, equal);
    var pt = fogus.datalog.bacwn.impl.magic.build_partial_tuple.call(null, query, bindings);
    return fogus.datalog.bacwn.impl.database.select.call(null, new_db, fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, query), pt)
  };
  evaluate_soft_work_set = function(ws, db, bindings) {
    switch(arguments.length) {
      case 2:
        return evaluate_soft_work_set__2.call(this, ws, db);
      case 3:
        return evaluate_soft_work_set__3.call(this, ws, db, bindings)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  evaluate_soft_work_set.cljs$lang$arity$2 = evaluate_soft_work_set__2;
  evaluate_soft_work_set.cljs$lang$arity$3 = evaluate_soft_work_set__3;
  return evaluate_soft_work_set
}();
goog.provide("fogus.datalog.bacwn.impl.syntax");
goog.require("cljs.core");
fogus.datalog.bacwn.impl.syntax.ID_KEY = "\ufdd0:db.id";
fogus.datalog.bacwn.impl.syntax.nums = cljs.core.atom.call(null, 0);
fogus.datalog.bacwn.impl.syntax.explode = function explode(entity) {
  var relation_type = cljs.core.keyword.call(null, cljs.core.namespace.call(null, cljs.core.ffirst.call(null, cljs.core.seq.call(null, entity))));
  var id_key = cljs.core.keyword.call(null, cljs.core.name.call(null, relation_type), "db.id");
  var id = cljs.core._lookup.call(null, entity, id_key, null);
  var id__$1 = cljs.core.truth_(id) ? id : cljs.core.swap_BANG_.call(null, fogus.datalog.bacwn.impl.syntax.nums, cljs.core.inc);
  var kvs = cljs.core.seq.call(null, cljs.core.dissoc.call(null, entity, id_key));
  return cljs.core.vec.call(null, cljs.core.apply.call(null, cljs.core.concat, cljs.core.PersistentVector.fromArray([relation_type, "\ufdd0:db.id", id__$1], true), cljs.core.reduce.call(null, function(acc, p__4602) {
    var vec__4603 = p__4602;
    var k = cljs.core.nth.call(null, vec__4603, 0, null);
    var v = cljs.core.nth.call(null, vec__4603, 1, null);
    return cljs.core.cons.call(null, cljs.core.PersistentVector.fromArray([cljs.core.keyword.call(null, cljs.core.name.call(null, k)), v], true), acc)
  }, cljs.core.PersistentVector.EMPTY, kvs)))
};
fogus.datalog.bacwn.impl.syntax.agg = function agg(tuples) {
  return cljs.core.group_by.call(null, cljs.core.comp.call(null, cljs.core.keyword, cljs.core.namespace, cljs.core.second), tuples)
};
fogus.datalog.bacwn.impl.syntax.propagate = function propagate(agg) {
  return cljs.core.apply.call(null, cljs.core.concat, function() {
    var iter__4187__auto__ = function iter__4609(s__4610) {
      return new cljs.core.LazySeq(null, false, function() {
        var s__4610__$1 = s__4610;
        while(true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__4610__$1);
          if(temp__4092__auto__) {
            var xs__4579__auto__ = temp__4092__auto__;
            var vec__4612 = cljs.core.first.call(null, xs__4579__auto__);
            var k = cljs.core.nth.call(null, vec__4612, 0, null);
            var v = cljs.core.nth.call(null, vec__4612, 1, null);
            return cljs.core.cons.call(null, cljs.core.map.call(null, function(vec__4612, k, v, xs__4579__auto__, temp__4092__auto__) {
              return function(p1__4604_SHARP_) {
                return cljs.core.vec.call(null, cljs.core.cons.call(null, k, p1__4604_SHARP_))
              }
            }(vec__4612, k, v, xs__4579__auto__, temp__4092__auto__), v), iter__4609.call(null, cljs.core.rest.call(null, s__4610__$1)))
          }else {
            return null
          }
          break
        }
      }, null)
    };
    return iter__4187__auto__.call(null, agg)
  }())
};
fogus.datalog.bacwn.impl.syntax.shuffle_tuples = function shuffle_tuples(tups) {
  var ids = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  return cljs.core.map.call(null, function(p__4615) {
    var vec__4616 = p__4615;
    var nspace = cljs.core.nth.call(null, vec__4616, 0, null);
    var id = cljs.core.nth.call(null, vec__4616, 1, null);
    var prop = cljs.core.nth.call(null, vec__4616, 2, null);
    var val = cljs.core.nth.call(null, vec__4616, 3, null);
    return cljs.core.PersistentVector.fromArray([nspace, fogus.datalog.bacwn.impl.syntax.ID_KEY, cljs.core._lookup.call(null, cljs.core.swap_BANG_.call(null, ids, function(m) {
      var temp__4090__auto__ = cljs.core._lookup.call(null, m, id, null);
      if(cljs.core.truth_(temp__4090__auto__)) {
        var i = temp__4090__auto__;
        return m
      }else {
        var i = cljs.core.swap_BANG_.call(null, fogus.datalog.bacwn.impl.syntax.nums, cljs.core.inc);
        return cljs.core.assoc.call(null, m, id, i)
      }
    }), id, null), cljs.core.keyword.call(null, cljs.core.name.call(null, prop)), val], true)
  }, tups)
};
goog.provide("fogus.datalog.bacwn");
goog.require("cljs.core");
goog.require("clojure.set");
goog.require("fogus.datalog.bacwn.impl.syntax");
goog.require("fogus.datalog.bacwn.impl.softstrat");
goog.require("fogus.datalog.bacwn.impl.rules");
goog.require("fogus.datalog.bacwn.impl.database");
goog.provide("fogus.datalog.bacwn.WorkPlan");
fogus.datalog.bacwn.WorkPlan = function(work_plan, rules, query, work_plan_type, __meta, __extmap) {
  this.work_plan = work_plan;
  this.rules = rules;
  this.query = query;
  this.work_plan_type = work_plan_type;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if(arguments.length > 4) {
    this.__meta = __meta;
    this.__extmap = __extmap
  }else {
    this.__meta = null;
    this.__extmap = null
  }
};
fogus.datalog.bacwn.WorkPlan.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4043__auto__) {
  var self__ = this;
  var h__3911__auto__ = self__.__hash;
  if(!(h__3911__auto__ == null)) {
    return h__3911__auto__
  }else {
    var h__3911__auto____$1 = cljs.core.hash_imap.call(null, this__4043__auto__);
    self__.__hash = h__3911__auto____$1;
    return h__3911__auto____$1
  }
};
fogus.datalog.bacwn.WorkPlan.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4048__auto__, k__4049__auto__) {
  var self__ = this;
  return this__4048__auto__.cljs$core$ILookup$_lookup$arity$3(this__4048__auto__, k__4049__auto__, null)
};
fogus.datalog.bacwn.WorkPlan.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4050__auto__, k4766, else__4051__auto__) {
  var self__ = this;
  if(k4766 === "\ufdd0:work-plan") {
    return self__.work_plan
  }else {
    if(k4766 === "\ufdd0:rules") {
      return self__.rules
    }else {
      if(k4766 === "\ufdd0:query") {
        return self__.query
      }else {
        if(k4766 === "\ufdd0:work-plan-type") {
          return self__.work_plan_type
        }else {
          if("\ufdd0:else") {
            return cljs.core._lookup.call(null, self__.__extmap, k4766, else__4051__auto__)
          }else {
            return null
          }
        }
      }
    }
  }
};
fogus.datalog.bacwn.WorkPlan.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4055__auto__, k__4056__auto__, G__4765) {
  var self__ = this;
  var pred__4768 = cljs.core.identical_QMARK_;
  var expr__4769 = k__4056__auto__;
  if(pred__4768.call(null, "\ufdd0:work-plan", expr__4769)) {
    return new fogus.datalog.bacwn.WorkPlan(G__4765, self__.rules, self__.query, self__.work_plan_type, self__.__meta, self__.__extmap, null)
  }else {
    if(pred__4768.call(null, "\ufdd0:rules", expr__4769)) {
      return new fogus.datalog.bacwn.WorkPlan(self__.work_plan, G__4765, self__.query, self__.work_plan_type, self__.__meta, self__.__extmap, null)
    }else {
      if(pred__4768.call(null, "\ufdd0:query", expr__4769)) {
        return new fogus.datalog.bacwn.WorkPlan(self__.work_plan, self__.rules, G__4765, self__.work_plan_type, self__.__meta, self__.__extmap, null)
      }else {
        if(pred__4768.call(null, "\ufdd0:work-plan-type", expr__4769)) {
          return new fogus.datalog.bacwn.WorkPlan(self__.work_plan, self__.rules, self__.query, G__4765, self__.__meta, self__.__extmap, null)
        }else {
          return new fogus.datalog.bacwn.WorkPlan(self__.work_plan, self__.rules, self__.query, self__.work_plan_type, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4056__auto__, G__4765), null)
        }
      }
    }
  }
};
fogus.datalog.bacwn.WorkPlan.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4062__auto__, writer__4063__auto__, opts__4064__auto__) {
  var self__ = this;
  var pr_pair__4065__auto__ = function(keyval__4066__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__4063__auto__, cljs.core.pr_writer, "", " ", "", opts__4064__auto__, keyval__4066__auto__)
  };
  return cljs.core.pr_sequential_writer.call(null, writer__4063__auto__, pr_pair__4065__auto__, [cljs.core.str("#"), cljs.core.str("WorkPlan"), cljs.core.str("{")].join(""), ", ", "}", opts__4064__auto__, cljs.core.concat.call(null, cljs.core.PersistentVector.fromArray([cljs.core.vector.call(null, "\ufdd0:work-plan", self__.work_plan), cljs.core.vector.call(null, "\ufdd0:rules", self__.rules), cljs.core.vector.call(null, "\ufdd0:query", self__.query), cljs.core.vector.call(null, "\ufdd0:work-plan-type", 
  self__.work_plan_type)], true), self__.__extmap))
};
fogus.datalog.bacwn.WorkPlan.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4053__auto__, entry__4054__auto__) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry__4054__auto__)) {
    return this__4053__auto__.cljs$core$IAssociative$_assoc$arity$3(this__4053__auto__, cljs.core._nth.call(null, entry__4054__auto__, 0), cljs.core._nth.call(null, entry__4054__auto__, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4053__auto__, entry__4054__auto__)
  }
};
fogus.datalog.bacwn.WorkPlan.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.PersistentVector.fromArray([cljs.core.vector.call(null, "\ufdd0:work-plan", self__.work_plan), cljs.core.vector.call(null, "\ufdd0:rules", self__.rules), cljs.core.vector.call(null, "\ufdd0:query", self__.query), cljs.core.vector.call(null, "\ufdd0:work-plan-type", self__.work_plan_type)], true), self__.__extmap))
};
fogus.datalog.bacwn.WorkPlan.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4052__auto__) {
  var self__ = this;
  return 4 + cljs.core.count.call(null, self__.__extmap)
};
fogus.datalog.bacwn.WorkPlan.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4044__auto__, other__4045__auto__) {
  var self__ = this;
  if(cljs.core.truth_(function() {
    var and__3941__auto__ = other__4045__auto__;
    if(cljs.core.truth_(and__3941__auto__)) {
      var and__3941__auto____$1 = this__4044__auto__.constructor === other__4045__auto__.constructor;
      if(and__3941__auto____$1) {
        return cljs.core.equiv_map.call(null, this__4044__auto__, other__4045__auto__)
      }else {
        return and__3941__auto____$1
      }
    }else {
      return and__3941__auto__
    }
  }())) {
    return true
  }else {
    return false
  }
};
fogus.datalog.bacwn.WorkPlan.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4047__auto__, G__4765) {
  var self__ = this;
  return new fogus.datalog.bacwn.WorkPlan(self__.work_plan, self__.rules, self__.query, self__.work_plan_type, G__4765, self__.__extmap, self__.__hash)
};
fogus.datalog.bacwn.WorkPlan.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4046__auto__) {
  var self__ = this;
  return self__.__meta
};
fogus.datalog.bacwn.WorkPlan.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4057__auto__, k__4058__auto__) {
  var self__ = this;
  if(cljs.core.contains_QMARK_.call(null, cljs.core.PersistentHashSet.fromArray(["\ufdd0:work-plan", "\ufdd0:rules", "\ufdd0:query", "\ufdd0:work-plan-type"]), k__4058__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, this__4057__auto__), self__.__meta), k__4058__auto__)
  }else {
    return new fogus.datalog.bacwn.WorkPlan(self__.work_plan, self__.rules, self__.query, self__.work_plan_type, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4058__auto__)), null)
  }
};
fogus.datalog.bacwn.WorkPlan.cljs$lang$type = true;
fogus.datalog.bacwn.WorkPlan.cljs$lang$ctorPrSeq = function(this__4083__auto__) {
  return cljs.core.list.call(null, "fogus.datalog.bacwn/WorkPlan")
};
fogus.datalog.bacwn.WorkPlan.cljs$lang$ctorPrWriter = function(this__4083__auto__, writer__4084__auto__) {
  return cljs.core._write.call(null, writer__4084__auto__, "fogus.datalog.bacwn/WorkPlan")
};
fogus.datalog.bacwn.__GT_WorkPlan = function __GT_WorkPlan(work_plan, rules, query, work_plan_type) {
  return new fogus.datalog.bacwn.WorkPlan(work_plan, rules, query, work_plan_type)
};
fogus.datalog.bacwn.map__GT_WorkPlan = function map__GT_WorkPlan(G__4767) {
  return new fogus.datalog.bacwn.WorkPlan((new cljs.core.Keyword("\ufdd0:work-plan")).call(null, G__4767), (new cljs.core.Keyword("\ufdd0:rules")).call(null, G__4767), (new cljs.core.Keyword("\ufdd0:query")).call(null, G__4767), (new cljs.core.Keyword("\ufdd0:work-plan-type")).call(null, G__4767), null, cljs.core.dissoc.call(null, G__4767, "\ufdd0:work-plan", "\ufdd0:rules", "\ufdd0:query", "\ufdd0:work-plan-type"))
};
fogus.datalog.bacwn.validate_work_plan = function validate_work_plan(work_plan, database) {
  var common_relations = clojure.set.intersection.call(null, (new cljs.core.Keyword("\ufdd0:rules")).call(null, work_plan), cljs.core.set.call(null, cljs.core.keys.call(null, database)));
  if(!cljs.core.empty_QMARK_.call(null, common_relations)) {
    throw new Error([cljs.core.str("The rules and database define the same relation(s):"), cljs.core.str(common_relations)].join(""));
  }else {
    return null
  }
};
fogus.datalog.bacwn.build_work_plan = function build_work_plan(rules, query) {
  return fogus.datalog.bacwn.__GT_WorkPlan.call(null, fogus.datalog.bacwn.impl.softstrat.build_soft_strat_work_plan.call(null, rules, query), rules, query, "\ufdd0:fogus.datalog.bacwn/soft-stratified")
};
fogus.datalog.bacwn.run_work_plan = function run_work_plan(work_plan, database, query_bindings) {
  fogus.datalog.bacwn.validate_work_plan.call(null, work_plan, database);
  return fogus.datalog.bacwn.impl.softstrat.evaluate_soft_work_set.call(null, (new cljs.core.Keyword("\ufdd0:work-plan")).call(null, work_plan), database, query_bindings)
};
fogus.datalog.bacwn.q = function q(query, db, rules, bindings) {
  return fogus.datalog.bacwn.run_work_plan.call(null, fogus.datalog.bacwn.build_work_plan.call(null, rules, query), db, bindings)
};
goog.provide("example");
goog.require("cljs.core");
goog.require("fogus.datalog.bacwn.impl.database");
goog.require("fogus.datalog.bacwn.impl.rules");
goog.require("fogus.datalog.bacwn");
example.db_base = fogus.datalog.bacwn.impl.database.add_relation.call(null, fogus.datalog.bacwn.impl.database.add_relation.call(null, fogus.datalog.bacwn.impl.database.add_index.call(null, fogus.datalog.bacwn.impl.database.add_relation.call(null, fogus.datalog.bacwn.impl.database.add_index.call(null, fogus.datalog.bacwn.impl.database.add_relation.call(null, fogus.datalog.bacwn.impl.database.add_index.call(null, fogus.datalog.bacwn.impl.database.add_relation.call(null, fogus.datalog.bacwn.impl.database.empty_database, 
"\ufdd0:employee", cljs.core.PersistentVector.fromArray(["\ufdd0:id", "\ufdd0:name", "\ufdd0:position"], true)), "\ufdd0:employee", "\ufdd0:name"), "\ufdd0:boss", cljs.core.PersistentVector.fromArray(["\ufdd0:employee-id", "\ufdd0:boss-id"], true)), "\ufdd0:boss", "\ufdd0:employee-id"), "\ufdd0:can-do-job", cljs.core.PersistentVector.fromArray(["\ufdd0:position", "\ufdd0:job"], true)), "\ufdd0:can-do-job", "\ufdd0:position"), "\ufdd0:job-replacement", cljs.core.PersistentVector.fromArray(["\ufdd0:job", 
"\ufdd0:can-be-done-by"], true)), "\ufdd0:job-exceptions", cljs.core.PersistentVector.fromArray(["\ufdd0:id", "\ufdd0:job"], true));
example.db = fogus.datalog.bacwn.impl.database.add_tuples.call(null, example.db_base, cljs.core.PersistentVector.fromArray(["\ufdd0:employee", "\ufdd0:id", 1, "\ufdd0:name", "Bob", "\ufdd0:position", "\ufdd0:boss"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:employee", "\ufdd0:id", 2, "\ufdd0:name", "Mary", "\ufdd0:position", "\ufdd0:chief-accountant"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:employee", "\ufdd0:id", 3, "\ufdd0:name", "John", "\ufdd0:position", "\ufdd0:accountant"], 
true), cljs.core.PersistentVector.fromArray(["\ufdd0:employee", "\ufdd0:id", 4, "\ufdd0:name", "Sameer", "\ufdd0:position", "\ufdd0:chief-programmer"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:employee", "\ufdd0:id", 5, "\ufdd0:name", "Lilian", "\ufdd0:position", "\ufdd0:programmer"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:employee", "\ufdd0:id", 6, "\ufdd0:name", "Li", "\ufdd0:position", "\ufdd0:technician"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:employee", 
"\ufdd0:id", 7, "\ufdd0:name", "Fred", "\ufdd0:position", "\ufdd0:sales"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:employee", "\ufdd0:id", 8, "\ufdd0:name", "Brenda", "\ufdd0:position", "\ufdd0:sales"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:employee", "\ufdd0:id", 9, "\ufdd0:name", "Miki", "\ufdd0:position", "\ufdd0:project-management"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:employee", "\ufdd0:id", 10, "\ufdd0:name", "Albert", "\ufdd0:position", "\ufdd0:technician"], 
true), cljs.core.PersistentVector.fromArray(["\ufdd0:boss", "\ufdd0:employee-id", 2, "\ufdd0:boss-id", 1], true), cljs.core.PersistentVector.fromArray(["\ufdd0:boss", "\ufdd0:employee-id", 3, "\ufdd0:boss-id", 2], true), cljs.core.PersistentVector.fromArray(["\ufdd0:boss", "\ufdd0:employee-id", 4, "\ufdd0:boss-id", 1], true), cljs.core.PersistentVector.fromArray(["\ufdd0:boss", "\ufdd0:employee-id", 5, "\ufdd0:boss-id", 4], true), cljs.core.PersistentVector.fromArray(["\ufdd0:boss", "\ufdd0:employee-id", 
6, "\ufdd0:boss-id", 4], true), cljs.core.PersistentVector.fromArray(["\ufdd0:boss", "\ufdd0:employee-id", 7, "\ufdd0:boss-id", 1], true), cljs.core.PersistentVector.fromArray(["\ufdd0:boss", "\ufdd0:employee-id", 8, "\ufdd0:boss-id", 7], true), cljs.core.PersistentVector.fromArray(["\ufdd0:boss", "\ufdd0:employee-id", 9, "\ufdd0:boss-id", 1], true), cljs.core.PersistentVector.fromArray(["\ufdd0:boss", "\ufdd0:employee-id", 10, "\ufdd0:boss-id", 6], true), cljs.core.PersistentVector.fromArray(["\ufdd0:can-do-job", 
"\ufdd0:position", "\ufdd0:boss", "\ufdd0:job", "\ufdd0:management"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:can-do-job", "\ufdd0:position", "\ufdd0:accountant", "\ufdd0:job", "\ufdd0:accounting"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:can-do-job", "\ufdd0:position", "\ufdd0:chief-accountant", "\ufdd0:job", "\ufdd0:accounting"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:can-do-job", "\ufdd0:position", "\ufdd0:programmer", "\ufdd0:job", "\ufdd0:programming"], 
true), cljs.core.PersistentVector.fromArray(["\ufdd0:can-do-job", "\ufdd0:position", "\ufdd0:chief-programmer", "\ufdd0:job", "\ufdd0:programming"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:can-do-job", "\ufdd0:position", "\ufdd0:technician", "\ufdd0:job", "\ufdd0:server-support"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:can-do-job", "\ufdd0:position", "\ufdd0:sales", "\ufdd0:job", "\ufdd0:sales"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:can-do-job", "\ufdd0:position", 
"\ufdd0:project-management", "\ufdd0:job", "\ufdd0:project-management"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:job-replacement", "\ufdd0:job", "\ufdd0:pc-support", "\ufdd0:can-be-done-by", "\ufdd0:server-support"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:job-replacement", "\ufdd0:job", "\ufdd0:pc-support", "\ufdd0:can-be-done-by", "\ufdd0:programming"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:job-replacement", "\ufdd0:job", "\ufdd0:payroll", "\ufdd0:can-be-done-by", 
"\ufdd0:accounting"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:job-exceptions", "\ufdd0:id", 4, "\ufdd0:job", "\ufdd0:pc-support"], true));
example.rules = fogus.datalog.bacwn.impl.rules.rules_set.call(null, fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:works-for", cljs.core.ObjMap.fromObject(["\ufdd0:boss", "\ufdd0:employee"], {"\ufdd0:boss":"\ufdd1'?y", "\ufdd0:employee":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, 
"\ufdd0:boss", cljs.core.ObjMap.fromObject(["\ufdd0:boss-id", "\ufdd0:employee-id"], {"\ufdd0:boss-id":"\ufdd1'?b-id", "\ufdd0:employee-id":"\ufdd1'?e-id"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:employee", cljs.core.ObjMap.fromObject(["\ufdd0:name", "\ufdd0:id"], {"\ufdd0:name":"\ufdd1'?x", "\ufdd0:id":"\ufdd1'?e-id"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, 
"\ufdd0:employee", cljs.core.ObjMap.fromObject(["\ufdd0:name", "\ufdd0:id"], {"\ufdd0:name":"\ufdd1'?y", "\ufdd0:id":"\ufdd1'?b-id"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:works-for", cljs.core.ObjMap.fromObject(["\ufdd0:boss", "\ufdd0:employee"], {"\ufdd0:boss":"\ufdd1'?y", "\ufdd0:employee":"\ufdd1'?x"}), 
"\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:works-for", cljs.core.ObjMap.fromObject(["\ufdd0:boss", "\ufdd0:employee"], {"\ufdd0:boss":"\ufdd1'?z", "\ufdd0:employee":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:works-for", cljs.core.ObjMap.fromObject(["\ufdd0:boss", "\ufdd0:employee"], 
{"\ufdd0:boss":"\ufdd1'?y", "\ufdd0:employee":"\ufdd1'?z"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:employee-job*", cljs.core.ObjMap.fromObject(["\ufdd0:job", "\ufdd0:employee"], {"\ufdd0:job":"\ufdd1'?y", "\ufdd0:employee":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, 
"\ufdd0:employee", cljs.core.ObjMap.fromObject(["\ufdd0:position", "\ufdd0:name"], {"\ufdd0:position":"\ufdd1'?pos", "\ufdd0:name":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:can-do-job", cljs.core.ObjMap.fromObject(["\ufdd0:job", "\ufdd0:position"], {"\ufdd0:job":"\ufdd1'?y", "\ufdd0:position":"\ufdd1'?pos"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, 
fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:employee-job*", cljs.core.ObjMap.fromObject(["\ufdd0:job", "\ufdd0:employee"], {"\ufdd0:job":"\ufdd1'?y", "\ufdd0:employee":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:job-replacement", cljs.core.ObjMap.fromObject(["\ufdd0:can-be-done-by", "\ufdd0:job"], 
{"\ufdd0:can-be-done-by":"\ufdd1'?z", "\ufdd0:job":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:employee-job*", cljs.core.ObjMap.fromObject(["\ufdd0:job", "\ufdd0:employee"], {"\ufdd0:job":"\ufdd1'?z", "\ufdd0:employee":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, 
fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:employee-job*", cljs.core.ObjMap.fromObject(["\ufdd0:job", "\ufdd0:employee"], {"\ufdd0:job":"\ufdd1'?y", "\ufdd0:employee":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:can-do-job", cljs.core.ObjMap.fromObject(["\ufdd0:job"], {"\ufdd0:job":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), 
fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:employee", cljs.core.ObjMap.fromObject(["\ufdd0:position", "\ufdd0:name"], {"\ufdd0:position":"\ufdd1'?z", "\ufdd0:name":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_ConditionalLiteral.call(null, function(binds__3454__auto__) {
  return cljs.core.apply.call(null, cljs.core._EQ_, binds__3454__auto__)
}, "\ufdd1'=", cljs.core.list("\ufdd1'?z", "\ufdd0:boss"), "\ufdd0:fogus.datalog.bacwn.impl.literals/conditional")], true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:employee-job", cljs.core.ObjMap.fromObject(["\ufdd0:job", "\ufdd0:employee"], {"\ufdd0:job":"\ufdd1'?y", "\ufdd0:employee":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, 
"\ufdd0:employee-job*", cljs.core.ObjMap.fromObject(["\ufdd0:job", "\ufdd0:employee"], {"\ufdd0:job":"\ufdd1'?y", "\ufdd0:employee":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:employee", cljs.core.ObjMap.fromObject(["\ufdd0:name", "\ufdd0:id"], {"\ufdd0:name":"\ufdd1'?x", "\ufdd0:id":"\ufdd1'?id"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, 
"\ufdd0:job-exceptions", cljs.core.ObjMap.fromObject(["\ufdd0:job", "\ufdd0:id"], {"\ufdd0:job":"\ufdd1'?y", "\ufdd0:id":"\ufdd1'?id"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/negated")], true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:bj", cljs.core.ObjMap.fromObject(["\ufdd0:boss", "\ufdd0:name"], {"\ufdd0:boss":"\ufdd1'?y", "\ufdd0:name":"\ufdd1'?x"}), 
"\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:works-for", cljs.core.ObjMap.fromObject(["\ufdd0:boss", "\ufdd0:employee"], {"\ufdd0:boss":"\ufdd1'?y", "\ufdd0:employee":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:employee-job", cljs.core.ObjMap.fromObject(["\ufdd0:job", "\ufdd0:employee"], 
{"\ufdd0:job":"\ufdd0:pc-support", "\ufdd0:employee":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/negated")], true))));
example.wp_1 = fogus.datalog.bacwn.build_work_plan.call(null, example.rules, cljs.core.with_meta.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:works-for", cljs.core.ObjMap.fromObject(["\ufdd0:boss", "\ufdd0:employee"], {"\ufdd0:boss":"\ufdd1'?x", "\ufdd0:employee":"\ufdd1'??name"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.ObjMap.fromObject(["\ufdd0:type"], {"\ufdd0:type":"\ufdd0:fogus.datalog.bacwn.impl.rules/datalog-query"})));
example.wp_2 = fogus.datalog.bacwn.build_work_plan.call(null, example.rules, cljs.core.with_meta.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:employee-job", cljs.core.ObjMap.fromObject(["\ufdd0:job", "\ufdd0:employee"], {"\ufdd0:job":"\ufdd1'?x", "\ufdd0:employee":"\ufdd1'??name"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.ObjMap.fromObject(["\ufdd0:type"], {"\ufdd0:type":"\ufdd0:fogus.datalog.bacwn.impl.rules/datalog-query"})));
example.wp_3 = fogus.datalog.bacwn.build_work_plan.call(null, example.rules, cljs.core.with_meta.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:bj", cljs.core.ObjMap.fromObject(["\ufdd0:boss", "\ufdd0:name"], {"\ufdd0:boss":"\ufdd1'?x", "\ufdd0:name":"\ufdd1'??name"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.ObjMap.fromObject(["\ufdd0:type"], {"\ufdd0:type":"\ufdd0:fogus.datalog.bacwn.impl.rules/datalog-query"})));
example.wp_4 = fogus.datalog.bacwn.build_work_plan.call(null, example.rules, cljs.core.with_meta.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:works-for", cljs.core.ObjMap.fromObject(["\ufdd0:boss", "\ufdd0:employee"], {"\ufdd0:boss":"\ufdd1'?y", "\ufdd0:employee":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.ObjMap.fromObject(["\ufdd0:type"], {"\ufdd0:type":"\ufdd0:fogus.datalog.bacwn.impl.rules/datalog-query"})));
fogus.datalog.bacwn.run_work_plan.call(null, example.wp_1, example.db, cljs.core.PersistentArrayMap.fromArrays(["\ufdd1'??name"], ["Albert"]));
fogus.datalog.bacwn.run_work_plan.call(null, example.wp_2, example.db, cljs.core.PersistentArrayMap.fromArrays(["\ufdd1'??name"], ["Li"]));
fogus.datalog.bacwn.run_work_plan.call(null, example.wp_3, example.db, cljs.core.PersistentArrayMap.fromArrays(["\ufdd1'??name"], ["Albert"]));
fogus.datalog.bacwn.run_work_plan.call(null, example.wp_4, example.db, cljs.core.ObjMap.EMPTY);
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll)
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("")
};
clojure.string.replace = function replace(s, match, replacement) {
  if(cljs.core.string_QMARK_.call(null, match)) {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement)
  }else {
    if(cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement)
    }else {
      if("\ufdd0:else") {
        throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
      }else {
        return null
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement)
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll)
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll))
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$lang$arity$1 = join__1;
  join.cljs$lang$arity$2 = join__2;
  return join
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase()
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase()
};
clojure.string.capitalize = function capitalize(s) {
  if(cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s)
  }else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("")
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re))
  };
  var split__3 = function(s, re, limit) {
    if(limit < 1) {
      return cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re))
    }else {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while(true) {
        if(cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1)
        }else {
          var temp__4090__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if(cljs.core.truth_(temp__4090__auto__)) {
            var m = temp__4090__auto__;
            var index = s__$1.indexOf(m);
            var G__6168 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__6169 = limit__$1 - 1;
            var G__6170 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__6168;
            limit__$1 = G__6169;
            parts = G__6170;
            continue
          }else {
            return cljs.core.conj.call(null, parts, s__$1)
          }
        }
        break
      }
    }
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$lang$arity$2 = split__2;
  split.cljs$lang$arity$3 = split__3;
  return split
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/)
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s)
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s)
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s)
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while(true) {
    if(index === 0) {
      return""
    }else {
      var ch = cljs.core._lookup.call(null, s, index - 1, null);
      if(cljs.core.truth_(function() {
        var or__3943__auto__ = cljs.core._EQ_.call(null, ch, "\n");
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          return cljs.core._EQ_.call(null, ch, "\r")
        }
      }())) {
        var G__6171 = index - 1;
        index = G__6171;
        continue
      }else {
        return s.substring(0, index)
      }
    }
    break
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s)
};
clojure.string.escape = function escape(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while(true) {
    if(cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString()
    }else {
      var ch = s.charAt(index);
      var temp__4090__auto___6172 = cljs.core._lookup.call(null, cmap, ch, null);
      if(cljs.core.truth_(temp__4090__auto___6172)) {
        var replacement_6173 = temp__4090__auto___6172;
        buffer.append([cljs.core.str(replacement_6173)].join(""))
      }else {
        buffer.append(ch)
      }
      var G__6174 = index + 1;
      index = G__6174;
      continue
    }
    break
  }
};
goog.provide("cemerick.cljs.test");
goog.require("cljs.core");
goog.require("clojure.string");
cemerick.cljs.test._STAR_report_counters_STAR_ = null;
cemerick.cljs.test._STAR_initial_report_counters_STAR_ = cljs.core.ObjMap.fromObject(["\ufdd0:test", "\ufdd0:pass", "\ufdd0:fail", "\ufdd0:error"], {"\ufdd0:test":0, "\ufdd0:pass":0, "\ufdd0:fail":0, "\ufdd0:error":0});
cemerick.cljs.test._STAR_testing_vars_STAR_ = cljs.core.list.call(null);
cemerick.cljs.test._STAR_testing_contexts_STAR_ = cljs.core.list.call(null);
cemerick.cljs.test._STAR_test_print_fn_STAR_ = null;
cemerick.cljs.test.registered_tests = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
cemerick.cljs.test.registered_test_hooks = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
cemerick.cljs.test.registered_fixtures = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
cemerick.cljs.test.register_test_BANG_ = function register_test_BANG_(ns, name) {
  return cljs.core.swap_BANG_.call(null, cemerick.cljs.test.registered_tests, cljs.core.update_in, cljs.core.PersistentVector.fromArray([ns], true), cljs.core.fnil.call(null, cljs.core.conj, cljs.core.PersistentHashSet.EMPTY), name)
};
cemerick.cljs.test.register_test_ns_hook_BANG_ = function register_test_ns_hook_BANG_(ns, name) {
  return cljs.core.swap_BANG_.call(null, cemerick.cljs.test.registered_test_hooks, cljs.core.assoc, ns, name)
};
cemerick.cljs.test.testing_vars_str = function testing_vars_str(m) {
  var map__6130 = m;
  var map__6130__$1 = cljs.core.seq_QMARK_.call(null, map__6130) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6130) : map__6130;
  var line = cljs.core._lookup.call(null, map__6130__$1, "\ufdd0:line", null);
  var file = cljs.core._lookup.call(null, map__6130__$1, "\ufdd0:file", null);
  return[cljs.core.str(cljs.core.pr_str.call(null, cljs.core.reverse.call(null, cemerick.cljs.test._STAR_testing_vars_STAR_))), cljs.core.str(" ("), cljs.core.str(file), cljs.core.str(":"), cljs.core.str(line), cljs.core.str(")")].join("")
};
cemerick.cljs.test.testing_contexts_str = function testing_contexts_str() {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, " ", cljs.core.reverse.call(null, cemerick.cljs.test._STAR_testing_contexts_STAR_)))
};
cemerick.cljs.test.inc_report_counter = function inc_report_counter(name) {
  if(cljs.core.truth_(cemerick.cljs.test._STAR_report_counters_STAR_)) {
    return cljs.core.swap_BANG_.call(null, cemerick.cljs.test._STAR_report_counters_STAR_, cljs.core.update_in, cljs.core.PersistentVector.fromArray([name], true), cljs.core.fnil.call(null, cljs.core.inc, 0))
  }else {
    return null
  }
};
cemerick.cljs.test.report = function() {
  var method_table__4262__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var prefer_table__4263__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var method_cache__4264__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var cached_hierarchy__4265__auto__ = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var hierarchy__4266__auto__ = cljs.core._lookup.call(null, cljs.core.ObjMap.EMPTY, "\ufdd0:hierarchy", cljs.core.global_hierarchy);
  return new cljs.core.MultiFn("report", "\ufdd0:type", "\ufdd0:default", hierarchy__4266__auto__, method_table__4262__auto__, prefer_table__4263__auto__, method_cache__4264__auto__, cached_hierarchy__4265__auto__)
}();
cemerick.cljs.test.file_and_line = function file_and_line(error) {
  return cljs.core.ObjMap.fromObject(["\ufdd0:file", "\ufdd0:line"], {"\ufdd0:file":error.fileName, "\ufdd0:line":error.lineNumber})
};
cemerick.cljs.test.do_report = function do_report(m) {
  return cemerick.cljs.test.report.call(null, function() {
    var G__6132 = (new cljs.core.Keyword("\ufdd0:type")).call(null, m);
    if(cljs.core._EQ_.call(null, "\ufdd0:error", G__6132)) {
      return cljs.core.merge.call(null, cemerick.cljs.test.file_and_line.call(null, (new cljs.core.Keyword("\ufdd0:actual")).call(null, m)), m)
    }else {
      if(cljs.core._EQ_.call(null, "\ufdd0:fail", G__6132)) {
        return cljs.core.merge.call(null, cemerick.cljs.test.file_and_line.call(null, Error()), m)
      }else {
        if("\ufdd0:else") {
          return m
        }else {
          return null
        }
      }
    }
  }())
};
cljs.core._add_method.call(null, cemerick.cljs.test.report, "\ufdd0:default", function(m) {
  var _STAR_print_fn_STAR_6133 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3943__auto__ = cemerick.cljs.test._STAR_test_print_fn_STAR_;
      if(cljs.core.truth_(or__3943__auto__)) {
        return or__3943__auto__
      }else {
        return cljs.core._STAR_print_fn_STAR_
      }
    }();
    return cljs.core.prn.call(null, m)
  }finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_6133
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, "\ufdd0:pass", function(m) {
  var _STAR_print_fn_STAR_6135 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3943__auto__ = cemerick.cljs.test._STAR_test_print_fn_STAR_;
      if(cljs.core.truth_(or__3943__auto__)) {
        return or__3943__auto__
      }else {
        return cljs.core._STAR_print_fn_STAR_
      }
    }();
    return cemerick.cljs.test.inc_report_counter.call(null, "\ufdd0:pass")
  }finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_6135
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, "\ufdd0:fail", function(m) {
  var _STAR_print_fn_STAR_6137 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3943__auto__ = cemerick.cljs.test._STAR_test_print_fn_STAR_;
      if(cljs.core.truth_(or__3943__auto__)) {
        return or__3943__auto__
      }else {
        return cljs.core._STAR_print_fn_STAR_
      }
    }();
    cemerick.cljs.test.inc_report_counter.call(null, "\ufdd0:fail");
    cljs.core.println.call(null, "\nFAIL in", cemerick.cljs.test.testing_vars_str.call(null, m));
    if(cljs.core.seq.call(null, cemerick.cljs.test._STAR_testing_contexts_STAR_)) {
      cljs.core.println.call(null, cemerick.cljs.test.testing_contexts_str.call(null))
    }else {
    }
    var temp__4092__auto___6139 = (new cljs.core.Keyword("\ufdd0:message")).call(null, m);
    if(cljs.core.truth_(temp__4092__auto___6139)) {
      var message_6140 = temp__4092__auto___6139;
      cljs.core.println.call(null, message_6140)
    }else {
    }
    cljs.core.println.call(null, "expected:", cljs.core.pr_str.call(null, (new cljs.core.Keyword("\ufdd0:expected")).call(null, m)));
    return cljs.core.println.call(null, "  actual:", cljs.core.pr_str.call(null, (new cljs.core.Keyword("\ufdd0:actual")).call(null, m)))
  }finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_6137
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, "\ufdd0:error", function(m) {
  var _STAR_print_fn_STAR_6141 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3943__auto__ = cemerick.cljs.test._STAR_test_print_fn_STAR_;
      if(cljs.core.truth_(or__3943__auto__)) {
        return or__3943__auto__
      }else {
        return cljs.core._STAR_print_fn_STAR_
      }
    }();
    cemerick.cljs.test.inc_report_counter.call(null, "\ufdd0:error");
    cljs.core.println.call(null, "\nERROR in", cemerick.cljs.test.testing_vars_str.call(null, m));
    if(cljs.core.seq.call(null, cemerick.cljs.test._STAR_testing_contexts_STAR_)) {
      cljs.core.println.call(null, cemerick.cljs.test.testing_contexts_str.call(null))
    }else {
    }
    var temp__4092__auto___6143 = (new cljs.core.Keyword("\ufdd0:message")).call(null, m);
    if(cljs.core.truth_(temp__4092__auto___6143)) {
      var message_6144 = temp__4092__auto___6143;
      cljs.core.println.call(null, message_6144)
    }else {
    }
    cljs.core.println.call(null, "expected:", cljs.core.pr_str.call(null, (new cljs.core.Keyword("\ufdd0:expected")).call(null, m)));
    cljs.core.print.call(null, "  actual: ");
    var actual = (new cljs.core.Keyword("\ufdd0:actual")).call(null, m);
    if(cljs.core.instance_QMARK_.call(null, Error, actual)) {
      return cljs.core.println.call(null, actual.stack)
    }else {
      return cljs.core.prn.call(null, actual)
    }
  }finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_6141
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, "\ufdd0:summary", function(m) {
  var _STAR_print_fn_STAR_6145 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3943__auto__ = cemerick.cljs.test._STAR_test_print_fn_STAR_;
      if(cljs.core.truth_(or__3943__auto__)) {
        return or__3943__auto__
      }else {
        return cljs.core._STAR_print_fn_STAR_
      }
    }();
    cljs.core.println.call(null, "\nRan", (new cljs.core.Keyword("\ufdd0:test")).call(null, m), "tests containing", (new cljs.core.Keyword("\ufdd0:pass")).call(null, m) + (new cljs.core.Keyword("\ufdd0:fail")).call(null, m) + (new cljs.core.Keyword("\ufdd0:error")).call(null, m), "assertions.");
    return cljs.core.println.call(null, (new cljs.core.Keyword("\ufdd0:fail")).call(null, m), "failures,", (new cljs.core.Keyword("\ufdd0:error")).call(null, m), "errors.")
  }finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_6145
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, "\ufdd0:begin-test-ns", function(m) {
  var _STAR_print_fn_STAR_6147 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3943__auto__ = cemerick.cljs.test._STAR_test_print_fn_STAR_;
      if(cljs.core.truth_(or__3943__auto__)) {
        return or__3943__auto__
      }else {
        return cljs.core._STAR_print_fn_STAR_
      }
    }();
    return cljs.core.println.call(null, "\nTesting", (new cljs.core.Keyword("\ufdd0:ns")).call(null, m))
  }finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_6147
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, "\ufdd0:end-test-ns", function(m) {
  return null
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, "\ufdd0:begin-test-var", function(m) {
  return null
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, "\ufdd0:end-test-var", function(m) {
  return null
});
cemerick.cljs.test.register_fixtures_BANG_ = function() {
  var register_fixtures_BANG___delegate = function(ns_sym, fixture_type, fixture_fns) {
    return cljs.core.swap_BANG_.call(null, cemerick.cljs.test.registered_fixtures, cljs.core.update_in, cljs.core.PersistentVector.fromArray([ns_sym, fixture_type], true), cljs.core.constantly.call(null, fixture_fns))
  };
  var register_fixtures_BANG_ = function(ns_sym, fixture_type, var_args) {
    var fixture_fns = null;
    if(goog.isDef(var_args)) {
      fixture_fns = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
    }
    return register_fixtures_BANG___delegate.call(this, ns_sym, fixture_type, fixture_fns)
  };
  register_fixtures_BANG_.cljs$lang$maxFixedArity = 2;
  register_fixtures_BANG_.cljs$lang$applyTo = function(arglist__6149) {
    var ns_sym = cljs.core.first(arglist__6149);
    var fixture_type = cljs.core.first(cljs.core.next(arglist__6149));
    var fixture_fns = cljs.core.rest(cljs.core.next(arglist__6149));
    return register_fixtures_BANG___delegate(ns_sym, fixture_type, fixture_fns)
  };
  register_fixtures_BANG_.cljs$lang$arity$variadic = register_fixtures_BANG___delegate;
  return register_fixtures_BANG_
}();
cemerick.cljs.test.default_fixture = function default_fixture(f) {
  return f.call(null)
};
cemerick.cljs.test.compose_fixtures = function compose_fixtures(f1, f2) {
  return function(g) {
    return f1.call(null, function() {
      return f2.call(null, g)
    })
  }
};
cemerick.cljs.test.join_fixtures = function join_fixtures(fixtures) {
  return cljs.core.reduce.call(null, cemerick.cljs.test.compose_fixtures, cemerick.cljs.test.default_fixture, fixtures)
};
cemerick.cljs.test.test_var = function test_var(v) {
  if(cljs.core.fn_QMARK_.call(null, v)) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("test-var must be passed the function to be tested (not a symbol naming it)"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'fn?", "\ufdd1'v"), cljs.core.hash_map("\ufdd0:line", 177, "\ufdd0:column", 11))))].join(""));
  }
  var temp__4092__auto__ = (new cljs.core.Keyword("\ufdd0:test")).call(null, cljs.core.meta.call(null, v));
  if(cljs.core.truth_(temp__4092__auto__)) {
    var t = temp__4092__auto__;
    var _STAR_testing_vars_STAR_6153 = cemerick.cljs.test._STAR_testing_vars_STAR_;
    try {
      cemerick.cljs.test._STAR_testing_vars_STAR_ = cljs.core.conj.call(null, cemerick.cljs.test._STAR_testing_vars_STAR_, function() {
        var or__3943__auto__ = (new cljs.core.Keyword("\ufdd0:name")).call(null, cljs.core.meta.call(null, v));
        if(cljs.core.truth_(or__3943__auto__)) {
          return or__3943__auto__
        }else {
          return v
        }
      }());
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:type", "\ufdd0:var"], {"\ufdd0:type":"\ufdd0:begin-test-var", "\ufdd0:var":v}));
      cemerick.cljs.test.inc_report_counter.call(null, "\ufdd0:test");
      try {
        t.call(null)
      }catch(e6155) {
        if(cljs.core.instance_QMARK_.call(null, Error, e6155)) {
          var e_6156 = e6155;
          cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:type", "\ufdd0:message", "\ufdd0:expected", "\ufdd0:actual"], {"\ufdd0:type":"\ufdd0:error", "\ufdd0:message":"Uncaught exception, not in assertion.", "\ufdd0:expected":null, "\ufdd0:actual":e_6156}))
        }else {
          if("\ufdd0:else") {
            throw e6155;
          }else {
          }
        }
      }
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:type", "\ufdd0:var"], {"\ufdd0:type":"\ufdd0:end-test-var", "\ufdd0:var":v}))
    }finally {
      cemerick.cljs.test._STAR_testing_vars_STAR_ = _STAR_testing_vars_STAR_6153
    }
  }else {
    return null
  }
};
cemerick.cljs.test.test_all_vars = function test_all_vars(ns_sym) {
  var once_fixture_fn = cemerick.cljs.test.join_fixtures.call(null, (new cljs.core.Keyword("\ufdd0:once")).call(null, ns_sym.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_fixtures))));
  var each_fixture_fn = cemerick.cljs.test.join_fixtures.call(null, (new cljs.core.Keyword("\ufdd0:each")).call(null, ns_sym.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_fixtures))));
  return once_fixture_fn.call(null, function() {
    var G__6158 = cljs.core.seq.call(null, cljs.core._lookup.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_tests), ns_sym, null));
    while(true) {
      if(G__6158) {
        var v = cljs.core.first.call(null, G__6158);
        if(cljs.core.truth_((new cljs.core.Keyword("\ufdd0:test")).call(null, cljs.core.meta.call(null, v)))) {
          each_fixture_fn.call(null, function(G__6158, v) {
            return function() {
              return cemerick.cljs.test.test_var.call(null, v)
            }
          }(G__6158, v))
        }else {
        }
        var G__6159 = cljs.core.next.call(null, G__6158);
        G__6158 = G__6159;
        continue
      }else {
        return null
      }
      break
    }
  })
};
cemerick.cljs.test.test_ns = function test_ns(ns_sym) {
  var _STAR_report_counters_STAR_6162 = cemerick.cljs.test._STAR_report_counters_STAR_;
  try {
    cemerick.cljs.test._STAR_report_counters_STAR_ = cljs.core.atom.call(null, cemerick.cljs.test._STAR_initial_report_counters_STAR_);
    cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:type", "\ufdd0:ns"], {"\ufdd0:type":"\ufdd0:begin-test-ns", "\ufdd0:ns":ns_sym}));
    var temp__4090__auto___6164 = cljs.core._lookup.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_test_hooks), ns_sym, null);
    if(cljs.core.truth_(temp__4090__auto___6164)) {
      var test_hook_6165 = temp__4090__auto___6164;
      test_hook_6165.call(null)
    }else {
      cemerick.cljs.test.test_all_vars.call(null, ns_sym)
    }
    cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:type", "\ufdd0:ns"], {"\ufdd0:type":"\ufdd0:end-test-ns", "\ufdd0:ns":ns_sym}));
    return cljs.core.deref.call(null, cemerick.cljs.test._STAR_report_counters_STAR_)
  }finally {
    cemerick.cljs.test._STAR_report_counters_STAR_ = _STAR_report_counters_STAR_6162
  }
};
cemerick.cljs.test.run_tests_STAR_ = function() {
  var run_tests_STAR___delegate = function(namespaces) {
    var summary = cljs.core.assoc.call(null, cljs.core.apply.call(null, cljs.core.merge_with, cljs.core._PLUS_, cljs.core.map.call(null, cemerick.cljs.test.test_ns, namespaces)), "\ufdd0:type", "\ufdd0:summary");
    cemerick.cljs.test.do_report.call(null, summary);
    return summary
  };
  var run_tests_STAR_ = function(var_args) {
    var namespaces = null;
    if(goog.isDef(var_args)) {
      namespaces = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return run_tests_STAR___delegate.call(this, namespaces)
  };
  run_tests_STAR_.cljs$lang$maxFixedArity = 0;
  run_tests_STAR_.cljs$lang$applyTo = function(arglist__6167) {
    var namespaces = cljs.core.seq(arglist__6167);
    return run_tests_STAR___delegate(namespaces)
  };
  run_tests_STAR_.cljs$lang$arity$variadic = run_tests_STAR___delegate;
  return run_tests_STAR_
}();
goog.exportSymbol("cemerick.cljs.test.run_tests_STAR_", cemerick.cljs.test.run_tests_STAR_);
cemerick.cljs.test.run_all_tests = function() {
  var run_all_tests = null;
  var run_all_tests__0 = function() {
    return cljs.core.apply.call(null, cemerick.cljs.test.run_tests_STAR_, cljs.core.keys.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_tests)))
  };
  var run_all_tests__1 = function(re) {
    return cljs.core.apply.call(null, cemerick.cljs.test.run_tests_STAR_, cljs.core.filter.call(null, function(p1__6166_SHARP_) {
      return cljs.core.re_matches.call(null, re, cljs.core.name.call(null, p1__6166_SHARP_))
    }, cljs.core.keys.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_tests))))
  };
  run_all_tests = function(re) {
    switch(arguments.length) {
      case 0:
        return run_all_tests__0.call(this);
      case 1:
        return run_all_tests__1.call(this, re)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  run_all_tests.cljs$lang$arity$0 = run_all_tests__0;
  run_all_tests.cljs$lang$arity$1 = run_all_tests__1;
  return run_all_tests
}();
goog.exportSymbol("cemerick.cljs.test.run_all_tests", cemerick.cljs.test.run_all_tests);
cemerick.cljs.test.successful_QMARK_ = function successful_QMARK_(summary) {
  var and__3941__auto__ = (new cljs.core.Keyword("\ufdd0:fail")).call(null, summary, 0) === 0;
  if(and__3941__auto__) {
    return(new cljs.core.Keyword("\ufdd0:error")).call(null, summary, 0) === 0
  }else {
    return and__3941__auto__
  }
};
goog.exportSymbol("cemerick.cljs.test.successful_QMARK_", cemerick.cljs.test.successful_QMARK_);
cemerick.cljs.test.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f
};
goog.exportSymbol("cemerick.cljs.test.set_print_fn_BANG_", cemerick.cljs.test.set_print_fn_BANG_);
goog.provide("bacwn.test.impl.test_rules");
goog.require("cljs.core");
goog.require("fogus.datalog.bacwn.impl.database");
goog.require("fogus.datalog.bacwn.impl.rules");
goog.require("fogus.datalog.bacwn.impl.database");
goog.require("fogus.datalog.bacwn.impl.rules");
goog.require("cemerick.cljs.test");
bacwn.test.impl.test_rules.tr_1 = fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:fred", cljs.core.ObjMap.fromObject(["\ufdd0:y", "\ufdd0:x"], {"\ufdd0:y":"\ufdd1'?y", "\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:mary", cljs.core.ObjMap.fromObject(["\ufdd0:z", 
"\ufdd0:x"], {"\ufdd0:z":"\ufdd1'?z", "\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:sally", cljs.core.ObjMap.fromObject(["\ufdd0:y", "\ufdd0:z"], {"\ufdd0:y":"\ufdd1'?y", "\ufdd0:z":"\ufdd1'?z"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true)));
bacwn.test.impl.test_rules.tr_2 = fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:fred", null, "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:mary", cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":3}), "\ufdd0:fogus.datalog.bacwn.impl.literals/negated")], 
true)));
bacwn.test.impl.test_rules.tr_3 = fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:fred", cljs.core.ObjMap.fromObject(["\ufdd0:y", "\ufdd0:x"], {"\ufdd0:y":"\ufdd1'?y", "\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_ConditionalLiteral.call(null, function(binds__3454__auto__) {
  return cljs.core.apply.call(null, cljs.core._GT_, binds__3454__auto__)
}, "\ufdd1'>", cljs.core.list("\ufdd1'?x", "\ufdd1'?y"), "\ufdd0:fogus.datalog.bacwn.impl.literals/conditional"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:mary", cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:sally", cljs.core.ObjMap.fromObject(["\ufdd0:y"], {"\ufdd0:y":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], 
true)));
bacwn.test.impl.test_rules.test_rule_safety = function test_rule_safety() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_rules.test_rule_safety)
};
bacwn.test.impl.test_rules.test_rule_safety = cljs.core.vary_meta.call(null, bacwn.test.impl.test_rules.test_rule_safety, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-rule-safety", "\ufdd0:test", function test_rule_safety_test() {
  try {
    try {
      fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:fred", cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:sally", cljs.core.ObjMap.fromObject(["\ufdd0:y"], {"\ufdd0:y":"\ufdd1'?y"}), 
      "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true)));
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":null, "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'thrown-with-msg?", "\ufdd1'js/Error", /.*Head vars.*not bound.*/, cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:fred", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 
      32, "\ufdd0:column", 29)), cljs.core.with_meta(cljs.core.list("\ufdd0:sally", "\ufdd0:y", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 32, "\ufdd0:column", 43))), cljs.core.hash_map("\ufdd0:line", 32, "\ufdd0:column", 25))), cljs.core.hash_map("\ufdd0:line", 31, "\ufdd0:column", 7))}))
    }catch(e5228) {
      if(cljs.core.instance_QMARK_.call(null, Error, e5228)) {
        var e__4823__auto___5233 = e5228;
        var m__4824__auto___5234 = e__4823__auto___5233.message;
        if(cljs.core.truth_(cljs.core.re_find.call(null, /.*Head vars.*not bound.*/, m__4824__auto___5234))) {
          cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":e__4823__auto___5233, "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'thrown-with-msg?", "\ufdd1'js/Error", /.*Head vars.*not bound.*/, cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:fred", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 
          32, "\ufdd0:column", 29)), cljs.core.with_meta(cljs.core.list("\ufdd0:sally", "\ufdd0:y", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 32, "\ufdd0:column", 43))), cljs.core.hash_map("\ufdd0:line", 32, "\ufdd0:column", 25))), cljs.core.hash_map("\ufdd0:line", 31, "\ufdd0:column", 7))}))
        }else {
          cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":e__4823__auto___5233, "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'thrown-with-msg?", "\ufdd1'js/Error", /.*Head vars.*not bound.*/, cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:fred", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 
          32, "\ufdd0:column", 29)), cljs.core.with_meta(cljs.core.list("\ufdd0:sally", "\ufdd0:y", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 32, "\ufdd0:column", 43))), cljs.core.hash_map("\ufdd0:line", 32, "\ufdd0:column", 25))), cljs.core.hash_map("\ufdd0:line", 31, "\ufdd0:column", 7))}))
        }
      }else {
        if("\ufdd0:else") {
          throw e5228;
        }else {
        }
      }
    }
  }catch(e5227) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5227)) {
      var t__4829__auto___5235 = e5227;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5235, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'thrown-with-msg?", "\ufdd1'js/Error", /.*Head vars.*not bound.*/, cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:fred", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 
      32, "\ufdd0:column", 29)), cljs.core.with_meta(cljs.core.list("\ufdd0:sally", "\ufdd0:y", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 32, "\ufdd0:column", 43))), cljs.core.hash_map("\ufdd0:line", 32, "\ufdd0:column", 25))), cljs.core.hash_map("\ufdd0:line", 31, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5227;
      }else {
      }
    }
  }
  try {
    try {
      fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:fred", cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:becky", cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), 
      "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:sally", cljs.core.ObjMap.fromObject(["\ufdd0:y"], {"\ufdd0:y":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/negated")], true)));
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":null, "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'thrown-with-msg?", "\ufdd1'js/Error", /.*Body vars.*not bound.*negative position.*/, cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:fred", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 
      34, "\ufdd0:column", 29)), cljs.core.with_meta(cljs.core.list("\ufdd0:becky", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 43)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", "\ufdd0:sally", "\ufdd0:y", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 58))), cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 25))), cljs.core.hash_map("\ufdd0:line", 33, "\ufdd0:column", 7))}))
    }catch(e5230) {
      if(cljs.core.instance_QMARK_.call(null, Error, e5230)) {
        var e__4823__auto___5236 = e5230;
        var m__4824__auto___5237 = e__4823__auto___5236.message;
        if(cljs.core.truth_(cljs.core.re_find.call(null, /.*Body vars.*not bound.*negative position.*/, m__4824__auto___5237))) {
          cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":e__4823__auto___5236, "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'thrown-with-msg?", "\ufdd1'js/Error", /.*Body vars.*not bound.*negative position.*/, cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:fred", "\ufdd0:x", "\ufdd1'?x"), 
          cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 29)), cljs.core.with_meta(cljs.core.list("\ufdd0:becky", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 43)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", "\ufdd0:sally", "\ufdd0:y", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 58))), cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 25))), cljs.core.hash_map("\ufdd0:line", 33, "\ufdd0:column", 7))}))
        }else {
          cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":e__4823__auto___5236, "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'thrown-with-msg?", "\ufdd1'js/Error", /.*Body vars.*not bound.*negative position.*/, cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:fred", "\ufdd0:x", "\ufdd1'?x"), 
          cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 29)), cljs.core.with_meta(cljs.core.list("\ufdd0:becky", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 43)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", "\ufdd0:sally", "\ufdd0:y", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 58))), cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 25))), cljs.core.hash_map("\ufdd0:line", 33, "\ufdd0:column", 7))}))
        }
      }else {
        if("\ufdd0:else") {
          throw e5230;
        }else {
        }
      }
    }
  }catch(e5229) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5229)) {
      var t__4829__auto___5238 = e5229;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5238, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'thrown-with-msg?", "\ufdd1'js/Error", /.*Body vars.*not bound.*negative position.*/, cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:fred", "\ufdd0:x", "\ufdd1'?x"), 
      cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 29)), cljs.core.with_meta(cljs.core.list("\ufdd0:becky", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 43)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", "\ufdd0:sally", "\ufdd0:y", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 58))), cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 25))), cljs.core.hash_map("\ufdd0:line", 33, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5229;
      }else {
      }
    }
  }
  try {
    try {
      fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:fred", cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:becky", cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), 
      "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_ConditionalLiteral.call(null, function(binds__3454__auto__) {
        return cljs.core.apply.call(null, cljs.core._GT_, binds__3454__auto__)
      }, "\ufdd1'>", cljs.core.list("\ufdd1'?x", "\ufdd1'?y"), "\ufdd0:fogus.datalog.bacwn.impl.literals/conditional")], true)));
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":null, "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'thrown-with-msg?", "\ufdd1'js/Error", /.*Body vars.*not bound.*negative position.*/, cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:fred", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 
      36, "\ufdd0:column", 29)), cljs.core.with_meta(cljs.core.list("\ufdd0:becky", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 43)), cljs.core.with_meta(cljs.core.list("\ufdd1'if", "\ufdd1'>", "\ufdd1'?x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 58))), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 25))), cljs.core.hash_map("\ufdd0:line", 35, "\ufdd0:column", 7))}))
    }catch(e5232) {
      if(cljs.core.instance_QMARK_.call(null, Error, e5232)) {
        var e__4823__auto__ = e5232;
        var m__4824__auto___5239 = e__4823__auto__.message;
        if(cljs.core.truth_(cljs.core.re_find.call(null, /.*Body vars.*not bound.*negative position.*/, m__4824__auto___5239))) {
          cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":e__4823__auto__, "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'thrown-with-msg?", "\ufdd1'js/Error", /.*Body vars.*not bound.*negative position.*/, cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:fred", "\ufdd0:x", "\ufdd1'?x"), 
          cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 29)), cljs.core.with_meta(cljs.core.list("\ufdd0:becky", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 43)), cljs.core.with_meta(cljs.core.list("\ufdd1'if", "\ufdd1'>", "\ufdd1'?x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 58))), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 25))), cljs.core.hash_map("\ufdd0:line", 35, "\ufdd0:column", 7))}))
        }else {
          cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":e__4823__auto__, "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'thrown-with-msg?", "\ufdd1'js/Error", /.*Body vars.*not bound.*negative position.*/, cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:fred", "\ufdd0:x", "\ufdd1'?x"), 
          cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 29)), cljs.core.with_meta(cljs.core.list("\ufdd0:becky", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 43)), cljs.core.with_meta(cljs.core.list("\ufdd1'if", "\ufdd1'>", "\ufdd1'?x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 58))), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 25))), cljs.core.hash_map("\ufdd0:line", 35, "\ufdd0:column", 7))}))
        }
        return e__4823__auto__
      }else {
        if("\ufdd0:else") {
          throw e5232;
        }else {
          return null
        }
      }
    }
  }catch(e5231) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5231)) {
      var t__4829__auto__ = e5231;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'thrown-with-msg?", "\ufdd1'js/Error", /.*Body vars.*not bound.*negative position.*/, cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:fred", "\ufdd0:x", "\ufdd1'?x"), 
      cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 29)), cljs.core.with_meta(cljs.core.list("\ufdd0:becky", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 43)), cljs.core.with_meta(cljs.core.list("\ufdd1'if", "\ufdd1'>", "\ufdd1'?x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 58))), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 25))), cljs.core.hash_map("\ufdd0:line", 35, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5231;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-rules", bacwn.test.impl.test_rules.test_rule_safety);
bacwn.test.impl.test_rules.test_sip = function test_sip() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_rules.test_sip)
};
bacwn.test.impl.test_rules.test_sip = cljs.core.vary_meta.call(null, bacwn.test.impl.test_rules.test_sip, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-sip", "\ufdd0:test", function test_sip_test() {
  try {
    var values__4792__auto___5250 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.rules.compute_sip.call(null, cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"]), cljs.core.PersistentHashSet.fromArray(["\ufdd0:mary", "\ufdd0:sally"]), bacwn.test.impl.test_rules.tr_1), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], 
    {"\ufdd0:pred":"\ufdd0:fred", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:y", "\ufdd0:x"], {"\ufdd0:y":"\ufdd1'?y", "\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:mary", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), 
    cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:z"], {"\ufdd0:x":"\ufdd1'?x", "\ufdd0:z":"\ufdd1'?z"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:sally", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:z"])}), cljs.core.ObjMap.fromObject(["\ufdd0:z", "\ufdd0:y"], {"\ufdd0:z":"\ufdd1'?z", "\ufdd0:y":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], 
    true))));
    var result__4793__auto___5251 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5250);
    if(cljs.core.truth_(result__4793__auto___5251)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5250), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'compute-sip", cljs.core.set(["\ufdd0:x"]), cljs.core.set(["\ufdd0:mary", "\ufdd0:sally"]), "\ufdd1'tr-1"), cljs.core.hash_map("\ufdd0:line", 
      40, "\ufdd0:column", 10)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:fred", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x", "\ufdd0:y", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 41, "\ufdd0:column", 14)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:mary", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:z", "\ufdd1'?z", "\ufdd0:x", "\ufdd1'?x"), 
      cljs.core.hash_map("\ufdd0:line", 42, "\ufdd0:column", 14)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:sally", "\ufdd0:bound", cljs.core.set(["\ufdd0:z"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:z", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 43, "\ufdd0:column", 14))), cljs.core.hash_map("\ufdd0:line", 41, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 40, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5250)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'compute-sip", cljs.core.set(["\ufdd0:x"]), cljs.core.set(["\ufdd0:mary", 
      "\ufdd0:sally"]), "\ufdd1'tr-1"), cljs.core.hash_map("\ufdd0:line", 40, "\ufdd0:column", 10)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:fred", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x", "\ufdd0:y", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 41, "\ufdd0:column", 14)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:mary", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), 
      "\ufdd0:z", "\ufdd1'?z", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 42, "\ufdd0:column", 14)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:sally", "\ufdd0:bound", cljs.core.set(["\ufdd0:z"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:z", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 43, "\ufdd0:column", 14))), cljs.core.hash_map("\ufdd0:line", 41, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 40, "\ufdd0:column", 7))}))
    }
  }catch(e5245) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5245)) {
      var t__4829__auto___5252 = e5245;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5252, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'compute-sip", cljs.core.set(["\ufdd0:x"]), cljs.core.set(["\ufdd0:mary", "\ufdd0:sally"]), "\ufdd1'tr-1"), cljs.core.hash_map("\ufdd0:line", 40, "\ufdd0:column", 
      10)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:fred", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x", "\ufdd0:y", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 41, "\ufdd0:column", 14)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:mary", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:z", "\ufdd1'?z", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 
      42, "\ufdd0:column", 14)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:sally", "\ufdd0:bound", cljs.core.set(["\ufdd0:z"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:z", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 43, "\ufdd0:column", 14))), cljs.core.hash_map("\ufdd0:line", 41, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 40, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5245;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5253 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.rules.compute_sip.call(null, cljs.core.PersistentHashSet.EMPTY, cljs.core.PersistentHashSet.fromArray(["\ufdd0:mary", "\ufdd0:sally"]), bacwn.test.impl.test_rules.tr_1), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:fred", cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y"], {"\ufdd0:x":"\ufdd1'?x", 
    "\ufdd0:y":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:mary", cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:z"], {"\ufdd0:x":"\ufdd1'?x", "\ufdd0:z":"\ufdd1'?z"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:sally", 
    "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:z"])}), cljs.core.ObjMap.fromObject(["\ufdd0:z", "\ufdd0:y"], {"\ufdd0:z":"\ufdd1'?z", "\ufdd0:y":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true))));
    var result__4793__auto___5254 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5253);
    if(cljs.core.truth_(result__4793__auto___5254)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5253), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'compute-sip", cljs.core.set([]), cljs.core.set(["\ufdd0:mary", "\ufdd0:sally"]), "\ufdd1'tr-1"), cljs.core.hash_map("\ufdd0:line", 
      45, "\ufdd0:column", 10)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:fred", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 14)), cljs.core.with_meta(cljs.core.list("\ufdd0:mary", "\ufdd0:z", "\ufdd1'?z", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 34)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:sally", "\ufdd0:bound", 
      cljs.core.set(["\ufdd0:z"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:z", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 54))), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 45, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5253)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'compute-sip", cljs.core.set([]), cljs.core.set(["\ufdd0:mary", "\ufdd0:sally"]), 
      "\ufdd1'tr-1"), cljs.core.hash_map("\ufdd0:line", 45, "\ufdd0:column", 10)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:fred", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 14)), cljs.core.with_meta(cljs.core.list("\ufdd0:mary", "\ufdd0:z", "\ufdd1'?z", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 34)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", 
      "\ufdd0:sally", "\ufdd0:bound", cljs.core.set(["\ufdd0:z"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:z", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 54))), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 45, "\ufdd0:column", 7))}))
    }
  }catch(e5246) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5246)) {
      var t__4829__auto___5255 = e5246;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5255, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'compute-sip", cljs.core.set([]), cljs.core.set(["\ufdd0:mary", "\ufdd0:sally"]), "\ufdd1'tr-1"), cljs.core.hash_map("\ufdd0:line", 45, "\ufdd0:column", 10)), 
      cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:fred", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 14)), cljs.core.with_meta(cljs.core.list("\ufdd0:mary", "\ufdd0:z", "\ufdd1'?z", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 34)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:sally", "\ufdd0:bound", cljs.core.set(["\ufdd0:z"])), 
      "\ufdd0:y", "\ufdd1'?y", "\ufdd0:z", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 54))), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 45, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5246;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5256 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.rules.compute_sip.call(null, cljs.core.PersistentHashSet.EMPTY, cljs.core.PersistentHashSet.fromArray(["\ufdd0:mary"]), bacwn.test.impl.test_rules.tr_2), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:fred", null, "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, 
    cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:mary", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":3}), "\ufdd0:fogus.datalog.bacwn.impl.literals/negated")], true))));
    var result__4793__auto___5257 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5256);
    if(cljs.core.truth_(result__4793__auto___5257)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5256), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'compute-sip", cljs.core.set([]), cljs.core.set(["\ufdd0:mary"]), "\ufdd1'tr-2"), cljs.core.hash_map("\ufdd0:line", 
      48, "\ufdd0:column", 10)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 49, "\ufdd0:column", 14)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", cljs.core.hash_map("\ufdd0:pred", "\ufdd0:mary", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", 3), cljs.core.hash_map("\ufdd0:line", 49, "\ufdd0:column", 22))), cljs.core.hash_map("\ufdd0:line", 49, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 
      48, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5256)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'compute-sip", cljs.core.set([]), cljs.core.set(["\ufdd0:mary"]), "\ufdd1'tr-2"), 
      cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 10)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 49, "\ufdd0:column", 14)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", cljs.core.hash_map("\ufdd0:pred", "\ufdd0:mary", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", 3), cljs.core.hash_map("\ufdd0:line", 49, "\ufdd0:column", 22))), cljs.core.hash_map("\ufdd0:line", 49, "\ufdd0:column", 
      10))), cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 7))}))
    }
  }catch(e5247) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5247)) {
      var t__4829__auto___5258 = e5247;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5258, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'compute-sip", cljs.core.set([]), cljs.core.set(["\ufdd0:mary"]), "\ufdd1'tr-2"), cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 10)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", 
      cljs.core.with_meta(cljs.core.list("\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 49, "\ufdd0:column", 14)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", cljs.core.hash_map("\ufdd0:pred", "\ufdd0:mary", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", 3), cljs.core.hash_map("\ufdd0:line", 49, "\ufdd0:column", 22))), cljs.core.hash_map("\ufdd0:line", 49, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5247;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5259 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.rules.compute_sip.call(null, cljs.core.PersistentHashSet.EMPTY, cljs.core.PersistentHashSet.EMPTY, bacwn.test.impl.test_rules.tr_2), bacwn.test.impl.test_rules.tr_2);
    var result__4793__auto___5260 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5259);
    if(cljs.core.truth_(result__4793__auto___5260)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5259), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'compute-sip", cljs.core.set([]), cljs.core.set([]), "\ufdd1'tr-2"), cljs.core.hash_map("\ufdd0:line", 51, "\ufdd0:column", 
      10)), "\ufdd1'tr-2"), cljs.core.hash_map("\ufdd0:line", 51, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5259)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'compute-sip", cljs.core.set([]), cljs.core.set([]), "\ufdd1'tr-2"), cljs.core.hash_map("\ufdd0:line", 
      51, "\ufdd0:column", 10)), "\ufdd1'tr-2"), cljs.core.hash_map("\ufdd0:line", 51, "\ufdd0:column", 7))}))
    }
  }catch(e5248) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5248)) {
      var t__4829__auto___5261 = e5248;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5261, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'compute-sip", cljs.core.set([]), cljs.core.set([]), "\ufdd1'tr-2"), cljs.core.hash_map("\ufdd0:line", 51, "\ufdd0:column", 10)), "\ufdd1'tr-2"), cljs.core.hash_map("\ufdd0:line", 
      51, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5248;
      }else {
      }
    }
  }
  try {
    var values__4792__auto__ = cljs.core.list.call(null, fogus.datalog.bacwn.impl.rules.display_rule.call(null, fogus.datalog.bacwn.impl.rules.compute_sip.call(null, cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"]), cljs.core.PersistentHashSet.fromArray(["\ufdd0:mary", "\ufdd0:sally"]), bacwn.test.impl.test_rules.tr_3)), fogus.datalog.bacwn.impl.rules.display_rule.call(null, fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, 
    cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:fred", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:y", "\ufdd0:x"], {"\ufdd0:y":"\ufdd1'?y", "\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:mary", 
    "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:sally", cljs.core.ObjMap.fromObject(["\ufdd0:y"], {"\ufdd0:y":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_ConditionalLiteral.call(null, function(binds__3454__auto__) {
      return cljs.core.apply.call(null, cljs.core._GT_, binds__3454__auto__)
    }, "\ufdd1'>", cljs.core.list("\ufdd1'?x", "\ufdd1'?y"), "\ufdd0:fogus.datalog.bacwn.impl.literals/conditional")], true)))));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'display-rule", cljs.core.with_meta(cljs.core.list("\ufdd1'compute-sip", cljs.core.set(["\ufdd0:x"]), cljs.core.set(["\ufdd0:mary", 
      "\ufdd0:sally"]), "\ufdd1'tr-3"), cljs.core.hash_map("\ufdd0:line", 54, "\ufdd0:column", 24))), cljs.core.hash_map("\ufdd0:line", 54, "\ufdd0:column", 10)), cljs.core.with_meta(cljs.core.list("\ufdd1'display-rule", cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:fred", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x", "\ufdd0:y", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 55, "\ufdd0:column", 
      28)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:mary", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 56, "\ufdd0:column", 28)), cljs.core.with_meta(cljs.core.list("\ufdd0:sally", "\ufdd0:y", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 57, "\ufdd0:column", 28)), cljs.core.with_meta(cljs.core.list("\ufdd1'if", "\ufdd1'>", "\ufdd1'?x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 58, "\ufdd0:column", 
      28))), cljs.core.hash_map("\ufdd0:line", 55, "\ufdd0:column", 24))), cljs.core.hash_map("\ufdd0:line", 55, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 54, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'display-rule", cljs.core.with_meta(cljs.core.list("\ufdd1'compute-sip", cljs.core.set(["\ufdd0:x"]), 
      cljs.core.set(["\ufdd0:mary", "\ufdd0:sally"]), "\ufdd1'tr-3"), cljs.core.hash_map("\ufdd0:line", 54, "\ufdd0:column", 24))), cljs.core.hash_map("\ufdd0:line", 54, "\ufdd0:column", 10)), cljs.core.with_meta(cljs.core.list("\ufdd1'display-rule", cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:fred", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x", "\ufdd0:y", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 
      55, "\ufdd0:column", 28)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:mary", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 56, "\ufdd0:column", 28)), cljs.core.with_meta(cljs.core.list("\ufdd0:sally", "\ufdd0:y", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 57, "\ufdd0:column", 28)), cljs.core.with_meta(cljs.core.list("\ufdd1'if", "\ufdd1'>", "\ufdd1'?x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 
      58, "\ufdd0:column", 28))), cljs.core.hash_map("\ufdd0:line", 55, "\ufdd0:column", 24))), cljs.core.hash_map("\ufdd0:line", 55, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 54, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5249) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5249)) {
      var t__4829__auto__ = e5249;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'display-rule", cljs.core.with_meta(cljs.core.list("\ufdd1'compute-sip", cljs.core.set(["\ufdd0:x"]), cljs.core.set(["\ufdd0:mary", "\ufdd0:sally"]), "\ufdd1'tr-3"), 
      cljs.core.hash_map("\ufdd0:line", 54, "\ufdd0:column", 24))), cljs.core.hash_map("\ufdd0:line", 54, "\ufdd0:column", 10)), cljs.core.with_meta(cljs.core.list("\ufdd1'display-rule", cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:fred", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x", "\ufdd0:y", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 55, "\ufdd0:column", 28)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", 
      "\ufdd0:mary", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 56, "\ufdd0:column", 28)), cljs.core.with_meta(cljs.core.list("\ufdd0:sally", "\ufdd0:y", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 57, "\ufdd0:column", 28)), cljs.core.with_meta(cljs.core.list("\ufdd1'if", "\ufdd1'>", "\ufdd1'?x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 58, "\ufdd0:column", 28))), cljs.core.hash_map("\ufdd0:line", 55, "\ufdd0:column", 24))), 
      cljs.core.hash_map("\ufdd0:line", 55, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 54, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5249;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-rules", bacwn.test.impl.test_rules.test_sip);
bacwn.test.impl.test_rules.rs = fogus.datalog.bacwn.impl.rules.rules_set.call(null, fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:path", cljs.core.ObjMap.fromObject(["\ufdd0:b", "\ufdd0:a"], {"\ufdd0:b":"\ufdd1'?y", "\ufdd0:a":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, 
"\ufdd0:edge", cljs.core.ObjMap.fromObject(["\ufdd0:b", "\ufdd0:a"], {"\ufdd0:b":"\ufdd1'?y", "\ufdd0:a":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:path", cljs.core.ObjMap.fromObject(["\ufdd0:b", "\ufdd0:a"], {"\ufdd0:b":"\ufdd1'?y", "\ufdd0:a":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), 
cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:edge", cljs.core.ObjMap.fromObject(["\ufdd0:b", "\ufdd0:a"], {"\ufdd0:b":"\ufdd1'?z", "\ufdd0:a":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:path", cljs.core.ObjMap.fromObject(["\ufdd0:b", "\ufdd0:a"], {"\ufdd0:b":"\ufdd1'?y", "\ufdd0:a":"\ufdd1'?z"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], 
true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:edge", cljs.core.ObjMap.fromObject(["\ufdd0:b", "\ufdd0:a"], {"\ufdd0:b":"\ufdd1'?y", "\ufdd0:a":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:route", cljs.core.ObjMap.fromObject(["\ufdd0:b", 
"\ufdd0:a"], {"\ufdd0:b":"\ufdd1'?y", "\ufdd0:a":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_ConditionalLiteral.call(null, function(binds__3454__auto__) {
  return cljs.core.apply.call(null, cljs.core.not_EQ_, binds__3454__auto__)
}, "\ufdd1'not=", cljs.core.list("\ufdd1'?x", "\ufdd1'?y"), "\ufdd0:fogus.datalog.bacwn.impl.literals/conditional")], true))));
bacwn.test.impl.test_rules.test_rules_set = function test_rules_set() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_rules.test_rules_set)
};
bacwn.test.impl.test_rules.test_rules_set = cljs.core.vary_meta.call(null, bacwn.test.impl.test_rules.test_rules_set, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-rules-set", "\ufdd0:test", function test_rules_set_test() {
  try {
    var values__4792__auto___5266 = cljs.core.list.call(null, cljs.core.count.call(null, bacwn.test.impl.test_rules.rs), 3);
    var result__4793__auto___5267 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5266);
    if(cljs.core.truth_(result__4793__auto___5267)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5266), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'count", "\ufdd1'rs"), cljs.core.hash_map("\ufdd0:line", 70, "\ufdd0:column", 10)), 3), cljs.core.hash_map("\ufdd0:line", 
      70, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5266)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'count", "\ufdd1'rs"), cljs.core.hash_map("\ufdd0:line", 70, "\ufdd0:column", 
      10)), 3), cljs.core.hash_map("\ufdd0:line", 70, "\ufdd0:column", 7))}))
    }
  }catch(e5264) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5264)) {
      var t__4829__auto___5268 = e5264;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5268, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'count", "\ufdd1'rs"), cljs.core.hash_map("\ufdd0:line", 70, "\ufdd0:column", 10)), 3), cljs.core.hash_map("\ufdd0:line", 70, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5264;
      }else {
      }
    }
  }
  try {
    var values__4792__auto__ = cljs.core.list.call(null, bacwn.test.impl.test_rules.rs, fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:path", cljs.core.ObjMap.fromObject(["\ufdd0:b", "\ufdd0:a"], {"\ufdd0:b":"\ufdd1'?y", "\ufdd0:a":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, 
    "\ufdd0:edge", cljs.core.ObjMap.fromObject(["\ufdd0:b", "\ufdd0:a"], {"\ufdd0:b":"\ufdd1'?z", "\ufdd0:a":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:path", cljs.core.ObjMap.fromObject(["\ufdd0:b", "\ufdd0:a"], {"\ufdd0:b":"\ufdd1'?y", "\ufdd0:a":"\ufdd1'?z"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true))));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core.contains_QMARK_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.contains_QMARK_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'contains?", "\ufdd1'rs", cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:path", "\ufdd0:a", "\ufdd1'?x", "\ufdd0:b", 
      "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 71, "\ufdd0:column", 25)), cljs.core.with_meta(cljs.core.list("\ufdd0:edge", "\ufdd0:a", "\ufdd1'?x", "\ufdd0:b", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 71, "\ufdd0:column", 45)), cljs.core.with_meta(cljs.core.list("\ufdd0:path", "\ufdd0:a", "\ufdd1'?z", "\ufdd0:b", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 71, "\ufdd0:column", 65))), cljs.core.hash_map("\ufdd0:line", 71, "\ufdd0:column", 21))), cljs.core.hash_map("\ufdd0:line", 
      71, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'contains?", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'contains?", "\ufdd1'rs", cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:path", 
      "\ufdd0:a", "\ufdd1'?x", "\ufdd0:b", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 71, "\ufdd0:column", 25)), cljs.core.with_meta(cljs.core.list("\ufdd0:edge", "\ufdd0:a", "\ufdd1'?x", "\ufdd0:b", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 71, "\ufdd0:column", 45)), cljs.core.with_meta(cljs.core.list("\ufdd0:path", "\ufdd0:a", "\ufdd1'?z", "\ufdd0:b", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 71, "\ufdd0:column", 65))), cljs.core.hash_map("\ufdd0:line", 71, "\ufdd0:column", 21))), 
      cljs.core.hash_map("\ufdd0:line", 71, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5265) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5265)) {
      var t__4829__auto__ = e5265;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'contains?", "\ufdd1'rs", cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:path", "\ufdd0:a", "\ufdd1'?x", "\ufdd0:b", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 
      71, "\ufdd0:column", 25)), cljs.core.with_meta(cljs.core.list("\ufdd0:edge", "\ufdd0:a", "\ufdd1'?x", "\ufdd0:b", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 71, "\ufdd0:column", 45)), cljs.core.with_meta(cljs.core.list("\ufdd0:path", "\ufdd0:a", "\ufdd1'?z", "\ufdd0:b", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 71, "\ufdd0:column", 65))), cljs.core.hash_map("\ufdd0:line", 71, "\ufdd0:column", 21))), cljs.core.hash_map("\ufdd0:line", 71, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5265;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-rules", bacwn.test.impl.test_rules.test_rules_set);
bacwn.test.impl.test_rules.test_predicate_map = function test_predicate_map() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_rules.test_predicate_map)
};
bacwn.test.impl.test_rules.test_predicate_map = cljs.core.vary_meta.call(null, bacwn.test.impl.test_rules.test_predicate_map, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-predicate-map", "\ufdd0:test", function test_predicate_map_test() {
  var pm = fogus.datalog.bacwn.impl.rules.predicate_map.call(null, bacwn.test.impl.test_rules.rs);
  try {
    var values__4792__auto___5273 = cljs.core.list.call(null, pm.call(null, "\ufdd0:path"), cljs.core.PersistentHashSet.fromArray([fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:path", cljs.core.ObjMap.fromObject(["\ufdd0:b", "\ufdd0:a"], {"\ufdd0:b":"\ufdd1'?y", "\ufdd0:a":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, 
    "\ufdd0:edge", cljs.core.ObjMap.fromObject(["\ufdd0:b", "\ufdd0:a"], {"\ufdd0:b":"\ufdd1'?z", "\ufdd0:a":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:path", cljs.core.ObjMap.fromObject(["\ufdd0:b", "\ufdd0:a"], {"\ufdd0:b":"\ufdd1'?y", "\ufdd0:a":"\ufdd1'?z"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, 
    fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:path", cljs.core.ObjMap.fromObject(["\ufdd0:b", "\ufdd0:a"], {"\ufdd0:b":"\ufdd1'?y", "\ufdd0:a":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:edge", cljs.core.ObjMap.fromObject(["\ufdd0:b", "\ufdd0:a"], {"\ufdd0:b":"\ufdd1'?y", "\ufdd0:a":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], 
    true)))]));
    var result__4793__auto___5274 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5273);
    if(cljs.core.truth_(result__4793__auto___5274)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5273), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'pm", "\ufdd0:path"), cljs.core.hash_map("\ufdd0:line", 75, "\ufdd0:column", 12)), cljs.core.set([cljs.core.with_meta(cljs.core.list("\ufdd1'<-", 
      cljs.core.with_meta(cljs.core.list("\ufdd0:path", "\ufdd0:a", "\ufdd1'?x", "\ufdd0:b", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 77, "\ufdd0:column", 18)), cljs.core.with_meta(cljs.core.list("\ufdd0:edge", "\ufdd0:a", "\ufdd1'?x", "\ufdd0:b", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 77, "\ufdd0:column", 38)), cljs.core.with_meta(cljs.core.list("\ufdd0:path", "\ufdd0:a", "\ufdd1'?z", "\ufdd0:b", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 77, "\ufdd0:column", 58))), cljs.core.hash_map("\ufdd0:line", 
      77, "\ufdd0:column", 14)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:path", "\ufdd0:a", "\ufdd1'?x", "\ufdd0:b", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 76, "\ufdd0:column", 18)), cljs.core.with_meta(cljs.core.list("\ufdd0:edge", "\ufdd0:a", "\ufdd1'?x", "\ufdd0:b", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 76, "\ufdd0:column", 38))), cljs.core.hash_map("\ufdd0:line", 76, "\ufdd0:column", 14))])), cljs.core.hash_map("\ufdd0:line", 
      75, "\ufdd0:column", 9))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5273)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'pm", "\ufdd0:path"), cljs.core.hash_map("\ufdd0:line", 75, "\ufdd0:column", 
      12)), cljs.core.set([cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:path", "\ufdd0:a", "\ufdd1'?x", "\ufdd0:b", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 77, "\ufdd0:column", 18)), cljs.core.with_meta(cljs.core.list("\ufdd0:edge", "\ufdd0:a", "\ufdd1'?x", "\ufdd0:b", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 77, "\ufdd0:column", 38)), cljs.core.with_meta(cljs.core.list("\ufdd0:path", "\ufdd0:a", "\ufdd1'?z", "\ufdd0:b", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 
      77, "\ufdd0:column", 58))), cljs.core.hash_map("\ufdd0:line", 77, "\ufdd0:column", 14)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:path", "\ufdd0:a", "\ufdd1'?x", "\ufdd0:b", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 76, "\ufdd0:column", 18)), cljs.core.with_meta(cljs.core.list("\ufdd0:edge", "\ufdd0:a", "\ufdd1'?x", "\ufdd0:b", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 76, "\ufdd0:column", 38))), cljs.core.hash_map("\ufdd0:line", 
      76, "\ufdd0:column", 14))])), cljs.core.hash_map("\ufdd0:line", 75, "\ufdd0:column", 9))}))
    }
  }catch(e5271) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5271)) {
      var t__4829__auto___5275 = e5271;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5275, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'pm", "\ufdd0:path"), cljs.core.hash_map("\ufdd0:line", 75, "\ufdd0:column", 12)), cljs.core.set([cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:path", 
      "\ufdd0:a", "\ufdd1'?x", "\ufdd0:b", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 77, "\ufdd0:column", 18)), cljs.core.with_meta(cljs.core.list("\ufdd0:edge", "\ufdd0:a", "\ufdd1'?x", "\ufdd0:b", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 77, "\ufdd0:column", 38)), cljs.core.with_meta(cljs.core.list("\ufdd0:path", "\ufdd0:a", "\ufdd1'?z", "\ufdd0:b", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 77, "\ufdd0:column", 58))), cljs.core.hash_map("\ufdd0:line", 77, "\ufdd0:column", 14)), 
      cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:path", "\ufdd0:a", "\ufdd1'?x", "\ufdd0:b", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 76, "\ufdd0:column", 18)), cljs.core.with_meta(cljs.core.list("\ufdd0:edge", "\ufdd0:a", "\ufdd1'?x", "\ufdd0:b", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 76, "\ufdd0:column", 38))), cljs.core.hash_map("\ufdd0:line", 76, "\ufdd0:column", 14))])), cljs.core.hash_map("\ufdd0:line", 75, "\ufdd0:column", 9))}))
    }else {
      if("\ufdd0:else") {
        throw e5271;
      }else {
      }
    }
  }
  try {
    var values__4792__auto__ = cljs.core.list.call(null, cljs.core.count.call(null, pm.call(null, "\ufdd0:edge")), 1);
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'->", "\ufdd0:edge", "\ufdd1'pm", "\ufdd1'count"), cljs.core.hash_map("\ufdd0:line", 78, "\ufdd0:column", 12)), 1), 
      cljs.core.hash_map("\ufdd0:line", 78, "\ufdd0:column", 9))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'->", "\ufdd0:edge", "\ufdd1'pm", "\ufdd1'count"), cljs.core.hash_map("\ufdd0:line", 
      78, "\ufdd0:column", 12)), 1), cljs.core.hash_map("\ufdd0:line", 78, "\ufdd0:column", 9))}))
    }
    return result__4793__auto__
  }catch(e5272) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5272)) {
      var t__4829__auto__ = e5272;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'->", "\ufdd0:edge", "\ufdd1'pm", "\ufdd1'count"), cljs.core.hash_map("\ufdd0:line", 78, "\ufdd0:column", 12)), 1), cljs.core.hash_map("\ufdd0:line", 78, "\ufdd0:column", 
      9))}))
    }else {
      if("\ufdd0:else") {
        throw e5272;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-rules", bacwn.test.impl.test_rules.test_predicate_map);
bacwn.test.impl.test_rules.db1 = fogus.datalog.bacwn.impl.database.add_relation.call(null, fogus.datalog.bacwn.impl.database.add_relation.call(null, fogus.datalog.bacwn.impl.database.add_index.call(null, fogus.datalog.bacwn.impl.database.add_relation.call(null, fogus.datalog.bacwn.impl.database.empty_database, "\ufdd0:fred", cljs.core.PersistentVector.fromArray(["\ufdd0:x", "\ufdd0:y"], true)), "\ufdd0:fred", "\ufdd0:x"), "\ufdd0:sally", cljs.core.PersistentVector.fromArray(["\ufdd0:x"], true)), 
"\ufdd0:ben", cljs.core.PersistentVector.fromArray(["\ufdd0:y"], true));
bacwn.test.impl.test_rules.db2 = fogus.datalog.bacwn.impl.database.add_tuples.call(null, bacwn.test.impl.test_rules.db1, cljs.core.PersistentVector.fromArray(["\ufdd0:fred", "\ufdd0:x", 1, "\ufdd0:y", "\ufdd0:mary"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:fred", "\ufdd0:x", 1, "\ufdd0:y", "\ufdd0:becky"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:fred", "\ufdd0:x", 3, "\ufdd0:y", "\ufdd0:sally"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:fred", "\ufdd0:x", 4, "\ufdd0:y", 
"\ufdd0:joe"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:fred", "\ufdd0:x", 4, "\ufdd0:y", "\ufdd0:bob"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:sally", "\ufdd0:x", 1], true), cljs.core.PersistentVector.fromArray(["\ufdd0:sally", "\ufdd0:x", 2], true), cljs.core.PersistentVector.fromArray(["\ufdd0:sally", "\ufdd0:x", 3], true), cljs.core.PersistentVector.fromArray(["\ufdd0:sally", "\ufdd0:x", 4], true), cljs.core.PersistentVector.fromArray(["\ufdd0:ben", "\ufdd0:y", "\ufdd0:bob"], 
true));
bacwn.test.impl.test_rules.test_apply_rule = function test_apply_rule() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_rules.test_apply_rule)
};
bacwn.test.impl.test_rules.test_apply_rule = cljs.core.vary_meta.call(null, bacwn.test.impl.test_rules.test_apply_rule, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-apply-rule", "\ufdd0:test", function test_apply_rule_test() {
  try {
    var values__4792__auto__ = cljs.core.list.call(null, fogus.datalog.bacwn.impl.rules.apply_rule.call(null, bacwn.test.impl.test_rules.db2, fogus.datalog.bacwn.impl.database.empty_database, fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:becky", cljs.core.ObjMap.fromObject(["\ufdd0:y"], {"\ufdd0:y":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), 
    cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:sally", cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:fred", cljs.core.ObjMap.fromObject(["\ufdd0:y", "\ufdd0:x"], {"\ufdd0:y":"\ufdd1'?y", "\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, 
    "\ufdd0:ben", cljs.core.ObjMap.fromObject(["\ufdd0:y"], {"\ufdd0:y":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/negated"), fogus.datalog.bacwn.impl.literals.__GT_ConditionalLiteral.call(null, function(binds__3454__auto__) {
      return cljs.core.apply.call(null, cljs.core.not_EQ_, binds__3454__auto__)
    }, "\ufdd1'not=", cljs.core.list("\ufdd1'?x", 3), "\ufdd0:fogus.datalog.bacwn.impl.literals/conditional")], true)))), fogus.datalog.bacwn.impl.database.datalog_database.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:becky"], {"\ufdd0:becky":fogus.datalog.bacwn.impl.database.datalog_relation.call(null, cljs.core.PersistentHashSet.fromArray(["\ufdd0:y"]), cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:y"], {"\ufdd0:y":"\ufdd0:joe"}), cljs.core.ObjMap.fromObject(["\ufdd0:y"], 
    {"\ufdd0:y":"\ufdd0:mary"}), cljs.core.ObjMap.fromObject(["\ufdd0:y"], {"\ufdd0:y":"\ufdd0:becky"})]), cljs.core.ObjMap.EMPTY)})));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'apply-rule", "\ufdd1'db2", "\ufdd1'empty-database", cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:becky", 
      "\ufdd0:y", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 101, "\ufdd0:column", 45)), cljs.core.with_meta(cljs.core.list("\ufdd0:sally", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 101, "\ufdd0:column", 60)), cljs.core.with_meta(cljs.core.list("\ufdd0:fred", "\ufdd0:x", "\ufdd1'?x", "\ufdd0:y", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 102, "\ufdd0:column", 45)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", "\ufdd0:ben", "\ufdd0:y", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 
      103, "\ufdd0:column", 45)), cljs.core.with_meta(cljs.core.list("\ufdd1'if", "\ufdd1'not=", "\ufdd1'?x", 3), cljs.core.hash_map("\ufdd0:line", 104, "\ufdd0:column", 45))), cljs.core.hash_map("\ufdd0:line", 101, "\ufdd0:column", 41))), cljs.core.hash_map("\ufdd0:line", 101, "\ufdd0:column", 10)), cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-database", cljs.core.hash_map("\ufdd0:becky", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-relation", cljs.core.set(["\ufdd0:y"]), cljs.core.set([cljs.core.hash_map("\ufdd0:y", 
      "\ufdd0:joe"), cljs.core.hash_map("\ufdd0:y", "\ufdd0:mary"), cljs.core.hash_map("\ufdd0:y", "\ufdd0:becky")]), cljs.core.hash_map()), cljs.core.hash_map("\ufdd0:line", 108, "\ufdd0:column", 12)))), cljs.core.hash_map("\ufdd0:line", 105, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 101, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'apply-rule", "\ufdd1'db2", "\ufdd1'empty-database", cljs.core.with_meta(cljs.core.list("\ufdd1'<-", 
      cljs.core.with_meta(cljs.core.list("\ufdd0:becky", "\ufdd0:y", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 101, "\ufdd0:column", 45)), cljs.core.with_meta(cljs.core.list("\ufdd0:sally", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 101, "\ufdd0:column", 60)), cljs.core.with_meta(cljs.core.list("\ufdd0:fred", "\ufdd0:x", "\ufdd1'?x", "\ufdd0:y", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 102, "\ufdd0:column", 45)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", "\ufdd0:ben", 
      "\ufdd0:y", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 103, "\ufdd0:column", 45)), cljs.core.with_meta(cljs.core.list("\ufdd1'if", "\ufdd1'not=", "\ufdd1'?x", 3), cljs.core.hash_map("\ufdd0:line", 104, "\ufdd0:column", 45))), cljs.core.hash_map("\ufdd0:line", 101, "\ufdd0:column", 41))), cljs.core.hash_map("\ufdd0:line", 101, "\ufdd0:column", 10)), cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-database", cljs.core.hash_map("\ufdd0:becky", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-relation", 
      cljs.core.set(["\ufdd0:y"]), cljs.core.set([cljs.core.hash_map("\ufdd0:y", "\ufdd0:joe"), cljs.core.hash_map("\ufdd0:y", "\ufdd0:mary"), cljs.core.hash_map("\ufdd0:y", "\ufdd0:becky")]), cljs.core.hash_map()), cljs.core.hash_map("\ufdd0:line", 108, "\ufdd0:column", 12)))), cljs.core.hash_map("\ufdd0:line", 105, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 101, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5277) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5277)) {
      var t__4829__auto__ = e5277;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'apply-rule", "\ufdd1'db2", "\ufdd1'empty-database", cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list("\ufdd0:becky", "\ufdd0:y", 
      "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 101, "\ufdd0:column", 45)), cljs.core.with_meta(cljs.core.list("\ufdd0:sally", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 101, "\ufdd0:column", 60)), cljs.core.with_meta(cljs.core.list("\ufdd0:fred", "\ufdd0:x", "\ufdd1'?x", "\ufdd0:y", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 102, "\ufdd0:column", 45)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", "\ufdd0:ben", "\ufdd0:y", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 
      103, "\ufdd0:column", 45)), cljs.core.with_meta(cljs.core.list("\ufdd1'if", "\ufdd1'not=", "\ufdd1'?x", 3), cljs.core.hash_map("\ufdd0:line", 104, "\ufdd0:column", 45))), cljs.core.hash_map("\ufdd0:line", 101, "\ufdd0:column", 41))), cljs.core.hash_map("\ufdd0:line", 101, "\ufdd0:column", 10)), cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-database", cljs.core.hash_map("\ufdd0:becky", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-relation", cljs.core.set(["\ufdd0:y"]), cljs.core.set([cljs.core.hash_map("\ufdd0:y", 
      "\ufdd0:joe"), cljs.core.hash_map("\ufdd0:y", "\ufdd0:mary"), cljs.core.hash_map("\ufdd0:y", "\ufdd0:becky")]), cljs.core.hash_map()), cljs.core.hash_map("\ufdd0:line", 108, "\ufdd0:column", 12)))), cljs.core.hash_map("\ufdd0:line", 105, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 101, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5277;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-rules", bacwn.test.impl.test_rules.test_apply_rule);
goog.provide("bacwn.test.impl.test_database");
goog.require("cljs.core");
goog.require("fogus.datalog.bacwn.impl.database");
goog.require("fogus.datalog.bacwn.impl.database");
goog.require("cemerick.cljs.test");
bacwn.test.impl.test_database.test_db = fogus.datalog.bacwn.impl.database.add_index.call(null, fogus.datalog.bacwn.impl.database.add_index.call(null, fogus.datalog.bacwn.impl.database.add_relation.call(null, fogus.datalog.bacwn.impl.database.add_index.call(null, fogus.datalog.bacwn.impl.database.add_relation.call(null, fogus.datalog.bacwn.impl.database.empty_database, "\ufdd0:fred", cljs.core.PersistentVector.fromArray(["\ufdd0:mary", "\ufdd0:sue"], true)), "\ufdd0:fred", "\ufdd0:mary"), "\ufdd0:sally", 
cljs.core.PersistentVector.fromArray(["\ufdd0:jen", "\ufdd0:becky", "\ufdd0:joan"], true)), "\ufdd0:sally", "\ufdd0:jen"), "\ufdd0:sally", "\ufdd0:becky");
bacwn.test.impl.test_database.test_make_database = function test_make_database() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_database.test_make_database)
};
bacwn.test.impl.test_database.test_make_database = cljs.core.vary_meta.call(null, bacwn.test.impl.test_database.test_make_database, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-make-database", "\ufdd0:test", function test_make_database_test() {
  try {
    var values__4792__auto__ = cljs.core.list.call(null, bacwn.test.impl.test_database.test_db, fogus.datalog.bacwn.impl.database.datalog_database.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:sally", "\ufdd0:fred"], {"\ufdd0:sally":fogus.datalog.bacwn.impl.database.datalog_relation.call(null, cljs.core.PersistentHashSet.fromArray(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"]), cljs.core.PersistentHashSet.EMPTY, cljs.core.ObjMap.fromObject(["\ufdd0:becky", "\ufdd0:jen"], {"\ufdd0:becky":cljs.core.ObjMap.EMPTY, 
    "\ufdd0:jen":cljs.core.ObjMap.EMPTY})), "\ufdd0:fred":fogus.datalog.bacwn.impl.database.datalog_relation.call(null, cljs.core.PersistentHashSet.fromArray(["\ufdd0:sue", "\ufdd0:mary"]), cljs.core.PersistentHashSet.EMPTY, cljs.core.ObjMap.fromObject(["\ufdd0:mary"], {"\ufdd0:mary":cljs.core.ObjMap.EMPTY}))})));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", "\ufdd1'test-db", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-database", cljs.core.hash_map("\ufdd0:sally", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-relation", 
      cljs.core.set(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"]), cljs.core.set([]), cljs.core.hash_map("\ufdd0:becky", cljs.core.hash_map(), "\ufdd0:jen", cljs.core.hash_map())), cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 19)), "\ufdd0:fred", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-relation", cljs.core.set(["\ufdd0:sue", "\ufdd0:mary"]), cljs.core.set([]), cljs.core.hash_map("\ufdd0:mary", cljs.core.hash_map())), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 18)))), 
      cljs.core.hash_map("\ufdd0:line", 33, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 32, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", "\ufdd1'test-db", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-database", cljs.core.hash_map("\ufdd0:sally", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-relation", 
      cljs.core.set(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"]), cljs.core.set([]), cljs.core.hash_map("\ufdd0:becky", cljs.core.hash_map(), "\ufdd0:jen", cljs.core.hash_map())), cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 19)), "\ufdd0:fred", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-relation", cljs.core.set(["\ufdd0:sue", "\ufdd0:mary"]), cljs.core.set([]), cljs.core.hash_map("\ufdd0:mary", cljs.core.hash_map())), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 18)))), 
      cljs.core.hash_map("\ufdd0:line", 33, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 32, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5279) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5279)) {
      var t__4829__auto__ = e5279;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", "\ufdd1'test-db", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-database", cljs.core.hash_map("\ufdd0:sally", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-relation", cljs.core.set(["\ufdd0:jen", 
      "\ufdd0:joan", "\ufdd0:becky"]), cljs.core.set([]), cljs.core.hash_map("\ufdd0:becky", cljs.core.hash_map(), "\ufdd0:jen", cljs.core.hash_map())), cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 19)), "\ufdd0:fred", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-relation", cljs.core.set(["\ufdd0:sue", "\ufdd0:mary"]), cljs.core.set([]), cljs.core.hash_map("\ufdd0:mary", cljs.core.hash_map())), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 18)))), cljs.core.hash_map("\ufdd0:line", 
      33, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 32, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5279;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test_database", bacwn.test.impl.test_database.test_make_database);
bacwn.test.impl.test_database.test_ensure_relation = function test_ensure_relation() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_database.test_ensure_relation)
};
bacwn.test.impl.test_database.test_ensure_relation = cljs.core.vary_meta.call(null, bacwn.test.impl.test_database.test_ensure_relation, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-ensure-relation", "\ufdd0:test", function test_ensure_relation_test() {
  try {
    var values__4792__auto___5288 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.database.ensure_relation.call(null, bacwn.test.impl.test_database.test_db, "\ufdd0:bob", cljs.core.PersistentVector.fromArray(["\ufdd0:sam", "\ufdd0:george"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:sam"], true)), "\ufdd0:bob");
    var result__4793__auto___5289 = cljs.core.apply.call(null, cljs.core.contains_QMARK_, values__4792__auto___5288);
    if(cljs.core.truth_(result__4793__auto___5289)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.contains_QMARK_, values__4792__auto___5288), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'contains?", cljs.core.with_meta(cljs.core.list("\ufdd1'ensure-relation", "\ufdd1'test-db", "\ufdd0:bob", cljs.core.vec(["\ufdd0:sam", "\ufdd0:george"]), 
      cljs.core.vec(["\ufdd0:sam"])), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 18)), "\ufdd0:bob"), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'contains?", values__4792__auto___5288)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'contains?", cljs.core.with_meta(cljs.core.list("\ufdd1'ensure-relation", "\ufdd1'test-db", "\ufdd0:bob", cljs.core.vec(["\ufdd0:sam", 
      "\ufdd0:george"]), cljs.core.vec(["\ufdd0:sam"])), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 18)), "\ufdd0:bob"), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 7))}))
    }
  }catch(e5284) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5284)) {
      var t__4829__auto___5290 = e5284;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5290, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'contains?", cljs.core.with_meta(cljs.core.list("\ufdd1'ensure-relation", "\ufdd1'test-db", "\ufdd0:bob", cljs.core.vec(["\ufdd0:sam", "\ufdd0:george"]), cljs.core.vec(["\ufdd0:sam"])), cljs.core.hash_map("\ufdd0:line", 
      46, "\ufdd0:column", 18)), "\ufdd0:bob"), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5284;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5291 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.database.ensure_relation.call(null, bacwn.test.impl.test_database.test_db, "\ufdd0:fred", cljs.core.PersistentVector.fromArray(["\ufdd0:mary", "\ufdd0:sue"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:mary"], true)), "\ufdd0:fred");
    var result__4793__auto___5292 = cljs.core.apply.call(null, cljs.core.contains_QMARK_, values__4792__auto___5291);
    if(cljs.core.truth_(result__4793__auto___5292)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.contains_QMARK_, values__4792__auto___5291), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'contains?", cljs.core.with_meta(cljs.core.list("\ufdd1'ensure-relation", "\ufdd1'test-db", "\ufdd0:fred", cljs.core.vec(["\ufdd0:mary", "\ufdd0:sue"]), 
      cljs.core.vec(["\ufdd0:mary"])), cljs.core.hash_map("\ufdd0:line", 47, "\ufdd0:column", 18)), "\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 47, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'contains?", values__4792__auto___5291)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'contains?", cljs.core.with_meta(cljs.core.list("\ufdd1'ensure-relation", "\ufdd1'test-db", "\ufdd0:fred", cljs.core.vec(["\ufdd0:mary", 
      "\ufdd0:sue"]), cljs.core.vec(["\ufdd0:mary"])), cljs.core.hash_map("\ufdd0:line", 47, "\ufdd0:column", 18)), "\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 47, "\ufdd0:column", 7))}))
    }
  }catch(e5285) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5285)) {
      var t__4829__auto___5293 = e5285;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5293, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'contains?", cljs.core.with_meta(cljs.core.list("\ufdd1'ensure-relation", "\ufdd1'test-db", "\ufdd0:fred", cljs.core.vec(["\ufdd0:mary", "\ufdd0:sue"]), cljs.core.vec(["\ufdd0:mary"])), cljs.core.hash_map("\ufdd0:line", 
      47, "\ufdd0:column", 18)), "\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 47, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5285;
      }else {
      }
    }
  }
  try {
    try {
      fogus.datalog.bacwn.impl.database.ensure_relation.call(null, bacwn.test.impl.test_database.test_db, "\ufdd0:fred", cljs.core.PersistentVector.fromArray(["\ufdd0:bob", "\ufdd0:joe"], true), cljs.core.PersistentVector.EMPTY);
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":null, "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'thrown?", "\ufdd1'js/Error", cljs.core.with_meta(cljs.core.list("\ufdd1'ensure-relation", "\ufdd1'test-db", "\ufdd0:fred", cljs.core.vec(["\ufdd0:bob", "\ufdd0:joe"]), cljs.core.vec([])), cljs.core.hash_map("\ufdd0:line", 
      48, "\ufdd0:column", 25))), cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 7))}))
    }catch(e5287) {
      if(cljs.core.instance_QMARK_.call(null, Error, e5287)) {
        var e__4818__auto__ = e5287;
        cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":e__4818__auto__, "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'thrown?", "\ufdd1'js/Error", cljs.core.with_meta(cljs.core.list("\ufdd1'ensure-relation", "\ufdd1'test-db", "\ufdd0:fred", cljs.core.vec(["\ufdd0:bob", "\ufdd0:joe"]), cljs.core.vec([])), cljs.core.hash_map("\ufdd0:line", 
        48, "\ufdd0:column", 25))), cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 7))}));
        return e__4818__auto__
      }else {
        if("\ufdd0:else") {
          throw e5287;
        }else {
          return null
        }
      }
    }
  }catch(e5286) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5286)) {
      var t__4829__auto__ = e5286;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'thrown?", "\ufdd1'js/Error", cljs.core.with_meta(cljs.core.list("\ufdd1'ensure-relation", "\ufdd1'test-db", "\ufdd0:fred", cljs.core.vec(["\ufdd0:bob", "\ufdd0:joe"]), cljs.core.vec([])), cljs.core.hash_map("\ufdd0:line", 
      48, "\ufdd0:column", 25))), cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5286;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test_database", bacwn.test.impl.test_database.test_ensure_relation);
bacwn.test.impl.test_database.test_add_tuple = function test_add_tuple() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_database.test_add_tuple)
};
bacwn.test.impl.test_database.test_add_tuple = cljs.core.vary_meta.call(null, bacwn.test.impl.test_database.test_add_tuple, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-add-tuple", "\ufdd0:test", function test_add_tuple_test() {
  var new_db_5300 = fogus.datalog.bacwn.impl.database.add_tuple.call(null, bacwn.test.impl.test_database.test_db, "\ufdd0:fred", cljs.core.ObjMap.fromObject(["\ufdd0:mary", "\ufdd0:sue"], {"\ufdd0:mary":1, "\ufdd0:sue":2}));
  try {
    var values__4792__auto___5301 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.database.select.call(null, new_db_5300, "\ufdd0:fred", cljs.core.ObjMap.fromObject(["\ufdd0:mary"], {"\ufdd0:mary":1})), cljs.core.PersistentVector.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:mary", "\ufdd0:sue"], {"\ufdd0:mary":1, "\ufdd0:sue":2})], true));
    var result__4793__auto___5302 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5301);
    if(cljs.core.truth_(result__4793__auto___5302)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5301), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'select", "\ufdd1'new-db", "\ufdd0:fred", cljs.core.hash_map("\ufdd0:mary", 1)), cljs.core.hash_map("\ufdd0:line", 
      52, "\ufdd0:column", 12)), cljs.core.vec([cljs.core.hash_map("\ufdd0:mary", 1, "\ufdd0:sue", 2)])), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 9))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5301)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'select", "\ufdd1'new-db", "\ufdd0:fred", cljs.core.hash_map("\ufdd0:mary", 
      1)), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 12)), cljs.core.vec([cljs.core.hash_map("\ufdd0:mary", 1, "\ufdd0:sue", 2)])), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 9))}))
    }
  }catch(e5297) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5297)) {
      var t__4829__auto___5303 = e5297;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5303, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'select", "\ufdd1'new-db", "\ufdd0:fred", cljs.core.hash_map("\ufdd0:mary", 1)), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 12)), cljs.core.vec([cljs.core.hash_map("\ufdd0:mary", 
      1, "\ufdd0:sue", 2)])), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 9))}))
    }else {
      if("\ufdd0:else") {
        throw e5297;
      }else {
      }
    }
  }
  try {
    try {
      fogus.datalog.bacwn.impl.database.add_tuple.call(null, bacwn.test.impl.test_database.test_db, "\ufdd0:fred", cljs.core.ObjMap.fromObject(["\ufdd0:mary"], {"\ufdd0:mary":1}));
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":null, "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'thrown?", "\ufdd1'js/Error", cljs.core.with_meta(cljs.core.list("\ufdd1'add-tuple", "\ufdd1'test-db", "\ufdd0:fred", cljs.core.hash_map("\ufdd0:mary", 1)), cljs.core.hash_map("\ufdd0:line", 53, "\ufdd0:column", 25))), 
      cljs.core.hash_map("\ufdd0:line", 53, "\ufdd0:column", 7))}))
    }catch(e5299) {
      if(cljs.core.instance_QMARK_.call(null, Error, e5299)) {
        var e__4818__auto__ = e5299;
        cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":e__4818__auto__, "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'thrown?", "\ufdd1'js/Error", cljs.core.with_meta(cljs.core.list("\ufdd1'add-tuple", "\ufdd1'test-db", "\ufdd0:fred", cljs.core.hash_map("\ufdd0:mary", 1)), cljs.core.hash_map("\ufdd0:line", 53, "\ufdd0:column", 
        25))), cljs.core.hash_map("\ufdd0:line", 53, "\ufdd0:column", 7))}));
        return e__4818__auto__
      }else {
        if("\ufdd0:else") {
          throw e5299;
        }else {
          return null
        }
      }
    }
  }catch(e5298) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5298)) {
      var t__4829__auto__ = e5298;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'thrown?", "\ufdd1'js/Error", cljs.core.with_meta(cljs.core.list("\ufdd1'add-tuple", "\ufdd1'test-db", "\ufdd0:fred", cljs.core.hash_map("\ufdd0:mary", 1)), cljs.core.hash_map("\ufdd0:line", 53, "\ufdd0:column", 
      25))), cljs.core.hash_map("\ufdd0:line", 53, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5298;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test_database", bacwn.test.impl.test_database.test_add_tuple);
bacwn.test.impl.test_database.test_db_1 = fogus.datalog.bacwn.impl.database.add_tuples.call(null, bacwn.test.impl.test_database.test_db, cljs.core.PersistentVector.fromArray(["\ufdd0:fred", "\ufdd0:mary", 1, "\ufdd0:sue", 2], true), cljs.core.PersistentVector.fromArray(["\ufdd0:fred", "\ufdd0:mary", 2, "\ufdd0:sue", 3], true), cljs.core.PersistentVector.fromArray(["\ufdd0:sally", "\ufdd0:jen", 1, "\ufdd0:becky", 2, "\ufdd0:joan", 0], true), cljs.core.PersistentVector.fromArray(["\ufdd0:sally", "\ufdd0:jen", 
1, "\ufdd0:becky", 4, "\ufdd0:joan", 3], true), cljs.core.PersistentVector.fromArray(["\ufdd0:sally", "\ufdd0:jen", 1, "\ufdd0:becky", 3, "\ufdd0:joan", 0], true), cljs.core.PersistentVector.fromArray(["\ufdd0:sally", "\ufdd0:jen", 1, "\ufdd0:becky", 2, "\ufdd0:joan", 3], true), cljs.core.PersistentVector.fromArray(["\ufdd0:fred", "\ufdd0:mary", 1, "\ufdd0:sue", 1], true), cljs.core.PersistentVector.fromArray(["\ufdd0:fred", "\ufdd0:mary", 3, "\ufdd0:sue", 1], true));
bacwn.test.impl.test_database.test_add_tuples = function test_add_tuples() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_database.test_add_tuples)
};
bacwn.test.impl.test_database.test_add_tuples = cljs.core.vary_meta.call(null, bacwn.test.impl.test_database.test_add_tuples, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-add-tuples", "\ufdd0:test", function test_add_tuples_test() {
  try {
    var values__4792__auto__ = cljs.core.list.call(null, bacwn.test.impl.test_database.test_db_1, fogus.datalog.bacwn.impl.database.datalog_database.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:sally", "\ufdd0:fred"], {"\ufdd0:sally":fogus.datalog.bacwn.impl.database.datalog_relation.call(null, cljs.core.PersistentHashSet.fromArray(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"]), cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"], {"\ufdd0:jen":1, 
    "\ufdd0:joan":0, "\ufdd0:becky":3}), cljs.core.ObjMap.fromObject(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"], {"\ufdd0:jen":1, "\ufdd0:joan":0, "\ufdd0:becky":2}), cljs.core.ObjMap.fromObject(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"], {"\ufdd0:jen":1, "\ufdd0:joan":3, "\ufdd0:becky":2}), cljs.core.ObjMap.fromObject(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"], {"\ufdd0:jen":1, "\ufdd0:joan":3, "\ufdd0:becky":4})]), cljs.core.ObjMap.fromObject(["\ufdd0:becky", "\ufdd0:jen"], {"\ufdd0:becky":cljs.core.PersistentArrayMap.fromArrays([3, 
    4, 2], [cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"], {"\ufdd0:jen":1, "\ufdd0:joan":0, "\ufdd0:becky":3})]), cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"], {"\ufdd0:jen":1, "\ufdd0:joan":3, "\ufdd0:becky":4})]), cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"], {"\ufdd0:jen":1, "\ufdd0:joan":0, "\ufdd0:becky":2}), 
    cljs.core.ObjMap.fromObject(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"], {"\ufdd0:jen":1, "\ufdd0:joan":3, "\ufdd0:becky":2})])]), "\ufdd0:jen":cljs.core.PersistentArrayMap.fromArrays([1], [cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"], {"\ufdd0:jen":1, "\ufdd0:joan":0, "\ufdd0:becky":3}), cljs.core.ObjMap.fromObject(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"], {"\ufdd0:jen":1, "\ufdd0:joan":0, "\ufdd0:becky":2}), cljs.core.ObjMap.fromObject(["\ufdd0:jen", 
    "\ufdd0:joan", "\ufdd0:becky"], {"\ufdd0:jen":1, "\ufdd0:joan":3, "\ufdd0:becky":2}), cljs.core.ObjMap.fromObject(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"], {"\ufdd0:jen":1, "\ufdd0:joan":3, "\ufdd0:becky":4})])])})), "\ufdd0:fred":fogus.datalog.bacwn.impl.database.datalog_relation.call(null, cljs.core.PersistentHashSet.fromArray(["\ufdd0:sue", "\ufdd0:mary"]), cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:sue", "\ufdd0:mary"], {"\ufdd0:sue":2, "\ufdd0:mary":1}), 
    cljs.core.ObjMap.fromObject(["\ufdd0:sue", "\ufdd0:mary"], {"\ufdd0:sue":1, "\ufdd0:mary":1}), cljs.core.ObjMap.fromObject(["\ufdd0:sue", "\ufdd0:mary"], {"\ufdd0:sue":3, "\ufdd0:mary":2}), cljs.core.ObjMap.fromObject(["\ufdd0:sue", "\ufdd0:mary"], {"\ufdd0:sue":1, "\ufdd0:mary":3})]), cljs.core.ObjMap.fromObject(["\ufdd0:mary"], {"\ufdd0:mary":cljs.core.PersistentArrayMap.fromArrays([3, 2, 1], [cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:sue", "\ufdd0:mary"], 
    {"\ufdd0:sue":1, "\ufdd0:mary":3})]), cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:sue", "\ufdd0:mary"], {"\ufdd0:sue":3, "\ufdd0:mary":2})]), cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:sue", "\ufdd0:mary"], {"\ufdd0:sue":2, "\ufdd0:mary":1}), cljs.core.ObjMap.fromObject(["\ufdd0:sue", "\ufdd0:mary"], {"\ufdd0:sue":1, "\ufdd0:mary":1})])])}))})));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", "\ufdd1'test-db-1", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-database", cljs.core.hash_map("\ufdd0:sally", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-relation", 
      cljs.core.set(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"]), cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 3), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 2), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 2), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 4)]), cljs.core.hash_map("\ufdd0:becky", cljs.core.hash_map(3, cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 
      0, "\ufdd0:becky", 3)]), 4, cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 4)]), 2, cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 2), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 2)])), "\ufdd0:jen", cljs.core.hash_map(1, cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 3), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 2), cljs.core.hash_map("\ufdd0:jen", 
      1, "\ufdd0:joan", 3, "\ufdd0:becky", 2), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 4)])))), cljs.core.hash_map("\ufdd0:line", 69, "\ufdd0:column", 19)), "\ufdd0:fred", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-relation", cljs.core.set(["\ufdd0:sue", "\ufdd0:mary"]), cljs.core.set([cljs.core.hash_map("\ufdd0:sue", 2, "\ufdd0:mary", 1), cljs.core.hash_map("\ufdd0:sue", 1, "\ufdd0:mary", 1), cljs.core.hash_map("\ufdd0:sue", 3, "\ufdd0:mary", 2), cljs.core.hash_map("\ufdd0:sue", 
      1, "\ufdd0:mary", 3)]), cljs.core.hash_map("\ufdd0:mary", cljs.core.hash_map(3, cljs.core.set([cljs.core.hash_map("\ufdd0:sue", 1, "\ufdd0:mary", 3)]), 2, cljs.core.set([cljs.core.hash_map("\ufdd0:sue", 3, "\ufdd0:mary", 2)]), 1, cljs.core.set([cljs.core.hash_map("\ufdd0:sue", 2, "\ufdd0:mary", 1), cljs.core.hash_map("\ufdd0:sue", 1, "\ufdd0:mary", 1)])))), cljs.core.hash_map("\ufdd0:line", 87, "\ufdd0:column", 18)))), cljs.core.hash_map("\ufdd0:line", 68, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 
      67, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", "\ufdd1'test-db-1", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-database", cljs.core.hash_map("\ufdd0:sally", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-relation", 
      cljs.core.set(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"]), cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 3), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 2), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 2), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 4)]), cljs.core.hash_map("\ufdd0:becky", cljs.core.hash_map(3, cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 
      0, "\ufdd0:becky", 3)]), 4, cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 4)]), 2, cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 2), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 2)])), "\ufdd0:jen", cljs.core.hash_map(1, cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 3), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 2), cljs.core.hash_map("\ufdd0:jen", 
      1, "\ufdd0:joan", 3, "\ufdd0:becky", 2), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 4)])))), cljs.core.hash_map("\ufdd0:line", 69, "\ufdd0:column", 19)), "\ufdd0:fred", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-relation", cljs.core.set(["\ufdd0:sue", "\ufdd0:mary"]), cljs.core.set([cljs.core.hash_map("\ufdd0:sue", 2, "\ufdd0:mary", 1), cljs.core.hash_map("\ufdd0:sue", 1, "\ufdd0:mary", 1), cljs.core.hash_map("\ufdd0:sue", 3, "\ufdd0:mary", 2), cljs.core.hash_map("\ufdd0:sue", 
      1, "\ufdd0:mary", 3)]), cljs.core.hash_map("\ufdd0:mary", cljs.core.hash_map(3, cljs.core.set([cljs.core.hash_map("\ufdd0:sue", 1, "\ufdd0:mary", 3)]), 2, cljs.core.set([cljs.core.hash_map("\ufdd0:sue", 3, "\ufdd0:mary", 2)]), 1, cljs.core.set([cljs.core.hash_map("\ufdd0:sue", 2, "\ufdd0:mary", 1), cljs.core.hash_map("\ufdd0:sue", 1, "\ufdd0:mary", 1)])))), cljs.core.hash_map("\ufdd0:line", 87, "\ufdd0:column", 18)))), cljs.core.hash_map("\ufdd0:line", 68, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 
      67, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5307) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5307)) {
      var t__4829__auto__ = e5307;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", "\ufdd1'test-db-1", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-database", cljs.core.hash_map("\ufdd0:sally", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-relation", cljs.core.set(["\ufdd0:jen", 
      "\ufdd0:joan", "\ufdd0:becky"]), cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 3), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 2), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 2), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 4)]), cljs.core.hash_map("\ufdd0:becky", cljs.core.hash_map(3, cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 3)]), 4, 
      cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 4)]), 2, cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 2), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 2)])), "\ufdd0:jen", cljs.core.hash_map(1, cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 3), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 2), cljs.core.hash_map("\ufdd0:jen", 1, 
      "\ufdd0:joan", 3, "\ufdd0:becky", 2), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 4)])))), cljs.core.hash_map("\ufdd0:line", 69, "\ufdd0:column", 19)), "\ufdd0:fred", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-relation", cljs.core.set(["\ufdd0:sue", "\ufdd0:mary"]), cljs.core.set([cljs.core.hash_map("\ufdd0:sue", 2, "\ufdd0:mary", 1), cljs.core.hash_map("\ufdd0:sue", 1, "\ufdd0:mary", 1), cljs.core.hash_map("\ufdd0:sue", 3, "\ufdd0:mary", 2), cljs.core.hash_map("\ufdd0:sue", 
      1, "\ufdd0:mary", 3)]), cljs.core.hash_map("\ufdd0:mary", cljs.core.hash_map(3, cljs.core.set([cljs.core.hash_map("\ufdd0:sue", 1, "\ufdd0:mary", 3)]), 2, cljs.core.set([cljs.core.hash_map("\ufdd0:sue", 3, "\ufdd0:mary", 2)]), 1, cljs.core.set([cljs.core.hash_map("\ufdd0:sue", 2, "\ufdd0:mary", 1), cljs.core.hash_map("\ufdd0:sue", 1, "\ufdd0:mary", 1)])))), cljs.core.hash_map("\ufdd0:line", 87, "\ufdd0:column", 18)))), cljs.core.hash_map("\ufdd0:line", 68, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 
      67, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5307;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test_database", bacwn.test.impl.test_database.test_add_tuples);
bacwn.test.impl.test_database.test_remove_tuples = function test_remove_tuples() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_database.test_remove_tuples)
};
bacwn.test.impl.test_database.test_remove_tuples = cljs.core.vary_meta.call(null, bacwn.test.impl.test_database.test_remove_tuples, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-remove-tuples", "\ufdd0:test", function test_remove_tuples_test() {
  var db = cljs.core.reduce.call(null, function(p1__5304_SHARP_, p2__5305_SHARP_) {
    return cljs.core.apply.call(null, fogus.datalog.bacwn.impl.database.remove_tuple, p1__5304_SHARP_, cljs.core.first.call(null, p2__5305_SHARP_), cljs.core.next.call(null, p2__5305_SHARP_))
  }, bacwn.test.impl.test_database.test_db_1, cljs.core.PersistentVector.fromArray([cljs.core.PersistentVector.fromArray(["\ufdd0:fred", cljs.core.ObjMap.fromObject(["\ufdd0:mary", "\ufdd0:sue"], {"\ufdd0:mary":1, "\ufdd0:sue":1})], true), cljs.core.PersistentVector.fromArray(["\ufdd0:fred", cljs.core.ObjMap.fromObject(["\ufdd0:mary", "\ufdd0:sue"], {"\ufdd0:mary":3, "\ufdd0:sue":1})], true), cljs.core.PersistentVector.fromArray(["\ufdd0:sally", cljs.core.ObjMap.fromObject(["\ufdd0:jen", "\ufdd0:becky", 
  "\ufdd0:joan"], {"\ufdd0:jen":1, "\ufdd0:becky":2, "\ufdd0:joan":0})], true), cljs.core.PersistentVector.fromArray(["\ufdd0:sally", cljs.core.ObjMap.fromObject(["\ufdd0:jen", "\ufdd0:becky", "\ufdd0:joan"], {"\ufdd0:jen":1, "\ufdd0:becky":4, "\ufdd0:joan":3})], true)], true));
  try {
    var values__4792__auto__ = cljs.core.list.call(null, db, fogus.datalog.bacwn.impl.database.datalog_database.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:sally", "\ufdd0:fred"], {"\ufdd0:sally":fogus.datalog.bacwn.impl.database.datalog_relation.call(null, cljs.core.PersistentHashSet.fromArray(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"]), cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"], {"\ufdd0:jen":1, "\ufdd0:joan":0, "\ufdd0:becky":3}), 
    cljs.core.ObjMap.fromObject(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"], {"\ufdd0:jen":1, "\ufdd0:joan":3, "\ufdd0:becky":2})]), cljs.core.ObjMap.fromObject(["\ufdd0:becky", "\ufdd0:jen"], {"\ufdd0:becky":cljs.core.PersistentArrayMap.fromArrays([3, 2], [cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"], {"\ufdd0:jen":1, "\ufdd0:joan":0, "\ufdd0:becky":3})]), cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:jen", 
    "\ufdd0:joan", "\ufdd0:becky"], {"\ufdd0:jen":1, "\ufdd0:joan":3, "\ufdd0:becky":2})])]), "\ufdd0:jen":cljs.core.PersistentArrayMap.fromArrays([1], [cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"], {"\ufdd0:jen":1, "\ufdd0:joan":0, "\ufdd0:becky":3}), cljs.core.ObjMap.fromObject(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"], {"\ufdd0:jen":1, "\ufdd0:joan":3, "\ufdd0:becky":2})])])})), "\ufdd0:fred":fogus.datalog.bacwn.impl.database.datalog_relation.call(null, 
    cljs.core.PersistentHashSet.fromArray(["\ufdd0:sue", "\ufdd0:mary"]), cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:sue", "\ufdd0:mary"], {"\ufdd0:sue":2, "\ufdd0:mary":1}), cljs.core.ObjMap.fromObject(["\ufdd0:sue", "\ufdd0:mary"], {"\ufdd0:sue":3, "\ufdd0:mary":2})]), cljs.core.ObjMap.fromObject(["\ufdd0:mary"], {"\ufdd0:mary":cljs.core.PersistentArrayMap.fromArrays([2, 1], [cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:sue", "\ufdd0:mary"], 
    {"\ufdd0:sue":3, "\ufdd0:mary":2})]), cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:sue", "\ufdd0:mary"], {"\ufdd0:sue":2, "\ufdd0:mary":1})])])}))})));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", "\ufdd1'db", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-database", cljs.core.hash_map("\ufdd0:sally", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-relation", 
      cljs.core.set(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"]), cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 3), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 2)]), cljs.core.hash_map("\ufdd0:becky", cljs.core.hash_map(3, cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 3)]), 2, cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 2)])), "\ufdd0:jen", cljs.core.hash_map(1, 
      cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 3), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 2)])))), cljs.core.hash_map("\ufdd0:line", 110, "\ufdd0:column", 21)), "\ufdd0:fred", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-relation", cljs.core.set(["\ufdd0:sue", "\ufdd0:mary"]), cljs.core.set([cljs.core.hash_map("\ufdd0:sue", 2, "\ufdd0:mary", 1), cljs.core.hash_map("\ufdd0:sue", 3, "\ufdd0:mary", 2)]), cljs.core.hash_map("\ufdd0:mary", 
      cljs.core.hash_map(2, cljs.core.set([cljs.core.hash_map("\ufdd0:sue", 3, "\ufdd0:mary", 2)]), 1, cljs.core.set([cljs.core.hash_map("\ufdd0:sue", 2, "\ufdd0:mary", 1)])))), cljs.core.hash_map("\ufdd0:line", 123, "\ufdd0:column", 20)))), cljs.core.hash_map("\ufdd0:line", 109, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 108, "\ufdd0:column", 9))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", "\ufdd1'db", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-database", cljs.core.hash_map("\ufdd0:sally", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-relation", 
      cljs.core.set(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"]), cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 3), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 2)]), cljs.core.hash_map("\ufdd0:becky", cljs.core.hash_map(3, cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 3)]), 2, cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 2)])), "\ufdd0:jen", cljs.core.hash_map(1, 
      cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 3), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 2)])))), cljs.core.hash_map("\ufdd0:line", 110, "\ufdd0:column", 21)), "\ufdd0:fred", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-relation", cljs.core.set(["\ufdd0:sue", "\ufdd0:mary"]), cljs.core.set([cljs.core.hash_map("\ufdd0:sue", 2, "\ufdd0:mary", 1), cljs.core.hash_map("\ufdd0:sue", 3, "\ufdd0:mary", 2)]), cljs.core.hash_map("\ufdd0:mary", 
      cljs.core.hash_map(2, cljs.core.set([cljs.core.hash_map("\ufdd0:sue", 3, "\ufdd0:mary", 2)]), 1, cljs.core.set([cljs.core.hash_map("\ufdd0:sue", 2, "\ufdd0:mary", 1)])))), cljs.core.hash_map("\ufdd0:line", 123, "\ufdd0:column", 20)))), cljs.core.hash_map("\ufdd0:line", 109, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 108, "\ufdd0:column", 9))}))
    }
    return result__4793__auto__
  }catch(e5309) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5309)) {
      var t__4829__auto__ = e5309;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", "\ufdd1'db", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-database", cljs.core.hash_map("\ufdd0:sally", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-relation", cljs.core.set(["\ufdd0:jen", 
      "\ufdd0:joan", "\ufdd0:becky"]), cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 3), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 2)]), cljs.core.hash_map("\ufdd0:becky", cljs.core.hash_map(3, cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 3)]), 2, cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 2)])), "\ufdd0:jen", cljs.core.hash_map(1, cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 
      1, "\ufdd0:joan", 0, "\ufdd0:becky", 3), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 2)])))), cljs.core.hash_map("\ufdd0:line", 110, "\ufdd0:column", 21)), "\ufdd0:fred", cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-relation", cljs.core.set(["\ufdd0:sue", "\ufdd0:mary"]), cljs.core.set([cljs.core.hash_map("\ufdd0:sue", 2, "\ufdd0:mary", 1), cljs.core.hash_map("\ufdd0:sue", 3, "\ufdd0:mary", 2)]), cljs.core.hash_map("\ufdd0:mary", cljs.core.hash_map(2, cljs.core.set([cljs.core.hash_map("\ufdd0:sue", 
      3, "\ufdd0:mary", 2)]), 1, cljs.core.set([cljs.core.hash_map("\ufdd0:sue", 2, "\ufdd0:mary", 1)])))), cljs.core.hash_map("\ufdd0:line", 123, "\ufdd0:column", 20)))), cljs.core.hash_map("\ufdd0:line", 109, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 108, "\ufdd0:column", 9))}))
    }else {
      if("\ufdd0:else") {
        throw e5309;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test_database", bacwn.test.impl.test_database.test_remove_tuples);
bacwn.test.impl.test_database.test_select = function test_select() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_database.test_select)
};
bacwn.test.impl.test_database.test_select = cljs.core.vary_meta.call(null, bacwn.test.impl.test_database.test_select, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-select", "\ufdd0:test", function test_select_test() {
  try {
    var values__4792__auto___5316 = cljs.core.list.call(null, cljs.core.set.call(null, fogus.datalog.bacwn.impl.database.select.call(null, bacwn.test.impl.test_database.test_db_1, "\ufdd0:sally", cljs.core.ObjMap.fromObject(["\ufdd0:jen", "\ufdd0:becky"], {"\ufdd0:jen":1, "\ufdd0:becky":2}))), cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:jen", "\ufdd0:joan", "\ufdd0:becky"], {"\ufdd0:jen":1, "\ufdd0:joan":0, "\ufdd0:becky":2}), cljs.core.ObjMap.fromObject(["\ufdd0:jen", 
    "\ufdd0:joan", "\ufdd0:becky"], {"\ufdd0:jen":1, "\ufdd0:joan":3, "\ufdd0:becky":2})]));
    var result__4793__auto___5317 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5316);
    if(cljs.core.truth_(result__4793__auto___5317)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5316), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'set", cljs.core.with_meta(cljs.core.list("\ufdd1'select", "\ufdd1'test-db-1", "\ufdd0:sally", cljs.core.hash_map("\ufdd0:jen", 
      1, "\ufdd0:becky", 2)), cljs.core.hash_map("\ufdd0:line", 136, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 136, "\ufdd0:column", 10)), cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 2), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 2)])), cljs.core.hash_map("\ufdd0:line", 136, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5316)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'set", cljs.core.with_meta(cljs.core.list("\ufdd1'select", "\ufdd1'test-db-1", 
      "\ufdd0:sally", cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:becky", 2)), cljs.core.hash_map("\ufdd0:line", 136, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 136, "\ufdd0:column", 10)), cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 2), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 2)])), cljs.core.hash_map("\ufdd0:line", 136, "\ufdd0:column", 7))}))
    }
  }catch(e5313) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5313)) {
      var t__4829__auto___5318 = e5313;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5318, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'set", cljs.core.with_meta(cljs.core.list("\ufdd1'select", "\ufdd1'test-db-1", "\ufdd0:sally", cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:becky", 2)), cljs.core.hash_map("\ufdd0:line", 
      136, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 136, "\ufdd0:column", 10)), cljs.core.set([cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 0, "\ufdd0:becky", 2), cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:joan", 3, "\ufdd0:becky", 2)])), cljs.core.hash_map("\ufdd0:line", 136, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5313;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5319 = cljs.core.list.call(null, cljs.core.set.call(null, fogus.datalog.bacwn.impl.database.select.call(null, bacwn.test.impl.test_database.test_db_1, "\ufdd0:fred", cljs.core.ObjMap.fromObject(["\ufdd0:sue"], {"\ufdd0:sue":1}))));
    var result__4793__auto___5320 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5319);
    if(cljs.core.truth_(result__4793__auto___5320)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5319), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:mary", "\ufdd0:sue"], {"\ufdd0:mary":1, "\ufdd0:sue":1}), cljs.core.ObjMap.fromObject(["\ufdd0:mary", "\ufdd0:sue"], {"\ufdd0:mary":3, "\ufdd0:sue":1})]), 
      "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'set", cljs.core.with_meta(cljs.core.list("\ufdd1'select", "\ufdd1'test-db-1", "\ufdd0:fred", cljs.core.hash_map("\ufdd0:sue", 1)), cljs.core.hash_map("\ufdd0:line", 138, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 138, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 138, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5319)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:mary", "\ufdd0:sue"], {"\ufdd0:mary":1, "\ufdd0:sue":1}), cljs.core.ObjMap.fromObject(["\ufdd0:mary", "\ufdd0:sue"], 
      {"\ufdd0:mary":3, "\ufdd0:sue":1})]), "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'set", cljs.core.with_meta(cljs.core.list("\ufdd1'select", "\ufdd1'test-db-1", "\ufdd0:fred", cljs.core.hash_map("\ufdd0:sue", 1)), cljs.core.hash_map("\ufdd0:line", 138, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 138, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 138, "\ufdd0:column", 7))}))
    }
  }catch(e5314) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5314)) {
      var t__4829__auto___5321 = e5314;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5321, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:mary", "\ufdd0:sue"], {"\ufdd0:mary":1, "\ufdd0:sue":1}), cljs.core.ObjMap.fromObject(["\ufdd0:mary", "\ufdd0:sue"], {"\ufdd0:mary":3, "\ufdd0:sue":1})]), "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", 
      cljs.core.with_meta(cljs.core.list("\ufdd1'set", cljs.core.with_meta(cljs.core.list("\ufdd1'select", "\ufdd1'test-db-1", "\ufdd0:fred", cljs.core.hash_map("\ufdd0:sue", 1)), cljs.core.hash_map("\ufdd0:line", 138, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 138, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 138, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5314;
      }else {
      }
    }
  }
  try {
    var values__4792__auto__ = cljs.core.list.call(null, fogus.datalog.bacwn.impl.database.select.call(null, bacwn.test.impl.test_database.test_db_1, "\ufdd0:sally", cljs.core.ObjMap.fromObject(["\ufdd0:joan", "\ufdd0:jen"], {"\ufdd0:joan":5, "\ufdd0:jen":1})));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core.empty_QMARK_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.empty_QMARK_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'select", "\ufdd1'test-db-1", "\ufdd0:sally", cljs.core.hash_map("\ufdd0:joan", 5, "\ufdd0:jen", 1)), 
      cljs.core.hash_map("\ufdd0:line", 140, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 140, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'empty?", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'select", "\ufdd1'test-db-1", "\ufdd0:sally", cljs.core.hash_map("\ufdd0:joan", 
      5, "\ufdd0:jen", 1)), cljs.core.hash_map("\ufdd0:line", 140, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 140, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5315) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5315)) {
      var t__4829__auto__ = e5315;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'select", "\ufdd1'test-db-1", "\ufdd0:sally", cljs.core.hash_map("\ufdd0:joan", 5, "\ufdd0:jen", 1)), cljs.core.hash_map("\ufdd0:line", 140, "\ufdd0:column", 
      15))), cljs.core.hash_map("\ufdd0:line", 140, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5315;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test_database", bacwn.test.impl.test_database.test_select);
bacwn.test.impl.test_database.test_any_match_QMARK_ = function test_any_match_QMARK_() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_database.test_any_match_QMARK_)
};
bacwn.test.impl.test_database.test_any_match_QMARK_ = cljs.core.vary_meta.call(null, bacwn.test.impl.test_database.test_any_match_QMARK_, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-any-match?", "\ufdd0:test", function test_any_match_QMARK__test() {
  try {
    var values__4792__auto___5330 = cljs.core.list.call(null, bacwn.test.impl.test_database.test_db_1, "\ufdd0:fred", cljs.core.ObjMap.fromObject(["\ufdd0:mary"], {"\ufdd0:mary":3}));
    var result__4793__auto___5331 = cljs.core.apply.call(null, fogus.datalog.bacwn.impl.database.any_match_QMARK_, values__4792__auto___5330);
    if(cljs.core.truth_(result__4793__auto___5331)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, fogus.datalog.bacwn.impl.database.any_match_QMARK_, values__4792__auto___5330), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'any-match?", "\ufdd1'test-db-1", "\ufdd0:fred", cljs.core.hash_map("\ufdd0:mary", 3)), cljs.core.hash_map("\ufdd0:line", 
      143, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'any-match?", values__4792__auto___5330)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'any-match?", "\ufdd1'test-db-1", "\ufdd0:fred", cljs.core.hash_map("\ufdd0:mary", 3)), cljs.core.hash_map("\ufdd0:line", 
      143, "\ufdd0:column", 7))}))
    }
  }catch(e5326) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5326)) {
      var t__4829__auto___5332 = e5326;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5332, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'any-match?", "\ufdd1'test-db-1", "\ufdd0:fred", cljs.core.hash_map("\ufdd0:mary", 3)), cljs.core.hash_map("\ufdd0:line", 143, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5326;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5333 = cljs.core.list.call(null, bacwn.test.impl.test_database.test_db_1, "\ufdd0:sally", cljs.core.ObjMap.fromObject(["\ufdd0:jen", "\ufdd0:becky", "\ufdd0:joan"], {"\ufdd0:jen":1, "\ufdd0:becky":2, "\ufdd0:joan":3}));
    var result__4793__auto___5334 = cljs.core.apply.call(null, fogus.datalog.bacwn.impl.database.any_match_QMARK_, values__4792__auto___5333);
    if(cljs.core.truth_(result__4793__auto___5334)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, fogus.datalog.bacwn.impl.database.any_match_QMARK_, values__4792__auto___5333), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'any-match?", "\ufdd1'test-db-1", "\ufdd0:sally", cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:becky", 2, "\ufdd0:joan", 3)), 
      cljs.core.hash_map("\ufdd0:line", 144, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'any-match?", values__4792__auto___5333)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'any-match?", "\ufdd1'test-db-1", "\ufdd0:sally", cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:becky", 2, "\ufdd0:joan", 
      3)), cljs.core.hash_map("\ufdd0:line", 144, "\ufdd0:column", 7))}))
    }
  }catch(e5327) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5327)) {
      var t__4829__auto___5335 = e5327;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5335, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'any-match?", "\ufdd1'test-db-1", "\ufdd0:sally", cljs.core.hash_map("\ufdd0:jen", 1, "\ufdd0:becky", 2, "\ufdd0:joan", 3)), cljs.core.hash_map("\ufdd0:line", 144, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5327;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5336 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.database.any_match_QMARK_.call(null, bacwn.test.impl.test_database.test_db_1, "\ufdd0:sally", cljs.core.ObjMap.fromObject(["\ufdd0:jen"], {"\ufdd0:jen":5})));
    var result__4793__auto___5337 = cljs.core.apply.call(null, cljs.core.not, values__4792__auto___5336);
    if(cljs.core.truth_(result__4793__auto___5337)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.not, values__4792__auto___5336), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'any-match?", "\ufdd1'test-db-1", "\ufdd0:sally", cljs.core.hash_map("\ufdd0:jen", 5)), cljs.core.hash_map("\ufdd0:line", 
      145, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 145, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'not", values__4792__auto___5336)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'any-match?", "\ufdd1'test-db-1", "\ufdd0:sally", cljs.core.hash_map("\ufdd0:jen", 
      5)), cljs.core.hash_map("\ufdd0:line", 145, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 145, "\ufdd0:column", 7))}))
    }
  }catch(e5328) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5328)) {
      var t__4829__auto___5338 = e5328;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5338, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'any-match?", "\ufdd1'test-db-1", "\ufdd0:sally", cljs.core.hash_map("\ufdd0:jen", 5)), cljs.core.hash_map("\ufdd0:line", 145, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 
      145, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5328;
      }else {
      }
    }
  }
  try {
    var values__4792__auto__ = cljs.core.list.call(null, fogus.datalog.bacwn.impl.database.any_match_QMARK_.call(null, bacwn.test.impl.test_database.test_db_1, "\ufdd0:fred", cljs.core.ObjMap.fromObject(["\ufdd0:mary", "\ufdd0:sue"], {"\ufdd0:mary":1, "\ufdd0:sue":5})));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core.not, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.not, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'any-match?", "\ufdd1'test-db-1", "\ufdd0:fred", cljs.core.hash_map("\ufdd0:mary", 1, "\ufdd0:sue", 5)), cljs.core.hash_map("\ufdd0:line", 
      146, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 146, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'not", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'any-match?", "\ufdd1'test-db-1", "\ufdd0:fred", cljs.core.hash_map("\ufdd0:mary", 
      1, "\ufdd0:sue", 5)), cljs.core.hash_map("\ufdd0:line", 146, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 146, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5329) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5329)) {
      var t__4829__auto__ = e5329;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'any-match?", "\ufdd1'test-db-1", "\ufdd0:fred", cljs.core.hash_map("\ufdd0:mary", 1, "\ufdd0:sue", 5)), cljs.core.hash_map("\ufdd0:line", 146, "\ufdd0:column", 
      12))), cljs.core.hash_map("\ufdd0:line", 146, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5329;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test_database", bacwn.test.impl.test_database.test_any_match_QMARK_);
goog.provide("bacwn.test.impl.test_softstrat");
goog.require("cljs.core");
goog.require("fogus.datalog.bacwn.impl.database");
goog.require("fogus.datalog.bacwn.impl.rules");
goog.require("fogus.datalog.bacwn.impl.softstrat");
goog.require("fogus.datalog.bacwn.impl.database");
goog.require("fogus.datalog.bacwn.impl.rules");
goog.require("fogus.datalog.bacwn.impl.softstrat");
goog.require("clojure.set");
goog.require("cemerick.cljs.test");
bacwn.test.impl.test_softstrat.rs1 = fogus.datalog.bacwn.impl.rules.rules_set.call(null, fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:p", cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:b", 
cljs.core.ObjMap.fromObject(["\ufdd0:z", "\ufdd0:y", "\ufdd0:x"], {"\ufdd0:z":"\ufdd1'?z", "\ufdd0:y":"\ufdd1'?y", "\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:q", cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/negated"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:q", cljs.core.ObjMap.fromObject(["\ufdd0:x"], 
{"\ufdd0:x":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/negated"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:q", cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?z"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/negated")], true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:q", cljs.core.ObjMap.fromObject(["\ufdd0:x"], 
{"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:d", cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true))));
bacwn.test.impl.test_softstrat.q1 = cljs.core.with_meta.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:p", cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":1}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.ObjMap.fromObject(["\ufdd0:type"], {"\ufdd0:type":"\ufdd0:fogus.datalog.bacwn.impl.rules/datalog-query"}));
bacwn.test.impl.test_softstrat.ws = fogus.datalog.bacwn.impl.softstrat.build_soft_strat_work_plan.call(null, bacwn.test.impl.test_softstrat.rs1, bacwn.test.impl.test_softstrat.q1);
bacwn.test.impl.test_softstrat.test_soft_stratification = function test_soft_stratification() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_softstrat.test_soft_stratification)
};
bacwn.test.impl.test_softstrat.test_soft_stratification = cljs.core.vary_meta.call(null, bacwn.test.impl.test_softstrat.test_soft_stratification, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-soft-stratification", "\ufdd0:test", function test_soft_stratification_test() {
  var soft = (new cljs.core.Keyword("\ufdd0:stratification")).call(null, bacwn.test.impl.test_softstrat.ws);
  var q = (new cljs.core.Keyword("\ufdd0:query")).call(null, bacwn.test.impl.test_softstrat.ws);
  try {
    var values__4792__auto___5355 = cljs.core.list.call(null, q, cljs.core.with_meta.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:p", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":1}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.ObjMap.fromObject(["\ufdd0:type"], {"\ufdd0:type":"\ufdd0:fogus.datalog.bacwn.impl.rules/datalog-query"})));
    var result__4793__auto___5356 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5355);
    if(cljs.core.truth_(result__4793__auto___5356)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5355), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", "\ufdd1'q", cljs.core.with_meta(cljs.core.list("\ufdd1'?-", cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), 
      "\ufdd0:x", 1), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 14))), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 9))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5355)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", "\ufdd1'q", cljs.core.with_meta(cljs.core.list("\ufdd1'?-", cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:bound", 
      cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", 1), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 14))), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 9))}))
    }
  }catch(e5349) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5349)) {
      var t__4829__auto___5357 = e5349;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5357, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", "\ufdd1'q", cljs.core.with_meta(cljs.core.list("\ufdd1'?-", cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", 1), cljs.core.hash_map("\ufdd0:line", 
      36, "\ufdd0:column", 14))), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 9))}))
    }else {
      if("\ufdd0:else") {
        throw e5349;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5358 = cljs.core.list.call(null, cljs.core.count.call(null, soft), 4);
    var result__4793__auto___5359 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5358);
    if(cljs.core.truth_(result__4793__auto___5359)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5358), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'count", "\ufdd1'soft"), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 12)), 4), cljs.core.hash_map("\ufdd0:line", 
      37, "\ufdd0:column", 9))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5358)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'count", "\ufdd1'soft"), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 
      12)), 4), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 9))}))
    }
  }catch(e5350) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5350)) {
      var t__4829__auto___5360 = e5350;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5360, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'count", "\ufdd1'soft"), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 12)), 4), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 9))}))
    }else {
      if("\ufdd0:else") {
        throw e5350;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5361 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.rules.rules_set.call(null, fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:q", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), 
    "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:magic", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:q", "\ufdd0:magic":true, "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, 
    "\ufdd0:d", cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:magic", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:q", "\ufdd0:magic":true, "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), 
    cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:magic", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:p", "\ufdd0:magic":true, "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), 
    fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:b", cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y", "\ufdd0:z"], {"\ufdd0:x":"\ufdd1'?x", "\ufdd0:y":"\ufdd1'?y", "\ufdd0:z":"\ufdd1'?z"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true)))), cljs.core.nth.call(null, soft, 0));
    var result__4793__auto___5362 = cljs.core.apply.call(null, clojure.set.subset_QMARK_, values__4792__auto___5361);
    if(cljs.core.truth_(result__4793__auto___5362)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, clojure.set.subset_QMARK_, values__4792__auto___5361), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'clojure.set/subset?", cljs.core.with_meta(cljs.core.list("\ufdd1'rules-set", cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", 
      "\ufdd0:q", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 35)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 67)), cljs.core.with_meta(cljs.core.list("\ufdd0:d", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 40, "\ufdd0:column", 
      35))), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 31)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 42, "\ufdd0:column", 35)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), 
      "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 42, "\ufdd0:column", 79)), cljs.core.with_meta(cljs.core.list("\ufdd0:b", "\ufdd0:z", "\ufdd1'?z", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 43, "\ufdd0:column", 35))), cljs.core.hash_map("\ufdd0:line", 42, "\ufdd0:column", 31))), cljs.core.hash_map("\ufdd0:line", 38, "\ufdd0:column", 30)), cljs.core.with_meta(cljs.core.list("\ufdd1'nth", "\ufdd1'soft", 0), cljs.core.hash_map("\ufdd0:line", 
      44, "\ufdd0:column", 30))), cljs.core.hash_map("\ufdd0:line", 38, "\ufdd0:column", 9))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'clojure.set/subset?", values__4792__auto___5361)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'clojure.set/subset?", cljs.core.with_meta(cljs.core.list("\ufdd1'rules-set", cljs.core.with_meta(cljs.core.list("\ufdd1'<-", 
      cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 35)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 67)), cljs.core.with_meta(cljs.core.list("\ufdd0:d", 
      "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 40, "\ufdd0:column", 35))), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 31)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 42, "\ufdd0:column", 35)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", 
      "\ufdd0:p", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 42, "\ufdd0:column", 79)), cljs.core.with_meta(cljs.core.list("\ufdd0:b", "\ufdd0:z", "\ufdd1'?z", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 43, "\ufdd0:column", 35))), cljs.core.hash_map("\ufdd0:line", 42, "\ufdd0:column", 31))), cljs.core.hash_map("\ufdd0:line", 38, "\ufdd0:column", 30)), cljs.core.with_meta(cljs.core.list("\ufdd1'nth", 
      "\ufdd1'soft", 0), cljs.core.hash_map("\ufdd0:line", 44, "\ufdd0:column", 30))), cljs.core.hash_map("\ufdd0:line", 38, "\ufdd0:column", 9))}))
    }
  }catch(e5351) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5351)) {
      var t__4829__auto___5363 = e5351;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5363, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'clojure.set/subset?", cljs.core.with_meta(cljs.core.list("\ufdd1'rules-set", cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", 
      "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 35)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 67)), cljs.core.with_meta(cljs.core.list("\ufdd0:d", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 40, "\ufdd0:column", 
      35))), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 31)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 42, "\ufdd0:column", 35)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), 
      "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 42, "\ufdd0:column", 79)), cljs.core.with_meta(cljs.core.list("\ufdd0:b", "\ufdd0:z", "\ufdd1'?z", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 43, "\ufdd0:column", 35))), cljs.core.hash_map("\ufdd0:line", 42, "\ufdd0:column", 31))), cljs.core.hash_map("\ufdd0:line", 38, "\ufdd0:column", 30)), cljs.core.with_meta(cljs.core.list("\ufdd1'nth", "\ufdd1'soft", 0), cljs.core.hash_map("\ufdd0:line", 
      44, "\ufdd0:column", 30))), cljs.core.hash_map("\ufdd0:line", 38, "\ufdd0:column", 9))}))
    }else {
      if("\ufdd0:else") {
        throw e5351;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5364 = cljs.core.list.call(null, cljs.core.nth.call(null, soft, 1), fogus.datalog.bacwn.impl.rules.rules_set.call(null, fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:magic", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:q", "\ufdd0:magic":true, "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), 
    cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:magic", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:p", "\ufdd0:magic":true, "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), 
    fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:b", cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y", "\ufdd0:z"], {"\ufdd0:x":"\ufdd1'?x", "\ufdd0:y":"\ufdd1'?y", "\ufdd0:z":"\ufdd1'?z"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:q", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x"], 
    {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/negated")], true)))));
    var result__4793__auto___5365 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5364);
    if(cljs.core.truth_(result__4793__auto___5365)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5364), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'nth", "\ufdd1'soft", 1), cljs.core.hash_map("\ufdd0:line", 45, "\ufdd0:column", 12)), cljs.core.with_meta(cljs.core.list("\ufdd1'rules-set", 
      cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 47, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 47, 
      "\ufdd0:column", 61)), cljs.core.with_meta(cljs.core.list("\ufdd0:b", "\ufdd0:z", "\ufdd1'?z", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 49, "\ufdd0:column", 17))), cljs.core.hash_map("\ufdd0:line", 47, "\ufdd0:column", 13))), 
      cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 45, "\ufdd0:column", 9))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5364)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'nth", "\ufdd1'soft", 1), cljs.core.hash_map("\ufdd0:line", 45, "\ufdd0:column", 
      12)), cljs.core.with_meta(cljs.core.list("\ufdd1'rules-set", cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 47, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", 
      "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 47, "\ufdd0:column", 61)), cljs.core.with_meta(cljs.core.list("\ufdd0:b", "\ufdd0:z", "\ufdd1'?z", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 49, "\ufdd0:column", 17))), cljs.core.hash_map("\ufdd0:line", 
      47, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 45, "\ufdd0:column", 9))}))
    }
  }catch(e5352) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5352)) {
      var t__4829__auto___5366 = e5352;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5366, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'nth", "\ufdd1'soft", 1), cljs.core.hash_map("\ufdd0:line", 45, "\ufdd0:column", 12)), cljs.core.with_meta(cljs.core.list("\ufdd1'rules-set", cljs.core.with_meta(cljs.core.list("\ufdd1'<-", 
      cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 47, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 47, "\ufdd0:column", 61)), cljs.core.with_meta(cljs.core.list("\ufdd0:b", 
      "\ufdd0:z", "\ufdd1'?z", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 49, "\ufdd0:column", 17))), cljs.core.hash_map("\ufdd0:line", 47, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 
      45, "\ufdd0:column", 9))}))
    }else {
      if("\ufdd0:else") {
        throw e5352;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5367 = cljs.core.list.call(null, cljs.core.nth.call(null, soft, 2), fogus.datalog.bacwn.impl.rules.rules_set.call(null, fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:magic", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:q", "\ufdd0:magic":true, "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), 
    cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?z"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:magic", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:p", "\ufdd0:magic":true, "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), 
    fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:b", cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y", "\ufdd0:z"], {"\ufdd0:x":"\ufdd1'?x", "\ufdd0:y":"\ufdd1'?y", "\ufdd0:z":"\ufdd1'?z"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:q", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x"], 
    {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/negated"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:q", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/negated")], true)))));
    var result__4793__auto___5368 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5367);
    if(cljs.core.truth_(result__4793__auto___5368)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5367), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'nth", "\ufdd1'soft", 2), cljs.core.hash_map("\ufdd0:line", 50, "\ufdd0:column", 12)), cljs.core.with_meta(cljs.core.list("\ufdd1'rules-set", 
      cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 52, 
      "\ufdd0:column", 61)), cljs.core.with_meta(cljs.core.list("\ufdd0:b", "\ufdd0:z", "\ufdd1'?z", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 53, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 54, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", cljs.core.hash_map("\ufdd0:pred", 
      "\ufdd0:q", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 55, "\ufdd0:column", 17))), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 51, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 50, "\ufdd0:column", 9))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5367)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'nth", "\ufdd1'soft", 2), cljs.core.hash_map("\ufdd0:line", 50, "\ufdd0:column", 
      12)), cljs.core.with_meta(cljs.core.list("\ufdd1'rules-set", cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", 
      "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 61)), cljs.core.with_meta(cljs.core.list("\ufdd0:b", "\ufdd0:z", "\ufdd1'?z", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 53, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 54, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", 
      cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 55, "\ufdd0:column", 17))), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 51, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 50, "\ufdd0:column", 9))}))
    }
  }catch(e5353) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5353)) {
      var t__4829__auto___5369 = e5353;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5369, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'nth", "\ufdd1'soft", 2), cljs.core.hash_map("\ufdd0:line", 50, "\ufdd0:column", 12)), cljs.core.with_meta(cljs.core.list("\ufdd1'rules-set", cljs.core.with_meta(cljs.core.list("\ufdd1'<-", 
      cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 61)), cljs.core.with_meta(cljs.core.list("\ufdd0:b", 
      "\ufdd0:z", "\ufdd1'?z", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 53, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 54, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), 
      "\ufdd0:x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 55, "\ufdd0:column", 17))), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 51, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 50, "\ufdd0:column", 9))}))
    }else {
      if("\ufdd0:else") {
        throw e5353;
      }else {
      }
    }
  }
  try {
    var values__4792__auto__ = cljs.core.list.call(null, cljs.core.nth.call(null, soft, 3), fogus.datalog.bacwn.impl.rules.rules_set.call(null, fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:p", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x"], 
    {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:magic", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:p", "\ufdd0:magic":true, "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), 
    fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:b", cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y", "\ufdd0:z"], {"\ufdd0:x":"\ufdd1'?x", "\ufdd0:y":"\ufdd1'?y", "\ufdd0:z":"\ufdd1'?z"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:q", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x"], 
    {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/negated"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:q", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/negated"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", 
    "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:q", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?z"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/negated")], true)))));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'nth", "\ufdd1'soft", 3), cljs.core.hash_map("\ufdd0:line", 56, "\ufdd0:column", 12)), cljs.core.with_meta(cljs.core.list("\ufdd1'rules-set", 
      cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 58, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 58, "\ufdd0:column", 49)), 
      cljs.core.with_meta(cljs.core.list("\ufdd0:b", "\ufdd0:z", "\ufdd1'?z", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 59, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 60, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", cljs.core.hash_map("\ufdd0:pred", 
      "\ufdd0:q", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 61, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 62, "\ufdd0:column", 17))), cljs.core.hash_map("\ufdd0:line", 58, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 57, "\ufdd0:column", 12))), 
      cljs.core.hash_map("\ufdd0:line", 56, "\ufdd0:column", 9))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'nth", "\ufdd1'soft", 3), cljs.core.hash_map("\ufdd0:line", 56, "\ufdd0:column", 
      12)), cljs.core.with_meta(cljs.core.list("\ufdd1'rules-set", cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 58, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), 
      cljs.core.hash_map("\ufdd0:line", 58, "\ufdd0:column", 49)), cljs.core.with_meta(cljs.core.list("\ufdd0:b", "\ufdd0:z", "\ufdd1'?z", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 59, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 60, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", 
      cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 61, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 62, "\ufdd0:column", 17))), cljs.core.hash_map("\ufdd0:line", 58, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 
      57, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 56, "\ufdd0:column", 9))}))
    }
    return result__4793__auto__
  }catch(e5354) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5354)) {
      var t__4829__auto__ = e5354;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'nth", "\ufdd1'soft", 3), cljs.core.hash_map("\ufdd0:line", 56, "\ufdd0:column", 12)), cljs.core.with_meta(cljs.core.list("\ufdd1'rules-set", cljs.core.with_meta(cljs.core.list("\ufdd1'<-", 
      cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 58, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 58, "\ufdd0:column", 49)), cljs.core.with_meta(cljs.core.list("\ufdd0:b", 
      "\ufdd0:z", "\ufdd1'?z", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 59, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 60, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), 
      "\ufdd0:x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 61, "\ufdd0:column", 17)), cljs.core.with_meta(cljs.core.list("\ufdd1'not!", cljs.core.hash_map("\ufdd0:pred", "\ufdd0:q", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 62, "\ufdd0:column", 17))), cljs.core.hash_map("\ufdd0:line", 58, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 57, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 56, "\ufdd0:column", 
      9))}))
    }else {
      if("\ufdd0:else") {
        throw e5354;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-softstrat", bacwn.test.impl.test_softstrat.test_soft_stratification);
bacwn.test.impl.test_softstrat.tdb_1 = fogus.datalog.bacwn.impl.database.add_relation.call(null, fogus.datalog.bacwn.impl.database.add_relation.call(null, fogus.datalog.bacwn.impl.database.empty_database, "\ufdd0:b", cljs.core.PersistentVector.fromArray(["\ufdd0:x", "\ufdd0:y", "\ufdd0:z"], true)), "\ufdd0:d", cljs.core.PersistentVector.fromArray(["\ufdd0:x"], true));
bacwn.test.impl.test_softstrat.tdb_2 = fogus.datalog.bacwn.impl.database.add_tuples.call(null, bacwn.test.impl.test_softstrat.tdb_1, cljs.core.PersistentVector.fromArray(["\ufdd0:b", "\ufdd0:x", 1, "\ufdd0:y", 2, "\ufdd0:z", 3], true));
bacwn.test.impl.test_softstrat.test_tdb_2 = function test_tdb_2() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_softstrat.test_tdb_2)
};
bacwn.test.impl.test_softstrat.test_tdb_2 = cljs.core.vary_meta.call(null, bacwn.test.impl.test_softstrat.test_tdb_2, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-tdb-2", "\ufdd0:test", function test_tdb_2_test() {
  try {
    var values__4792__auto__ = cljs.core.list.call(null, fogus.datalog.bacwn.impl.softstrat.evaluate_soft_work_set.call(null, bacwn.test.impl.test_softstrat.ws, bacwn.test.impl.test_softstrat.tdb_2, cljs.core.ObjMap.EMPTY), cljs.core.PersistentVector.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":1})], true));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-soft-work-set", "\ufdd1'ws", "\ufdd1'tdb-2", cljs.core.hash_map()), cljs.core.hash_map("\ufdd0:line", 75, 
      "\ufdd0:column", 10)), cljs.core.vec([cljs.core.hash_map("\ufdd0:x", 1)])), cljs.core.hash_map("\ufdd0:line", 75, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-soft-work-set", "\ufdd1'ws", "\ufdd1'tdb-2", cljs.core.hash_map()), 
      cljs.core.hash_map("\ufdd0:line", 75, "\ufdd0:column", 10)), cljs.core.vec([cljs.core.hash_map("\ufdd0:x", 1)])), cljs.core.hash_map("\ufdd0:line", 75, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5371) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5371)) {
      var t__4829__auto__ = e5371;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-soft-work-set", "\ufdd1'ws", "\ufdd1'tdb-2", cljs.core.hash_map()), cljs.core.hash_map("\ufdd0:line", 75, "\ufdd0:column", 10)), cljs.core.vec([cljs.core.hash_map("\ufdd0:x", 
      1)])), cljs.core.hash_map("\ufdd0:line", 75, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5371;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-softstrat", bacwn.test.impl.test_softstrat.test_tdb_2);
bacwn.test.impl.test_softstrat.tdb_3 = fogus.datalog.bacwn.impl.database.add_tuples.call(null, bacwn.test.impl.test_softstrat.tdb_2, cljs.core.PersistentVector.fromArray(["\ufdd0:d", "\ufdd0:x", 2], true), cljs.core.PersistentVector.fromArray(["\ufdd0:d", "\ufdd0:x", 3], true));
bacwn.test.impl.test_softstrat.test_tdb_3 = function test_tdb_3() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_softstrat.test_tdb_3)
};
bacwn.test.impl.test_softstrat.test_tdb_3 = cljs.core.vary_meta.call(null, bacwn.test.impl.test_softstrat.test_tdb_3, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-tdb-3", "\ufdd0:test", function test_tdb_3_test() {
  try {
    var values__4792__auto__ = cljs.core.list.call(null, fogus.datalog.bacwn.impl.softstrat.evaluate_soft_work_set.call(null, bacwn.test.impl.test_softstrat.ws, bacwn.test.impl.test_softstrat.tdb_3, cljs.core.ObjMap.EMPTY));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core.empty_QMARK_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.empty_QMARK_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-soft-work-set", "\ufdd1'ws", "\ufdd1'tdb-3", cljs.core.hash_map()), cljs.core.hash_map("\ufdd0:line", 
      86, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 86, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'empty?", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-soft-work-set", "\ufdd1'ws", "\ufdd1'tdb-3", cljs.core.hash_map()), 
      cljs.core.hash_map("\ufdd0:line", 86, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 86, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5373) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5373)) {
      var t__4829__auto__ = e5373;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-soft-work-set", "\ufdd1'ws", "\ufdd1'tdb-3", cljs.core.hash_map()), cljs.core.hash_map("\ufdd0:line", 86, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 
      86, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5373;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-softstrat", bacwn.test.impl.test_softstrat.test_tdb_3);
bacwn.test.impl.test_softstrat.db_base = fogus.datalog.bacwn.impl.database.add_relation.call(null, fogus.datalog.bacwn.impl.database.add_relation.call(null, fogus.datalog.bacwn.impl.database.add_index.call(null, fogus.datalog.bacwn.impl.database.add_relation.call(null, fogus.datalog.bacwn.impl.database.add_index.call(null, fogus.datalog.bacwn.impl.database.add_relation.call(null, fogus.datalog.bacwn.impl.database.add_index.call(null, fogus.datalog.bacwn.impl.database.add_relation.call(null, fogus.datalog.bacwn.impl.database.empty_database, 
"\ufdd0:employee", cljs.core.PersistentVector.fromArray(["\ufdd0:id", "\ufdd0:name", "\ufdd0:position"], true)), "\ufdd0:employee", "\ufdd0:name"), "\ufdd0:boss", cljs.core.PersistentVector.fromArray(["\ufdd0:employee-id", "\ufdd0:boss-id"], true)), "\ufdd0:boss", "\ufdd0:employee-id"), "\ufdd0:can-do-job", cljs.core.PersistentVector.fromArray(["\ufdd0:position", "\ufdd0:job"], true)), "\ufdd0:can-do-job", "\ufdd0:position"), "\ufdd0:job-replacement", cljs.core.PersistentVector.fromArray(["\ufdd0:job", 
"\ufdd0:can-be-done-by"], true)), "\ufdd0:job-exceptions", cljs.core.PersistentVector.fromArray(["\ufdd0:id", "\ufdd0:job"], true));
bacwn.test.impl.test_softstrat.db = fogus.datalog.bacwn.impl.database.add_tuples.call(null, bacwn.test.impl.test_softstrat.db_base, cljs.core.PersistentVector.fromArray(["\ufdd0:employee", "\ufdd0:id", 1, "\ufdd0:name", "Bob", "\ufdd0:position", "\ufdd0:boss"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:employee", "\ufdd0:id", 2, "\ufdd0:name", "Mary", "\ufdd0:position", "\ufdd0:chief-accountant"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:employee", "\ufdd0:id", 3, "\ufdd0:name", 
"John", "\ufdd0:position", "\ufdd0:accountant"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:employee", "\ufdd0:id", 4, "\ufdd0:name", "Sameer", "\ufdd0:position", "\ufdd0:chief-programmer"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:employee", "\ufdd0:id", 5, "\ufdd0:name", "Lilian", "\ufdd0:position", "\ufdd0:programmer"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:employee", "\ufdd0:id", 6, "\ufdd0:name", "Li", "\ufdd0:position", "\ufdd0:technician"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:employee", 
"\ufdd0:id", 7, "\ufdd0:name", "Fred", "\ufdd0:position", "\ufdd0:sales"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:employee", "\ufdd0:id", 8, "\ufdd0:name", "Brenda", "\ufdd0:position", "\ufdd0:sales"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:employee", "\ufdd0:id", 9, "\ufdd0:name", "Miki", "\ufdd0:position", "\ufdd0:project-management"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:employee", "\ufdd0:id", 10, "\ufdd0:name", "Albert", "\ufdd0:position", "\ufdd0:technician"], 
true), cljs.core.PersistentVector.fromArray(["\ufdd0:boss", "\ufdd0:employee-id", 2, "\ufdd0:boss-id", 1], true), cljs.core.PersistentVector.fromArray(["\ufdd0:boss", "\ufdd0:employee-id", 3, "\ufdd0:boss-id", 2], true), cljs.core.PersistentVector.fromArray(["\ufdd0:boss", "\ufdd0:employee-id", 4, "\ufdd0:boss-id", 1], true), cljs.core.PersistentVector.fromArray(["\ufdd0:boss", "\ufdd0:employee-id", 5, "\ufdd0:boss-id", 4], true), cljs.core.PersistentVector.fromArray(["\ufdd0:boss", "\ufdd0:employee-id", 
6, "\ufdd0:boss-id", 4], true), cljs.core.PersistentVector.fromArray(["\ufdd0:boss", "\ufdd0:employee-id", 7, "\ufdd0:boss-id", 1], true), cljs.core.PersistentVector.fromArray(["\ufdd0:boss", "\ufdd0:employee-id", 8, "\ufdd0:boss-id", 7], true), cljs.core.PersistentVector.fromArray(["\ufdd0:boss", "\ufdd0:employee-id", 9, "\ufdd0:boss-id", 1], true), cljs.core.PersistentVector.fromArray(["\ufdd0:boss", "\ufdd0:employee-id", 10, "\ufdd0:boss-id", 6], true), cljs.core.PersistentVector.fromArray(["\ufdd0:can-do-job", 
"\ufdd0:position", "\ufdd0:boss", "\ufdd0:job", "\ufdd0:management"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:can-do-job", "\ufdd0:position", "\ufdd0:accountant", "\ufdd0:job", "\ufdd0:accounting"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:can-do-job", "\ufdd0:position", "\ufdd0:chief-accountant", "\ufdd0:job", "\ufdd0:accounting"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:can-do-job", "\ufdd0:position", "\ufdd0:programmer", "\ufdd0:job", "\ufdd0:programming"], 
true), cljs.core.PersistentVector.fromArray(["\ufdd0:can-do-job", "\ufdd0:position", "\ufdd0:chief-programmer", "\ufdd0:job", "\ufdd0:programming"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:can-do-job", "\ufdd0:position", "\ufdd0:technician", "\ufdd0:job", "\ufdd0:server-support"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:can-do-job", "\ufdd0:position", "\ufdd0:sales", "\ufdd0:job", "\ufdd0:sales"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:can-do-job", "\ufdd0:position", 
"\ufdd0:project-management", "\ufdd0:job", "\ufdd0:project-management"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:job-replacement", "\ufdd0:job", "\ufdd0:pc-support", "\ufdd0:can-be-done-by", "\ufdd0:server-support"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:job-replacement", "\ufdd0:job", "\ufdd0:pc-support", "\ufdd0:can-be-done-by", "\ufdd0:programming"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:job-replacement", "\ufdd0:job", "\ufdd0:payroll", "\ufdd0:can-be-done-by", 
"\ufdd0:accounting"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:job-exceptions", "\ufdd0:id", 4, "\ufdd0:job", "\ufdd0:pc-support"], true));
bacwn.test.impl.test_softstrat.rules = fogus.datalog.bacwn.impl.rules.rules_set.call(null, fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:works-for", cljs.core.ObjMap.fromObject(["\ufdd0:boss", "\ufdd0:employee"], {"\ufdd0:boss":"\ufdd1'?y", "\ufdd0:employee":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, 
"\ufdd0:boss", cljs.core.ObjMap.fromObject(["\ufdd0:boss-id", "\ufdd0:employee-id"], {"\ufdd0:boss-id":"\ufdd1'?b-id", "\ufdd0:employee-id":"\ufdd1'?e-id"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:employee", cljs.core.ObjMap.fromObject(["\ufdd0:name", "\ufdd0:id"], {"\ufdd0:name":"\ufdd1'?x", "\ufdd0:id":"\ufdd1'?e-id"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, 
"\ufdd0:employee", cljs.core.ObjMap.fromObject(["\ufdd0:name", "\ufdd0:id"], {"\ufdd0:name":"\ufdd1'?y", "\ufdd0:id":"\ufdd1'?b-id"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:works-for", cljs.core.ObjMap.fromObject(["\ufdd0:boss", "\ufdd0:employee"], {"\ufdd0:boss":"\ufdd1'?y", "\ufdd0:employee":"\ufdd1'?x"}), 
"\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:works-for", cljs.core.ObjMap.fromObject(["\ufdd0:boss", "\ufdd0:employee"], {"\ufdd0:boss":"\ufdd1'?z", "\ufdd0:employee":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:works-for", cljs.core.ObjMap.fromObject(["\ufdd0:boss", "\ufdd0:employee"], 
{"\ufdd0:boss":"\ufdd1'?y", "\ufdd0:employee":"\ufdd1'?z"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:employee-job*", cljs.core.ObjMap.fromObject(["\ufdd0:job", "\ufdd0:employee"], {"\ufdd0:job":"\ufdd1'?y", "\ufdd0:employee":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, 
"\ufdd0:employee", cljs.core.ObjMap.fromObject(["\ufdd0:position", "\ufdd0:name"], {"\ufdd0:position":"\ufdd1'?pos", "\ufdd0:name":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:can-do-job", cljs.core.ObjMap.fromObject(["\ufdd0:job", "\ufdd0:position"], {"\ufdd0:job":"\ufdd1'?y", "\ufdd0:position":"\ufdd1'?pos"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, 
fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:employee-job*", cljs.core.ObjMap.fromObject(["\ufdd0:job", "\ufdd0:employee"], {"\ufdd0:job":"\ufdd1'?y", "\ufdd0:employee":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:job-replacement", cljs.core.ObjMap.fromObject(["\ufdd0:can-be-done-by", "\ufdd0:job"], 
{"\ufdd0:can-be-done-by":"\ufdd1'?z", "\ufdd0:job":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:employee-job*", cljs.core.ObjMap.fromObject(["\ufdd0:job", "\ufdd0:employee"], {"\ufdd0:job":"\ufdd1'?z", "\ufdd0:employee":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, 
fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:employee-job*", cljs.core.ObjMap.fromObject(["\ufdd0:job", "\ufdd0:employee"], {"\ufdd0:job":"\ufdd1'?y", "\ufdd0:employee":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:can-do-job", cljs.core.ObjMap.fromObject(["\ufdd0:job"], {"\ufdd0:job":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), 
fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:employee", cljs.core.ObjMap.fromObject(["\ufdd0:position", "\ufdd0:name"], {"\ufdd0:position":"\ufdd1'?z", "\ufdd0:name":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_ConditionalLiteral.call(null, function(binds__3454__auto__) {
  return cljs.core.apply.call(null, cljs.core._EQ_, binds__3454__auto__)
}, "\ufdd1'=", cljs.core.list("\ufdd1'?z", "\ufdd0:boss"), "\ufdd0:fogus.datalog.bacwn.impl.literals/conditional")], true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:employee-job", cljs.core.ObjMap.fromObject(["\ufdd0:job", "\ufdd0:employee"], {"\ufdd0:job":"\ufdd1'?y", "\ufdd0:employee":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, 
"\ufdd0:employee-job*", cljs.core.ObjMap.fromObject(["\ufdd0:job", "\ufdd0:employee"], {"\ufdd0:job":"\ufdd1'?y", "\ufdd0:employee":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:employee", cljs.core.ObjMap.fromObject(["\ufdd0:name", "\ufdd0:id"], {"\ufdd0:name":"\ufdd1'?x", "\ufdd0:id":"\ufdd1'?id"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, 
"\ufdd0:job-exceptions", cljs.core.ObjMap.fromObject(["\ufdd0:job", "\ufdd0:id"], {"\ufdd0:job":"\ufdd1'?y", "\ufdd0:id":"\ufdd1'?id"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/negated")], true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:bj", cljs.core.ObjMap.fromObject(["\ufdd0:boss", "\ufdd0:name"], {"\ufdd0:boss":"\ufdd1'?y", "\ufdd0:name":"\ufdd1'?x"}), 
"\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:works-for", cljs.core.ObjMap.fromObject(["\ufdd0:boss", "\ufdd0:employee"], {"\ufdd0:boss":"\ufdd1'?y", "\ufdd0:employee":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:employee-job", cljs.core.ObjMap.fromObject(["\ufdd0:job", "\ufdd0:employee"], 
{"\ufdd0:job":"\ufdd0:pc-support", "\ufdd0:employee":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/negated")], true))));
bacwn.test.impl.test_softstrat.ws_1 = fogus.datalog.bacwn.impl.softstrat.build_soft_strat_work_plan.call(null, bacwn.test.impl.test_softstrat.rules, cljs.core.with_meta.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:works-for", cljs.core.ObjMap.fromObject(["\ufdd0:boss", "\ufdd0:employee"], {"\ufdd0:boss":"\ufdd1'?x", "\ufdd0:employee":"\ufdd1'??name"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.ObjMap.fromObject(["\ufdd0:type"], {"\ufdd0:type":"\ufdd0:fogus.datalog.bacwn.impl.rules/datalog-query"})));
bacwn.test.impl.test_softstrat.evaluate_1 = function evaluate_1(name) {
  return cljs.core.set.call(null, fogus.datalog.bacwn.impl.softstrat.evaluate_soft_work_set.call(null, bacwn.test.impl.test_softstrat.ws_1, bacwn.test.impl.test_softstrat.db, cljs.core.PersistentArrayMap.fromArrays(["\ufdd1'??name"], [name])))
};
bacwn.test.impl.test_softstrat.test_ws_1 = function test_ws_1() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_softstrat.test_ws_1)
};
bacwn.test.impl.test_softstrat.test_ws_1 = cljs.core.vary_meta.call(null, bacwn.test.impl.test_softstrat.test_ws_1, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-ws-1", "\ufdd0:test", function test_ws_1_test() {
  try {
    var values__4792__auto___5380 = cljs.core.list.call(null, bacwn.test.impl.test_softstrat.evaluate_1.call(null, "Albert"), cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:boss"], {"\ufdd0:employee":"Albert", "\ufdd0:boss":"Li"}), cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:boss"], {"\ufdd0:employee":"Albert", "\ufdd0:boss":"Sameer"}), cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:boss"], {"\ufdd0:employee":"Albert", "\ufdd0:boss":"Bob"})]));
    var result__4793__auto___5381 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5380);
    if(cljs.core.truth_(result__4793__auto___5381)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5380), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-1", "Albert"), cljs.core.hash_map("\ufdd0:line", 172, "\ufdd0:column", 10)), cljs.core.set([cljs.core.hash_map("\ufdd0:employee", 
      "Albert", "\ufdd0:boss", "Li"), cljs.core.hash_map("\ufdd0:employee", "Albert", "\ufdd0:boss", "Sameer"), cljs.core.hash_map("\ufdd0:employee", "Albert", "\ufdd0:boss", "Bob")])), cljs.core.hash_map("\ufdd0:line", 172, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5380)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-1", "Albert"), cljs.core.hash_map("\ufdd0:line", 172, "\ufdd0:column", 
      10)), cljs.core.set([cljs.core.hash_map("\ufdd0:employee", "Albert", "\ufdd0:boss", "Li"), cljs.core.hash_map("\ufdd0:employee", "Albert", "\ufdd0:boss", "Sameer"), cljs.core.hash_map("\ufdd0:employee", "Albert", "\ufdd0:boss", "Bob")])), cljs.core.hash_map("\ufdd0:line", 172, "\ufdd0:column", 7))}))
    }
  }catch(e5377) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5377)) {
      var t__4829__auto___5382 = e5377;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5382, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-1", "Albert"), cljs.core.hash_map("\ufdd0:line", 172, "\ufdd0:column", 10)), cljs.core.set([cljs.core.hash_map("\ufdd0:employee", "Albert", "\ufdd0:boss", 
      "Li"), cljs.core.hash_map("\ufdd0:employee", "Albert", "\ufdd0:boss", "Sameer"), cljs.core.hash_map("\ufdd0:employee", "Albert", "\ufdd0:boss", "Bob")])), cljs.core.hash_map("\ufdd0:line", 172, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5377;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5383 = cljs.core.list.call(null, bacwn.test.impl.test_softstrat.evaluate_1.call(null, "Bob"));
    var result__4793__auto___5384 = cljs.core.apply.call(null, cljs.core.empty_QMARK_, values__4792__auto___5383);
    if(cljs.core.truth_(result__4793__auto___5384)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.empty_QMARK_, values__4792__auto___5383), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-1", "Bob"), cljs.core.hash_map("\ufdd0:line", 176, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 
      176, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'empty?", values__4792__auto___5383)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-1", "Bob"), cljs.core.hash_map("\ufdd0:line", 176, "\ufdd0:column", 
      15))), cljs.core.hash_map("\ufdd0:line", 176, "\ufdd0:column", 7))}))
    }
  }catch(e5378) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5378)) {
      var t__4829__auto___5385 = e5378;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5385, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-1", "Bob"), cljs.core.hash_map("\ufdd0:line", 176, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 176, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5378;
      }else {
      }
    }
  }
  try {
    var values__4792__auto__ = cljs.core.list.call(null, bacwn.test.impl.test_softstrat.evaluate_1.call(null, "John"), cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:boss"], {"\ufdd0:employee":"John", "\ufdd0:boss":"Bob"}), cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:boss"], {"\ufdd0:employee":"John", "\ufdd0:boss":"Mary"})]));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-1", "John"), cljs.core.hash_map("\ufdd0:line", 177, "\ufdd0:column", 10)), cljs.core.set([cljs.core.hash_map("\ufdd0:employee", 
      "John", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", "John", "\ufdd0:boss", "Mary")])), cljs.core.hash_map("\ufdd0:line", 177, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-1", "John"), cljs.core.hash_map("\ufdd0:line", 177, "\ufdd0:column", 
      10)), cljs.core.set([cljs.core.hash_map("\ufdd0:employee", "John", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", "John", "\ufdd0:boss", "Mary")])), cljs.core.hash_map("\ufdd0:line", 177, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5379) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5379)) {
      var t__4829__auto__ = e5379;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-1", "John"), cljs.core.hash_map("\ufdd0:line", 177, "\ufdd0:column", 10)), cljs.core.set([cljs.core.hash_map("\ufdd0:employee", "John", "\ufdd0:boss", 
      "Bob"), cljs.core.hash_map("\ufdd0:employee", "John", "\ufdd0:boss", "Mary")])), cljs.core.hash_map("\ufdd0:line", 177, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5379;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-softstrat", bacwn.test.impl.test_softstrat.test_ws_1);
bacwn.test.impl.test_softstrat.ws_2 = fogus.datalog.bacwn.impl.softstrat.build_soft_strat_work_plan.call(null, bacwn.test.impl.test_softstrat.rules, cljs.core.with_meta.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:employee-job", cljs.core.ObjMap.fromObject(["\ufdd0:job", "\ufdd0:employee"], {"\ufdd0:job":"\ufdd1'?x", "\ufdd0:employee":"\ufdd1'??name"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.ObjMap.fromObject(["\ufdd0:type"], {"\ufdd0:type":"\ufdd0:fogus.datalog.bacwn.impl.rules/datalog-query"})));
bacwn.test.impl.test_softstrat.evaluate_2 = function evaluate_2(name) {
  return cljs.core.set.call(null, fogus.datalog.bacwn.impl.softstrat.evaluate_soft_work_set.call(null, bacwn.test.impl.test_softstrat.ws_2, bacwn.test.impl.test_softstrat.db, cljs.core.PersistentArrayMap.fromArrays(["\ufdd1'??name"], [name])))
};
bacwn.test.impl.test_softstrat.test_ws_2 = function test_ws_2() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_softstrat.test_ws_2)
};
bacwn.test.impl.test_softstrat.test_ws_2 = cljs.core.vary_meta.call(null, bacwn.test.impl.test_softstrat.test_ws_2, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-ws-2", "\ufdd0:test", function test_ws_2_test() {
  try {
    var values__4792__auto___5392 = cljs.core.list.call(null, bacwn.test.impl.test_softstrat.evaluate_2.call(null, "Albert"), cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:job"], {"\ufdd0:employee":"Albert", "\ufdd0:job":"\ufdd0:pc-support"}), cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:job"], {"\ufdd0:employee":"Albert", "\ufdd0:job":"\ufdd0:server-support"})]));
    var result__4793__auto___5393 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5392);
    if(cljs.core.truth_(result__4793__auto___5393)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5392), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-2", "Albert"), cljs.core.hash_map("\ufdd0:line", 186, "\ufdd0:column", 10)), cljs.core.set([cljs.core.hash_map("\ufdd0:employee", 
      "Albert", "\ufdd0:job", "\ufdd0:pc-support"), cljs.core.hash_map("\ufdd0:employee", "Albert", "\ufdd0:job", "\ufdd0:server-support")])), cljs.core.hash_map("\ufdd0:line", 186, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5392)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-2", "Albert"), cljs.core.hash_map("\ufdd0:line", 186, "\ufdd0:column", 
      10)), cljs.core.set([cljs.core.hash_map("\ufdd0:employee", "Albert", "\ufdd0:job", "\ufdd0:pc-support"), cljs.core.hash_map("\ufdd0:employee", "Albert", "\ufdd0:job", "\ufdd0:server-support")])), cljs.core.hash_map("\ufdd0:line", 186, "\ufdd0:column", 7))}))
    }
  }catch(e5389) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5389)) {
      var t__4829__auto___5394 = e5389;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5394, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-2", "Albert"), cljs.core.hash_map("\ufdd0:line", 186, "\ufdd0:column", 10)), cljs.core.set([cljs.core.hash_map("\ufdd0:employee", "Albert", "\ufdd0:job", 
      "\ufdd0:pc-support"), cljs.core.hash_map("\ufdd0:employee", "Albert", "\ufdd0:job", "\ufdd0:server-support")])), cljs.core.hash_map("\ufdd0:line", 186, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5389;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5395 = cljs.core.list.call(null, bacwn.test.impl.test_softstrat.evaluate_2.call(null, "Sameer"), cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:job"], {"\ufdd0:employee":"Sameer", "\ufdd0:job":"\ufdd0:programming"})]));
    var result__4793__auto___5396 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5395);
    if(cljs.core.truth_(result__4793__auto___5396)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5395), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-2", "Sameer"), cljs.core.hash_map("\ufdd0:line", 189, "\ufdd0:column", 10)), cljs.core.set([cljs.core.hash_map("\ufdd0:employee", 
      "Sameer", "\ufdd0:job", "\ufdd0:programming")])), cljs.core.hash_map("\ufdd0:line", 189, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5395)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-2", "Sameer"), cljs.core.hash_map("\ufdd0:line", 189, "\ufdd0:column", 
      10)), cljs.core.set([cljs.core.hash_map("\ufdd0:employee", "Sameer", "\ufdd0:job", "\ufdd0:programming")])), cljs.core.hash_map("\ufdd0:line", 189, "\ufdd0:column", 7))}))
    }
  }catch(e5390) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5390)) {
      var t__4829__auto___5397 = e5390;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5397, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-2", "Sameer"), cljs.core.hash_map("\ufdd0:line", 189, "\ufdd0:column", 10)), cljs.core.set([cljs.core.hash_map("\ufdd0:employee", "Sameer", "\ufdd0:job", 
      "\ufdd0:programming")])), cljs.core.hash_map("\ufdd0:line", 189, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5390;
      }else {
      }
    }
  }
  try {
    var values__4792__auto__ = cljs.core.list.call(null, bacwn.test.impl.test_softstrat.evaluate_2.call(null, "Bob"), cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:job"], {"\ufdd0:employee":"Bob", "\ufdd0:job":"\ufdd0:accounting"}), cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:job"], {"\ufdd0:employee":"Bob", "\ufdd0:job":"\ufdd0:management"}), cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:job"], {"\ufdd0:employee":"Bob", "\ufdd0:job":"\ufdd0:payroll"}), 
    cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:job"], {"\ufdd0:employee":"Bob", "\ufdd0:job":"\ufdd0:pc-support"}), cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:job"], {"\ufdd0:employee":"Bob", "\ufdd0:job":"\ufdd0:project-management"}), cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:job"], {"\ufdd0:employee":"Bob", "\ufdd0:job":"\ufdd0:programming"}), cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:job"], {"\ufdd0:employee":"Bob", "\ufdd0:job":"\ufdd0:server-support"}), 
    cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:job"], {"\ufdd0:employee":"Bob", "\ufdd0:job":"\ufdd0:sales"})]));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-2", "Bob"), cljs.core.hash_map("\ufdd0:line", 191, "\ufdd0:column", 10)), cljs.core.set([cljs.core.hash_map("\ufdd0:employee", 
      "Bob", "\ufdd0:job", "\ufdd0:accounting"), cljs.core.hash_map("\ufdd0:employee", "Bob", "\ufdd0:job", "\ufdd0:management"), cljs.core.hash_map("\ufdd0:employee", "Bob", "\ufdd0:job", "\ufdd0:payroll"), cljs.core.hash_map("\ufdd0:employee", "Bob", "\ufdd0:job", "\ufdd0:pc-support"), cljs.core.hash_map("\ufdd0:employee", "Bob", "\ufdd0:job", "\ufdd0:project-management"), cljs.core.hash_map("\ufdd0:employee", "Bob", "\ufdd0:job", "\ufdd0:programming"), cljs.core.hash_map("\ufdd0:employee", "Bob", 
      "\ufdd0:job", "\ufdd0:server-support"), cljs.core.hash_map("\ufdd0:employee", "Bob", "\ufdd0:job", "\ufdd0:sales")])), cljs.core.hash_map("\ufdd0:line", 191, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-2", "Bob"), cljs.core.hash_map("\ufdd0:line", 191, "\ufdd0:column", 
      10)), cljs.core.set([cljs.core.hash_map("\ufdd0:employee", "Bob", "\ufdd0:job", "\ufdd0:accounting"), cljs.core.hash_map("\ufdd0:employee", "Bob", "\ufdd0:job", "\ufdd0:management"), cljs.core.hash_map("\ufdd0:employee", "Bob", "\ufdd0:job", "\ufdd0:payroll"), cljs.core.hash_map("\ufdd0:employee", "Bob", "\ufdd0:job", "\ufdd0:pc-support"), cljs.core.hash_map("\ufdd0:employee", "Bob", "\ufdd0:job", "\ufdd0:project-management"), cljs.core.hash_map("\ufdd0:employee", "Bob", "\ufdd0:job", "\ufdd0:programming"), 
      cljs.core.hash_map("\ufdd0:employee", "Bob", "\ufdd0:job", "\ufdd0:server-support"), cljs.core.hash_map("\ufdd0:employee", "Bob", "\ufdd0:job", "\ufdd0:sales")])), cljs.core.hash_map("\ufdd0:line", 191, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5391) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5391)) {
      var t__4829__auto__ = e5391;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-2", "Bob"), cljs.core.hash_map("\ufdd0:line", 191, "\ufdd0:column", 10)), cljs.core.set([cljs.core.hash_map("\ufdd0:employee", "Bob", "\ufdd0:job", 
      "\ufdd0:accounting"), cljs.core.hash_map("\ufdd0:employee", "Bob", "\ufdd0:job", "\ufdd0:management"), cljs.core.hash_map("\ufdd0:employee", "Bob", "\ufdd0:job", "\ufdd0:payroll"), cljs.core.hash_map("\ufdd0:employee", "Bob", "\ufdd0:job", "\ufdd0:pc-support"), cljs.core.hash_map("\ufdd0:employee", "Bob", "\ufdd0:job", "\ufdd0:project-management"), cljs.core.hash_map("\ufdd0:employee", "Bob", "\ufdd0:job", "\ufdd0:programming"), cljs.core.hash_map("\ufdd0:employee", "Bob", "\ufdd0:job", "\ufdd0:server-support"), 
      cljs.core.hash_map("\ufdd0:employee", "Bob", "\ufdd0:job", "\ufdd0:sales")])), cljs.core.hash_map("\ufdd0:line", 191, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5391;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-softstrat", bacwn.test.impl.test_softstrat.test_ws_2);
bacwn.test.impl.test_softstrat.ws_3 = fogus.datalog.bacwn.impl.softstrat.build_soft_strat_work_plan.call(null, bacwn.test.impl.test_softstrat.rules, cljs.core.with_meta.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:bj", cljs.core.ObjMap.fromObject(["\ufdd0:boss", "\ufdd0:name"], {"\ufdd0:boss":"\ufdd1'?x", "\ufdd0:name":"\ufdd1'??name"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.ObjMap.fromObject(["\ufdd0:type"], {"\ufdd0:type":"\ufdd0:fogus.datalog.bacwn.impl.rules/datalog-query"})));
bacwn.test.impl.test_softstrat.evaluate_3 = function evaluate_3(name) {
  return cljs.core.set.call(null, fogus.datalog.bacwn.impl.softstrat.evaluate_soft_work_set.call(null, bacwn.test.impl.test_softstrat.ws_3, bacwn.test.impl.test_softstrat.db, cljs.core.PersistentArrayMap.fromArrays(["\ufdd1'??name"], [name])))
};
bacwn.test.impl.test_softstrat.test_ws_3 = function test_ws_3() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_softstrat.test_ws_3)
};
bacwn.test.impl.test_softstrat.test_ws_3 = cljs.core.vary_meta.call(null, bacwn.test.impl.test_softstrat.test_ws_3, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-ws-3", "\ufdd0:test", function test_ws_3_test() {
  try {
    var values__4792__auto__ = cljs.core.list.call(null, bacwn.test.impl.test_softstrat.evaluate_3.call(null, "Albert"), cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:name", "\ufdd0:boss"], {"\ufdd0:name":"Albert", "\ufdd0:boss":"Sameer"})]));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-3", "Albert"), cljs.core.hash_map("\ufdd0:line", 205, "\ufdd0:column", 10)), cljs.core.set([cljs.core.hash_map("\ufdd0:name", 
      "Albert", "\ufdd0:boss", "Sameer")])), cljs.core.hash_map("\ufdd0:line", 205, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-3", "Albert"), cljs.core.hash_map("\ufdd0:line", 205, "\ufdd0:column", 
      10)), cljs.core.set([cljs.core.hash_map("\ufdd0:name", "Albert", "\ufdd0:boss", "Sameer")])), cljs.core.hash_map("\ufdd0:line", 205, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5399) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5399)) {
      var t__4829__auto__ = e5399;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-3", "Albert"), cljs.core.hash_map("\ufdd0:line", 205, "\ufdd0:column", 10)), cljs.core.set([cljs.core.hash_map("\ufdd0:name", "Albert", "\ufdd0:boss", 
      "Sameer")])), cljs.core.hash_map("\ufdd0:line", 205, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5399;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-softstrat", bacwn.test.impl.test_softstrat.test_ws_3);
bacwn.test.impl.test_softstrat.ws_4 = fogus.datalog.bacwn.impl.softstrat.build_soft_strat_work_plan.call(null, bacwn.test.impl.test_softstrat.rules, cljs.core.with_meta.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:works-for", cljs.core.ObjMap.fromObject(["\ufdd0:boss", "\ufdd0:name"], {"\ufdd0:boss":"\ufdd1'?x", "\ufdd0:name":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.ObjMap.fromObject(["\ufdd0:type"], {"\ufdd0:type":"\ufdd0:fogus.datalog.bacwn.impl.rules/datalog-query"})));
bacwn.test.impl.test_softstrat.test_ws_4 = function test_ws_4() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_softstrat.test_ws_4)
};
bacwn.test.impl.test_softstrat.test_ws_4 = cljs.core.vary_meta.call(null, bacwn.test.impl.test_softstrat.test_ws_4, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-ws-4", "\ufdd0:test", function test_ws_4_test() {
  try {
    var values__4792__auto__ = cljs.core.list.call(null, cljs.core.set.call(null, fogus.datalog.bacwn.impl.softstrat.evaluate_soft_work_set.call(null, bacwn.test.impl.test_softstrat.ws_4, bacwn.test.impl.test_softstrat.db, cljs.core.ObjMap.EMPTY)), cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:boss"], {"\ufdd0:employee":"Miki", "\ufdd0:boss":"Bob"}), cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:boss"], {"\ufdd0:employee":"Albert", "\ufdd0:boss":"Li"}), 
    cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:boss"], {"\ufdd0:employee":"Lilian", "\ufdd0:boss":"Sameer"}), cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:boss"], {"\ufdd0:employee":"Li", "\ufdd0:boss":"Bob"}), cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:boss"], {"\ufdd0:employee":"Lilian", "\ufdd0:boss":"Bob"}), cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:boss"], {"\ufdd0:employee":"Brenda", "\ufdd0:boss":"Fred"}), cljs.core.ObjMap.fromObject(["\ufdd0:employee", 
    "\ufdd0:boss"], {"\ufdd0:employee":"Fred", "\ufdd0:boss":"Bob"}), cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:boss"], {"\ufdd0:employee":"John", "\ufdd0:boss":"Bob"}), cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:boss"], {"\ufdd0:employee":"John", "\ufdd0:boss":"Mary"}), cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:boss"], {"\ufdd0:employee":"Albert", "\ufdd0:boss":"Sameer"}), cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:boss"], {"\ufdd0:employee":"Sameer", 
    "\ufdd0:boss":"Bob"}), cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:boss"], {"\ufdd0:employee":"Albert", "\ufdd0:boss":"Bob"}), cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:boss"], {"\ufdd0:employee":"Brenda", "\ufdd0:boss":"Bob"}), cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:boss"], {"\ufdd0:employee":"Mary", "\ufdd0:boss":"Bob"}), cljs.core.ObjMap.fromObject(["\ufdd0:employee", "\ufdd0:boss"], {"\ufdd0:employee":"Li", "\ufdd0:boss":"Sameer"})]));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'set", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-soft-work-set", "\ufdd1'ws-4", "\ufdd1'db", cljs.core.hash_map()), 
      cljs.core.hash_map("\ufdd0:line", 211, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 211, "\ufdd0:column", 10)), cljs.core.set([cljs.core.hash_map("\ufdd0:employee", "Miki", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", "Albert", "\ufdd0:boss", "Li"), cljs.core.hash_map("\ufdd0:employee", "Lilian", "\ufdd0:boss", "Sameer"), cljs.core.hash_map("\ufdd0:employee", "Li", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", "Lilian", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", 
      "Brenda", "\ufdd0:boss", "Fred"), cljs.core.hash_map("\ufdd0:employee", "Fred", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", "John", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", "John", "\ufdd0:boss", "Mary"), cljs.core.hash_map("\ufdd0:employee", "Albert", "\ufdd0:boss", "Sameer"), cljs.core.hash_map("\ufdd0:employee", "Sameer", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", "Albert", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", 
      "Brenda", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", "Mary", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", "Li", "\ufdd0:boss", "Sameer")])), cljs.core.hash_map("\ufdd0:line", 211, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'set", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-soft-work-set", "\ufdd1'ws-4", 
      "\ufdd1'db", cljs.core.hash_map()), cljs.core.hash_map("\ufdd0:line", 211, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 211, "\ufdd0:column", 10)), cljs.core.set([cljs.core.hash_map("\ufdd0:employee", "Miki", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", "Albert", "\ufdd0:boss", "Li"), cljs.core.hash_map("\ufdd0:employee", "Lilian", "\ufdd0:boss", "Sameer"), cljs.core.hash_map("\ufdd0:employee", "Li", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", "Lilian", 
      "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", "Brenda", "\ufdd0:boss", "Fred"), cljs.core.hash_map("\ufdd0:employee", "Fred", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", "John", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", "John", "\ufdd0:boss", "Mary"), cljs.core.hash_map("\ufdd0:employee", "Albert", "\ufdd0:boss", "Sameer"), cljs.core.hash_map("\ufdd0:employee", "Sameer", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", "Albert", 
      "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", "Brenda", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", "Mary", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", "Li", "\ufdd0:boss", "Sameer")])), cljs.core.hash_map("\ufdd0:line", 211, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5401) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5401)) {
      var t__4829__auto__ = e5401;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'set", cljs.core.with_meta(cljs.core.list("\ufdd1'evaluate-soft-work-set", "\ufdd1'ws-4", "\ufdd1'db", cljs.core.hash_map()), cljs.core.hash_map("\ufdd0:line", 
      211, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 211, "\ufdd0:column", 10)), cljs.core.set([cljs.core.hash_map("\ufdd0:employee", "Miki", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", "Albert", "\ufdd0:boss", "Li"), cljs.core.hash_map("\ufdd0:employee", "Lilian", "\ufdd0:boss", "Sameer"), cljs.core.hash_map("\ufdd0:employee", "Li", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", "Lilian", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", 
      "Brenda", "\ufdd0:boss", "Fred"), cljs.core.hash_map("\ufdd0:employee", "Fred", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", "John", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", "John", "\ufdd0:boss", "Mary"), cljs.core.hash_map("\ufdd0:employee", "Albert", "\ufdd0:boss", "Sameer"), cljs.core.hash_map("\ufdd0:employee", "Sameer", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", "Albert", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", 
      "Brenda", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", "Mary", "\ufdd0:boss", "Bob"), cljs.core.hash_map("\ufdd0:employee", "Li", "\ufdd0:boss", "Sameer")])), cljs.core.hash_map("\ufdd0:line", 211, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5401;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-softstrat", bacwn.test.impl.test_softstrat.test_ws_4);
goog.provide("mst3k");
goog.require("cljs.core");
goog.require("fogus.datalog.bacwn.impl.rules");
goog.require("fogus.datalog.bacwn.impl.rules");
goog.require("fogus.datalog.bacwn");
mst3k.mst3k_schema = fogus.datalog.bacwn.impl.database.add_index.call(null, fogus.datalog.bacwn.impl.database.add_relation.call(null, fogus.datalog.bacwn.impl.database.add_index.call(null, fogus.datalog.bacwn.impl.database.add_relation.call(null, fogus.datalog.bacwn.impl.database.empty_database, "\ufdd0:character", cljs.core.PersistentVector.fromArray(["\ufdd0:db.id", "\ufdd0:name", "\ufdd0:human?"], true)), "\ufdd0:character", "\ufdd0:name"), "\ufdd0:location", cljs.core.PersistentVector.fromArray(["\ufdd0:db.id", 
"\ufdd0:character", "\ufdd0:name"], true)), "\ufdd0:location", "\ufdd0:name");
mst3k.mst3k_db = fogus.datalog.bacwn.impl.database.add_tuples.call(null, mst3k.mst3k_schema, cljs.core.PersistentVector.fromArray(["\ufdd0:character", "\ufdd0:db.id", 0, "\ufdd0:human?", true, "\ufdd0:name", "Joel"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:character", "\ufdd0:db.id", 1, "\ufdd0:human?", false, "\ufdd0:name", "Crow"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:character", "\ufdd0:db.id", 2, "\ufdd0:human?", true, "\ufdd0:name", "TV's Frank"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:location", 
"\ufdd0:db.id", 0, "\ufdd0:name", "SoL", "\ufdd0:character", 0], true), cljs.core.PersistentVector.fromArray(["\ufdd0:location", "\ufdd0:db.id", 0, "\ufdd0:name", "SoL", "\ufdd0:character", 1], true), cljs.core.PersistentVector.fromArray(["\ufdd0:location", "\ufdd0:db.id", 1, "\ufdd0:name", "Gizmonics", "\ufdd0:character", 2], true));
mst3k.locate_rule = fogus.datalog.bacwn.impl.rules.rules_set.call(null, fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:stationed-at", cljs.core.ObjMap.fromObject(["\ufdd0:character/name", "\ufdd0:location/name"], {"\ufdd0:character/name":"\ufdd1'?char-name", "\ufdd0:location/name":"\ufdd1'?loc-name"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, 
"\ufdd0:location", cljs.core.ObjMap.fromObject(["\ufdd0:character", "\ufdd0:name"], {"\ufdd0:character":"\ufdd1'?char", "\ufdd0:name":"\ufdd1'?loc-name"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:character", cljs.core.ObjMap.fromObject(["\ufdd0:name", "\ufdd0:db.id"], {"\ufdd0:name":"\ufdd1'?char-name", "\ufdd0:db.id":"\ufdd1'?char"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true))));
fogus.datalog.bacwn.run_work_plan.call(null, fogus.datalog.bacwn.build_work_plan.call(null, mst3k.locate_rule, cljs.core.with_meta.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:stationed-at", cljs.core.ObjMap.fromObject(["\ufdd0:character/name", "\ufdd0:location/name"], {"\ufdd0:character/name":"\ufdd1'?char-name", "\ufdd0:location/name":"\ufdd1'??loc"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.ObjMap.fromObject(["\ufdd0:type"], {"\ufdd0:type":"\ufdd0:fogus.datalog.bacwn.impl.rules/datalog-query"}))), 
mst3k.mst3k_db, cljs.core.PersistentArrayMap.fromArrays(["\ufdd1'??loc"], ["SoL"]));
mst3k.non_human_locate_rule = fogus.datalog.bacwn.impl.rules.rules_set.call(null, fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:stationed-at", cljs.core.ObjMap.fromObject(["\ufdd0:character/name", "\ufdd0:location/name"], {"\ufdd0:character/name":"\ufdd1'?char-name", "\ufdd0:location/name":"\ufdd1'?loc-name"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), 
cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:location", cljs.core.ObjMap.fromObject(["\ufdd0:character", "\ufdd0:name"], {"\ufdd0:character":"\ufdd1'?char", "\ufdd0:name":"\ufdd1'?loc-name"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:character", cljs.core.ObjMap.fromObject(["\ufdd0:name", "\ufdd0:character/db.id"], {"\ufdd0:name":"\ufdd1'?char-name", 
"\ufdd0:character/db.id":"\ufdd1'?char"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:character", cljs.core.ObjMap.fromObject(["\ufdd0:human?", "\ufdd0:character/db.id"], {"\ufdd0:human?":true, "\ufdd0:character/db.id":"\ufdd1'?char"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/negated")], true))));
fogus.datalog.bacwn.run_work_plan.call(null, fogus.datalog.bacwn.build_work_plan.call(null, mst3k.non_human_locate_rule, cljs.core.with_meta.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:stationed-at", cljs.core.ObjMap.fromObject(["\ufdd0:character/name", "\ufdd0:location/name"], {"\ufdd0:character/name":"\ufdd1'?char-name", "\ufdd0:location/name":"\ufdd1'??loc"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.ObjMap.fromObject(["\ufdd0:type"], 
{"\ufdd0:type":"\ufdd0:fogus.datalog.bacwn.impl.rules/datalog-query"}))), mst3k.mst3k_db, cljs.core.PersistentArrayMap.fromArrays(["\ufdd1'??loc"], ["SoL"]));
fogus.datalog.bacwn.q.call(null, cljs.core.with_meta.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:stationed-at", cljs.core.ObjMap.fromObject(["\ufdd0:character/name", "\ufdd0:location/name"], {"\ufdd0:character/name":"\ufdd1'?char-name", "\ufdd0:location/name":"\ufdd1'??loc"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.ObjMap.fromObject(["\ufdd0:type"], {"\ufdd0:type":"\ufdd0:fogus.datalog.bacwn.impl.rules/datalog-query"})), mst3k.mst3k_db, 
mst3k.non_human_locate_rule, cljs.core.PersistentArrayMap.fromArrays(["\ufdd1'??loc"], ["SoL"]));
goog.provide("bacwn.test.impl.test_magic");
goog.require("cljs.core");
goog.require("fogus.datalog.bacwn.impl.rules");
goog.require("fogus.datalog.bacwn.impl.magic");
goog.require("fogus.datalog.bacwn.impl.rules");
goog.require("fogus.datalog.bacwn.impl.magic");
goog.require("cemerick.cljs.test");
bacwn.test.impl.test_magic.rs = fogus.datalog.bacwn.impl.rules.rules_set.call(null, fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:p", cljs.core.ObjMap.fromObject(["\ufdd0:y", "\ufdd0:x"], {"\ufdd0:y":"\ufdd1'?y", "\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, 
"\ufdd0:e", cljs.core.ObjMap.fromObject(["\ufdd0:y", "\ufdd0:x"], {"\ufdd0:y":"\ufdd1'?y", "\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:p", cljs.core.ObjMap.fromObject(["\ufdd0:y", "\ufdd0:x"], {"\ufdd0:y":"\ufdd1'?y", "\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), 
cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:e", cljs.core.ObjMap.fromObject(["\ufdd0:y", "\ufdd0:x"], {"\ufdd0:y":"\ufdd1'?z", "\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:p", cljs.core.ObjMap.fromObject(["\ufdd0:y", "\ufdd0:x"], {"\ufdd0:y":"\ufdd1'?y", "\ufdd0:x":"\ufdd1'?z"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], 
true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:e", cljs.core.ObjMap.fromObject(["\ufdd0:y", "\ufdd0:x"], {"\ufdd0:y":"\ufdd1'?y", "\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:b", cljs.core.ObjMap.fromObject(["\ufdd0:y", 
"\ufdd0:x"], {"\ufdd0:y":"\ufdd1'?y", "\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:e", cljs.core.ObjMap.fromObject(["\ufdd0:y", "\ufdd0:x"], {"\ufdd0:y":"\ufdd1'?y", "\ufdd0:x":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, 
"\ufdd0:c", cljs.core.ObjMap.fromObject(["\ufdd0:y", "\ufdd0:x"], {"\ufdd0:y":"\ufdd1'?y", "\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true))));
bacwn.test.impl.test_magic.q = fogus.datalog.bacwn.impl.magic.adorn_query.call(null, cljs.core.with_meta.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:p", cljs.core.ObjMap.fromObject(["\ufdd0:y", "\ufdd0:x"], {"\ufdd0:y":"\ufdd1'?y", "\ufdd0:x":1}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.ObjMap.fromObject(["\ufdd0:type"], {"\ufdd0:type":"\ufdd0:fogus.datalog.bacwn.impl.rules/datalog-query"})));
bacwn.test.impl.test_magic.ars = fogus.datalog.bacwn.impl.magic.adorn_rules_set.call(null, bacwn.test.impl.test_magic.rs, bacwn.test.impl.test_magic.q);
bacwn.test.impl.test_magic.test_adorn_rules_set = function test_adorn_rules_set() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_magic.test_adorn_rules_set)
};
bacwn.test.impl.test_magic.test_adorn_rules_set = cljs.core.vary_meta.call(null, bacwn.test.impl.test_magic.test_adorn_rules_set, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-adorn-rules-set", "\ufdd0:test", function test_adorn_rules_set_test() {
  try {
    var values__4792__auto__ = cljs.core.list.call(null, bacwn.test.impl.test_magic.ars, fogus.datalog.bacwn.impl.rules.rules_set.call(null, fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:p", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x", 
    "\ufdd0:y"], {"\ufdd0:x":"\ufdd1'?x", "\ufdd0:y":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:e", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y"], {"\ufdd0:x":"\ufdd1'?x", "\ufdd0:y":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], 
    true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:p", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y"], {"\ufdd0:x":"\ufdd1'?x", "\ufdd0:y":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), 
    cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:e", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y"], {"\ufdd0:x":"\ufdd1'?x", "\ufdd0:y":"\ufdd1'?z"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", 
    "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:p", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y"], {"\ufdd0:x":"\ufdd1'?z", "\ufdd0:y":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", 
    "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:e", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y"], {"\ufdd0:x":"\ufdd1'?y", "\ufdd0:y":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:c", cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y"], {"\ufdd0:x":"\ufdd1'?x", "\ufdd0:y":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], 
    true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:e", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y"], {"\ufdd0:x":"\ufdd1'?x", "\ufdd0:y":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), 
    cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:b", cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y"], {"\ufdd0:x":"\ufdd1'?x", "\ufdd0:y":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true)))));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", "\ufdd1'ars", cljs.core.with_meta(cljs.core.list("\ufdd1'rules-set", cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", 
      "\ufdd0:p", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 53))), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 11)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", 
      cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?z", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 53)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", 
      "\ufdd0:p", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 38, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 11)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 39, 
      "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list("\ufdd0:c", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 53))), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 11)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 
      40, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list("\ufdd0:b", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 40, "\ufdd0:column", 53))), cljs.core.hash_map("\ufdd0:line", 40, "\ufdd0:column", 11))), cljs.core.hash_map("\ufdd0:line", 35, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", "\ufdd1'ars", cljs.core.with_meta(cljs.core.list("\ufdd1'rules-set", cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", 
      "\ufdd0:p", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 53))), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 11)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", 
      cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?z", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 53)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", 
      "\ufdd0:p", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 38, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 11)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 39, 
      "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list("\ufdd0:c", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 53))), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 11)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 
      40, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list("\ufdd0:b", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 40, "\ufdd0:column", 53))), cljs.core.hash_map("\ufdd0:line", 40, "\ufdd0:column", 11))), cljs.core.hash_map("\ufdd0:line", 35, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5340) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5340)) {
      var t__4829__auto__ = e5340;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", "\ufdd1'ars", cljs.core.with_meta(cljs.core.list("\ufdd1'rules-set", cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", 
      "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 53))), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 11)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", 
      cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?z", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 53)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", 
      "\ufdd0:p", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 38, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 11)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 39, 
      "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list("\ufdd0:c", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 53))), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 11)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 
      40, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list("\ufdd0:b", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 40, "\ufdd0:column", 53))), cljs.core.hash_map("\ufdd0:line", 40, "\ufdd0:column", 11))), cljs.core.hash_map("\ufdd0:line", 35, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5340;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-magic", bacwn.test.impl.test_magic.test_adorn_rules_set);
bacwn.test.impl.test_magic.m = fogus.datalog.bacwn.impl.magic.magic_transform.call(null, bacwn.test.impl.test_magic.ars);
bacwn.test.impl.test_magic.test_magic_transform = function test_magic_transform() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_magic.test_magic_transform)
};
bacwn.test.impl.test_magic.test_magic_transform = cljs.core.vary_meta.call(null, bacwn.test.impl.test_magic.test_magic_transform, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-magic-transform", "\ufdd0:test", function test_magic_transform_test() {
  try {
    var values__4792__auto__ = cljs.core.list.call(null, bacwn.test.impl.test_magic.m, fogus.datalog.bacwn.impl.rules.rules_set.call(null, fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:e", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x", 
    "\ufdd0:y"], {"\ufdd0:x":"\ufdd1'?y", "\ufdd0:y":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:magic", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:e", "\ufdd0:magic":true, "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), 
    fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:c", cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y"], {"\ufdd0:x":"\ufdd1'?x", "\ufdd0:y":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:e", 
    "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y"], {"\ufdd0:x":"\ufdd1'?x", "\ufdd0:y":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:magic", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:e", "\ufdd0:magic":true, "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), 
    cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:b", cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y"], {"\ufdd0:x":"\ufdd1'?x", "\ufdd0:y":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, 
    cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:magic", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:p", "\ufdd0:magic":true, "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?z"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:magic", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:p", 
    "\ufdd0:magic":true, "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:e", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y"], {"\ufdd0:x":"\ufdd1'?x", 
    "\ufdd0:y":"\ufdd1'?z"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:p", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y"], {"\ufdd0:x":"\ufdd1'?x", 
    "\ufdd0:y":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:magic", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:p", "\ufdd0:magic":true, "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), 
    fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:e", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y"], {"\ufdd0:x":"\ufdd1'?x", "\ufdd0:y":"\ufdd1'?z"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], 
    {"\ufdd0:pred":"\ufdd0:p", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y"], {"\ufdd0:x":"\ufdd1'?z", "\ufdd0:y":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:magic", 
    "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:e", "\ufdd0:magic":true, "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:magic", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:p", "\ufdd0:magic":true, "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), 
    cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true))), fogus.datalog.bacwn.impl.rules.is_safe_QMARK_.call(null, fogus.datalog.bacwn.impl.rules.build_rule.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:p", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x", 
    "\ufdd0:y"], {"\ufdd0:x":"\ufdd1'?x", "\ufdd0:y":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentVector.fromArray([fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:magic", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:p", "\ufdd0:magic":true, "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), 
    fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:e", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}), cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y"], {"\ufdd0:x":"\ufdd1'?x", "\ufdd0:y":"\ufdd1'?y"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal")], true)))));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", "\ufdd1'm", cljs.core.with_meta(cljs.core.list("\ufdd1'rules-set", cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", 
      "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 53)), cljs.core.with_meta(cljs.core.list("\ufdd0:c", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), 
      cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 97))), cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 11)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 50, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:magic", 
      true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 50, "\ufdd0:column", 53)), cljs.core.with_meta(cljs.core.list("\ufdd0:b", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 50, "\ufdd0:column", 97))), cljs.core.hash_map("\ufdd0:line", 50, "\ufdd0:column", 11)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:magic", 
      true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 59)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), 
      "\ufdd0:y", "\ufdd1'?z", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 53, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 11)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 55, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", 
      "\ufdd0:p", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 55, "\ufdd0:column", 53)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?z", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 56, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:bound", 
      cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 57, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 55, "\ufdd0:column", 11)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 59, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", 
      "\ufdd0:p", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 59, "\ufdd0:column", 59))), cljs.core.hash_map("\ufdd0:line", 59, "\ufdd0:column", 11)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 61, "\ufdd0:column", 
      15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 61, "\ufdd0:column", 53)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 62, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 
      61, "\ufdd0:column", 11))), cljs.core.hash_map("\ufdd0:line", 47, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", "\ufdd1'm", cljs.core.with_meta(cljs.core.list("\ufdd1'rules-set", cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", 
      "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 53)), cljs.core.with_meta(cljs.core.list("\ufdd0:c", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), 
      cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 97))), cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 11)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 50, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:magic", 
      true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 50, "\ufdd0:column", 53)), cljs.core.with_meta(cljs.core.list("\ufdd0:b", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 50, "\ufdd0:column", 97))), cljs.core.hash_map("\ufdd0:line", 50, "\ufdd0:column", 11)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:magic", 
      true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 59)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), 
      "\ufdd0:y", "\ufdd1'?z", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 53, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 11)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 55, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", 
      "\ufdd0:p", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 55, "\ufdd0:column", 53)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?z", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 56, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:bound", 
      cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 57, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 55, "\ufdd0:column", 11)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 59, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", 
      "\ufdd0:p", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 59, "\ufdd0:column", 59))), cljs.core.hash_map("\ufdd0:line", 59, "\ufdd0:column", 11)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 61, "\ufdd0:column", 
      15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 61, "\ufdd0:column", 53)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 62, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 
      61, "\ufdd0:column", 11))), cljs.core.hash_map("\ufdd0:line", 47, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5342) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5342)) {
      var t__4829__auto__ = e5342;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", "\ufdd1'm", cljs.core.with_meta(cljs.core.list("\ufdd1'rules-set", cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:bound", 
      cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 53)), cljs.core.with_meta(cljs.core.list("\ufdd0:c", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 
      48, "\ufdd0:column", 97))), cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 11)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 50, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:magic", true, "\ufdd0:bound", 
      cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 50, "\ufdd0:column", 53)), cljs.core.with_meta(cljs.core.list("\ufdd0:b", "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 50, "\ufdd0:column", 97))), cljs.core.hash_map("\ufdd0:line", 50, "\ufdd0:column", 11)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:magic", true, "\ufdd0:bound", 
      cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 59)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?z", 
      "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 53, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 11)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 55, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", 
      "\ufdd0:p", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 55, "\ufdd0:column", 53)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?z", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 56, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:bound", 
      cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?z"), cljs.core.hash_map("\ufdd0:line", 57, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 55, "\ufdd0:column", 11)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 59, "\ufdd0:column", 15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", 
      "\ufdd0:p", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 59, "\ufdd0:column", 59))), cljs.core.hash_map("\ufdd0:line", 59, "\ufdd0:column", 11)), cljs.core.with_meta(cljs.core.list("\ufdd1'<-", cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 61, "\ufdd0:column", 
      15)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:p", "\ufdd0:magic", true, "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 61, "\ufdd0:column", 53)), cljs.core.with_meta(cljs.core.list(cljs.core.hash_map("\ufdd0:pred", "\ufdd0:e", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"])), "\ufdd0:y", "\ufdd1'?y", "\ufdd0:x", "\ufdd1'?x"), cljs.core.hash_map("\ufdd0:line", 62, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 
      61, "\ufdd0:column", 11))), cljs.core.hash_map("\ufdd0:line", 47, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5342;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-magic", bacwn.test.impl.test_magic.test_magic_transform);
goog.provide("bacwn.test.impl.test_util");
goog.require("cljs.core");
goog.require("fogus.datalog.bacwn.impl.util");
goog.require("fogus.datalog.bacwn.impl.util");
bacwn.test.impl.test_util.test_is_var_QMARK_ = function test_is_var_QMARK_() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_util.test_is_var_QMARK_)
};
bacwn.test.impl.test_util.test_is_var_QMARK_ = cljs.core.vary_meta.call(null, bacwn.test.impl.test_util.test_is_var_QMARK_, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-is-var?", "\ufdd0:test", function test_is_var_QMARK__test() {
  try {
    var values__4792__auto___5141 = cljs.core.list.call(null, "\ufdd1'?x");
    var result__4793__auto___5142 = cljs.core.apply.call(null, fogus.datalog.bacwn.impl.util.is_var_QMARK_, values__4792__auto___5141);
    if(cljs.core.truth_(result__4793__auto___5142)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, fogus.datalog.bacwn.impl.util.is_var_QMARK_, values__4792__auto___5141), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'is-var?", cljs.core.list("\ufdd1'quote", "\ufdd1'?x")), cljs.core.hash_map("\ufdd0:line", 21, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'is-var?", values__4792__auto___5141)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'is-var?", cljs.core.list("\ufdd1'quote", "\ufdd1'?x")), cljs.core.hash_map("\ufdd0:line", 21, "\ufdd0:column", 7))}))
    }
  }catch(e5134) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5134)) {
      var t__4829__auto___5143 = e5134;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5143, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'is-var?", cljs.core.list("\ufdd1'quote", "\ufdd1'?x")), cljs.core.hash_map("\ufdd0:line", 21, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5134;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5144 = cljs.core.list.call(null, "\ufdd1'?");
    var result__4793__auto___5145 = cljs.core.apply.call(null, fogus.datalog.bacwn.impl.util.is_var_QMARK_, values__4792__auto___5144);
    if(cljs.core.truth_(result__4793__auto___5145)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, fogus.datalog.bacwn.impl.util.is_var_QMARK_, values__4792__auto___5144), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'is-var?", cljs.core.list("\ufdd1'quote", "\ufdd1'?")), cljs.core.hash_map("\ufdd0:line", 22, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'is-var?", values__4792__auto___5144)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'is-var?", cljs.core.list("\ufdd1'quote", "\ufdd1'?")), cljs.core.hash_map("\ufdd0:line", 22, "\ufdd0:column", 7))}))
    }
  }catch(e5135) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5135)) {
      var t__4829__auto___5146 = e5135;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5146, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'is-var?", cljs.core.list("\ufdd1'quote", "\ufdd1'?")), cljs.core.hash_map("\ufdd0:line", 22, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5135;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5147 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.util.is_var_QMARK_.call(null, "\ufdd1'??x"));
    var result__4793__auto___5148 = cljs.core.apply.call(null, cljs.core.not, values__4792__auto___5147);
    if(cljs.core.truth_(result__4793__auto___5148)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.not, values__4792__auto___5147), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'is-var?", cljs.core.list("\ufdd1'quote", "\ufdd1'??x")), cljs.core.hash_map("\ufdd0:line", 23, "\ufdd0:column", 
      12))), cljs.core.hash_map("\ufdd0:line", 23, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'not", values__4792__auto___5147)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'is-var?", cljs.core.list("\ufdd1'quote", "\ufdd1'??x")), cljs.core.hash_map("\ufdd0:line", 
      23, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 23, "\ufdd0:column", 7))}))
    }
  }catch(e5136) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5136)) {
      var t__4829__auto___5149 = e5136;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5149, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'is-var?", cljs.core.list("\ufdd1'quote", "\ufdd1'??x")), cljs.core.hash_map("\ufdd0:line", 23, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 23, 
      "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5136;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5150 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.util.is_var_QMARK_.call(null, "\ufdd1'??"));
    var result__4793__auto___5151 = cljs.core.apply.call(null, cljs.core.not, values__4792__auto___5150);
    if(cljs.core.truth_(result__4793__auto___5151)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.not, values__4792__auto___5150), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'is-var?", cljs.core.list("\ufdd1'quote", "\ufdd1'??")), cljs.core.hash_map("\ufdd0:line", 24, "\ufdd0:column", 
      12))), cljs.core.hash_map("\ufdd0:line", 24, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'not", values__4792__auto___5150)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'is-var?", cljs.core.list("\ufdd1'quote", "\ufdd1'??")), cljs.core.hash_map("\ufdd0:line", 
      24, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 24, "\ufdd0:column", 7))}))
    }
  }catch(e5137) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5137)) {
      var t__4829__auto___5152 = e5137;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5152, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'is-var?", cljs.core.list("\ufdd1'quote", "\ufdd1'??")), cljs.core.hash_map("\ufdd0:line", 24, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 24, 
      "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5137;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5153 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.util.is_var_QMARK_.call(null, "\ufdd1'x"));
    var result__4793__auto___5154 = cljs.core.apply.call(null, cljs.core.not, values__4792__auto___5153);
    if(cljs.core.truth_(result__4793__auto___5154)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.not, values__4792__auto___5153), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'is-var?", cljs.core.list("\ufdd1'quote", "\ufdd1'x")), cljs.core.hash_map("\ufdd0:line", 25, "\ufdd0:column", 
      12))), cljs.core.hash_map("\ufdd0:line", 25, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'not", values__4792__auto___5153)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'is-var?", cljs.core.list("\ufdd1'quote", "\ufdd1'x")), cljs.core.hash_map("\ufdd0:line", 
      25, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 25, "\ufdd0:column", 7))}))
    }
  }catch(e5138) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5138)) {
      var t__4829__auto___5155 = e5138;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5155, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'is-var?", cljs.core.list("\ufdd1'quote", "\ufdd1'x")), cljs.core.hash_map("\ufdd0:line", 25, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 25, 
      "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5138;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5156 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.util.is_var_QMARK_.call(null, "fred"));
    var result__4793__auto___5157 = cljs.core.apply.call(null, cljs.core.not, values__4792__auto___5156);
    if(cljs.core.truth_(result__4793__auto___5157)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.not, values__4792__auto___5156), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'is-var?", "fred"), cljs.core.hash_map("\ufdd0:line", 26, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 
      26, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'not", values__4792__auto___5156)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'is-var?", "fred"), cljs.core.hash_map("\ufdd0:line", 26, "\ufdd0:column", 
      12))), cljs.core.hash_map("\ufdd0:line", 26, "\ufdd0:column", 7))}))
    }
  }catch(e5139) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5139)) {
      var t__4829__auto___5158 = e5139;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5158, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'is-var?", "fred"), cljs.core.hash_map("\ufdd0:line", 26, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 26, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5139;
      }else {
      }
    }
  }
  try {
    var values__4792__auto__ = cljs.core.list.call(null, fogus.datalog.bacwn.impl.util.is_var_QMARK_.call(null, "\ufdd0:q"));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core.not, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.not, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'is-var?", "\ufdd0:q"), cljs.core.hash_map("\ufdd0:line", 27, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 
      27, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'not", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'is-var?", "\ufdd0:q"), cljs.core.hash_map("\ufdd0:line", 27, "\ufdd0:column", 
      12))), cljs.core.hash_map("\ufdd0:line", 27, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5140) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5140)) {
      var t__4829__auto__ = e5140;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'is-var?", "\ufdd0:q"), cljs.core.hash_map("\ufdd0:line", 27, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 27, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5140;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-util", bacwn.test.impl.test_util.test_is_var_QMARK_);
bacwn.test.impl.test_util.test_map_values = function test_map_values() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_util.test_map_values)
};
bacwn.test.impl.test_util.test_map_values = cljs.core.vary_meta.call(null, bacwn.test.impl.test_util.test_map_values, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-map-values", "\ufdd0:test", function test_map_values_test() {
  var map = cljs.core.ObjMap.fromObject(["\ufdd0:fred", "\ufdd0:sally"], {"\ufdd0:fred":1, "\ufdd0:sally":2});
  try {
    var values__4792__auto___5163 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.util.map_values.call(null, function(p1__5126_SHARP_) {
      return 2 * p1__5126_SHARP_
    }, map), cljs.core.ObjMap.fromObject(["\ufdd0:fred", "\ufdd0:sally"], {"\ufdd0:fred":2, "\ufdd0:sally":4}));
    var result__4793__auto___5164 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5163);
    if(cljs.core.truth_(result__4793__auto___5164)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5163), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'map-values", cljs.core.list("\ufdd1'fn*", cljs.core.vec(["\ufdd1'p1__5126#"]), cljs.core.with_meta(cljs.core.list("\ufdd1'*", 
      2, "\ufdd1'p1__5126#"), cljs.core.hash_map("\ufdd0:line", 31, "\ufdd0:column", 25))), "\ufdd1'map"), cljs.core.hash_map("\ufdd0:line", 31, "\ufdd0:column", 12)), cljs.core.hash_map("\ufdd0:fred", 2, "\ufdd0:sally", 4)), cljs.core.hash_map("\ufdd0:line", 31, "\ufdd0:column", 9))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5163)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'map-values", cljs.core.list("\ufdd1'fn*", cljs.core.vec(["\ufdd1'p1__5126#"]), 
      cljs.core.with_meta(cljs.core.list("\ufdd1'*", 2, "\ufdd1'p1__5126#"), cljs.core.hash_map("\ufdd0:line", 31, "\ufdd0:column", 25))), "\ufdd1'map"), cljs.core.hash_map("\ufdd0:line", 31, "\ufdd0:column", 12)), cljs.core.hash_map("\ufdd0:fred", 2, "\ufdd0:sally", 4)), cljs.core.hash_map("\ufdd0:line", 31, "\ufdd0:column", 9))}))
    }
  }catch(e5161) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5161)) {
      var t__4829__auto___5165 = e5161;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5165, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'map-values", cljs.core.list("\ufdd1'fn*", cljs.core.vec(["\ufdd1'p1__5126#"]), cljs.core.with_meta(cljs.core.list("\ufdd1'*", 2, "\ufdd1'p1__5126#"), cljs.core.hash_map("\ufdd0:line", 
      31, "\ufdd0:column", 25))), "\ufdd1'map"), cljs.core.hash_map("\ufdd0:line", 31, "\ufdd0:column", 12)), cljs.core.hash_map("\ufdd0:fred", 2, "\ufdd0:sally", 4)), cljs.core.hash_map("\ufdd0:line", 31, "\ufdd0:column", 9))}))
    }else {
      if("\ufdd0:else") {
        throw e5161;
      }else {
      }
    }
  }
  try {
    var values__4792__auto__ = cljs.core.list.call(null, fogus.datalog.bacwn.impl.util.map_values.call(null, cljs.core.identity, cljs.core.ObjMap.EMPTY), cljs.core.ObjMap.EMPTY);
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'map-values", "\ufdd1'identity", cljs.core.hash_map()), cljs.core.hash_map("\ufdd0:line", 32, "\ufdd0:column", 12)), 
      cljs.core.hash_map()), cljs.core.hash_map("\ufdd0:line", 32, "\ufdd0:column", 9))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'map-values", "\ufdd1'identity", cljs.core.hash_map()), cljs.core.hash_map("\ufdd0:line", 
      32, "\ufdd0:column", 12)), cljs.core.hash_map()), cljs.core.hash_map("\ufdd0:line", 32, "\ufdd0:column", 9))}))
    }
    return result__4793__auto__
  }catch(e5162) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5162)) {
      var t__4829__auto__ = e5162;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'map-values", "\ufdd1'identity", cljs.core.hash_map()), cljs.core.hash_map("\ufdd0:line", 32, "\ufdd0:column", 12)), cljs.core.hash_map()), cljs.core.hash_map("\ufdd0:line", 
      32, "\ufdd0:column", 9))}))
    }else {
      if("\ufdd0:else") {
        throw e5162;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-util", bacwn.test.impl.test_util.test_map_values);
bacwn.test.impl.test_util.test_keys_to_vals = function test_keys_to_vals() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_util.test_keys_to_vals)
};
bacwn.test.impl.test_util.test_keys_to_vals = cljs.core.vary_meta.call(null, bacwn.test.impl.test_util.test_keys_to_vals, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-keys-to-vals", "\ufdd0:test", function test_keys_to_vals_test() {
  var map = cljs.core.ObjMap.fromObject(["\ufdd0:fred", "\ufdd0:sally", "\ufdd0:joey"], {"\ufdd0:fred":1, "\ufdd0:sally":2, "\ufdd0:joey":3});
  try {
    var values__4792__auto___5174 = cljs.core.list.call(null, cljs.core.set.call(null, fogus.datalog.bacwn.impl.util.keys_to_vals.call(null, map, cljs.core.PersistentVector.fromArray(["\ufdd0:fred", "\ufdd0:sally"], true))), cljs.core.PersistentHashSet.fromArray([1, 2]));
    var result__4793__auto___5175 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5174);
    if(cljs.core.truth_(result__4793__auto___5175)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5174), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'set", cljs.core.with_meta(cljs.core.list("\ufdd1'keys-to-vals", "\ufdd1'map", cljs.core.vec(["\ufdd0:fred", "\ufdd0:sally"])), 
      cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 17))), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 12)), cljs.core.set([1, 2])), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 9))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5174)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'set", cljs.core.with_meta(cljs.core.list("\ufdd1'keys-to-vals", "\ufdd1'map", 
      cljs.core.vec(["\ufdd0:fred", "\ufdd0:sally"])), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 17))), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 12)), cljs.core.set([1, 2])), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 9))}))
    }
  }catch(e5170) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5170)) {
      var t__4829__auto___5176 = e5170;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5176, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'set", cljs.core.with_meta(cljs.core.list("\ufdd1'keys-to-vals", "\ufdd1'map", cljs.core.vec(["\ufdd0:fred", "\ufdd0:sally"])), cljs.core.hash_map("\ufdd0:line", 
      36, "\ufdd0:column", 17))), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 12)), cljs.core.set([1, 2])), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 9))}))
    }else {
      if("\ufdd0:else") {
        throw e5170;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5177 = cljs.core.list.call(null, cljs.core.set.call(null, fogus.datalog.bacwn.impl.util.keys_to_vals.call(null, map, cljs.core.PersistentVector.fromArray(["\ufdd0:fred", "\ufdd0:sally", "\ufdd0:becky"], true))), cljs.core.PersistentHashSet.fromArray([1, 2]));
    var result__4793__auto___5178 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5177);
    if(cljs.core.truth_(result__4793__auto___5178)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5177), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'set", cljs.core.with_meta(cljs.core.list("\ufdd1'keys-to-vals", "\ufdd1'map", cljs.core.vec(["\ufdd0:fred", "\ufdd0:sally", 
      "\ufdd0:becky"])), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 17))), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 12)), cljs.core.set([1, 2])), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 9))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5177)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'set", cljs.core.with_meta(cljs.core.list("\ufdd1'keys-to-vals", "\ufdd1'map", 
      cljs.core.vec(["\ufdd0:fred", "\ufdd0:sally", "\ufdd0:becky"])), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 17))), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 12)), cljs.core.set([1, 2])), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 9))}))
    }
  }catch(e5171) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5171)) {
      var t__4829__auto___5179 = e5171;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5179, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'set", cljs.core.with_meta(cljs.core.list("\ufdd1'keys-to-vals", "\ufdd1'map", cljs.core.vec(["\ufdd0:fred", "\ufdd0:sally", "\ufdd0:becky"])), cljs.core.hash_map("\ufdd0:line", 
      37, "\ufdd0:column", 17))), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 12)), cljs.core.set([1, 2])), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 9))}))
    }else {
      if("\ufdd0:else") {
        throw e5171;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5180 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.util.keys_to_vals.call(null, map, cljs.core.PersistentVector.EMPTY));
    var result__4793__auto___5181 = cljs.core.apply.call(null, cljs.core.empty_QMARK_, values__4792__auto___5180);
    if(cljs.core.truth_(result__4793__auto___5181)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.empty_QMARK_, values__4792__auto___5180), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'keys-to-vals", "\ufdd1'map", cljs.core.vec([])), cljs.core.hash_map("\ufdd0:line", 38, "\ufdd0:column", 
      17))), cljs.core.hash_map("\ufdd0:line", 38, "\ufdd0:column", 9))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'empty?", values__4792__auto___5180)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'keys-to-vals", "\ufdd1'map", cljs.core.vec([])), cljs.core.hash_map("\ufdd0:line", 
      38, "\ufdd0:column", 17))), cljs.core.hash_map("\ufdd0:line", 38, "\ufdd0:column", 9))}))
    }
  }catch(e5172) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5172)) {
      var t__4829__auto___5182 = e5172;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5182, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'keys-to-vals", "\ufdd1'map", cljs.core.vec([])), cljs.core.hash_map("\ufdd0:line", 38, "\ufdd0:column", 17))), cljs.core.hash_map("\ufdd0:line", 38, "\ufdd0:column", 
      9))}))
    }else {
      if("\ufdd0:else") {
        throw e5172;
      }else {
      }
    }
  }
  try {
    var values__4792__auto__ = cljs.core.list.call(null, fogus.datalog.bacwn.impl.util.keys_to_vals.call(null, cljs.core.ObjMap.EMPTY, cljs.core.PersistentVector.fromArray(["\ufdd0:fred"], true)));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core.empty_QMARK_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.empty_QMARK_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'keys-to-vals", cljs.core.hash_map(), cljs.core.vec(["\ufdd0:fred"])), cljs.core.hash_map("\ufdd0:line", 
      39, "\ufdd0:column", 17))), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 9))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'empty?", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'keys-to-vals", cljs.core.hash_map(), cljs.core.vec(["\ufdd0:fred"])), 
      cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 17))), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 9))}))
    }
    return result__4793__auto__
  }catch(e5173) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5173)) {
      var t__4829__auto__ = e5173;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'keys-to-vals", cljs.core.hash_map(), cljs.core.vec(["\ufdd0:fred"])), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 17))), cljs.core.hash_map("\ufdd0:line", 
      39, "\ufdd0:column", 9))}))
    }else {
      if("\ufdd0:else") {
        throw e5173;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-util", bacwn.test.impl.test_util.test_keys_to_vals);
bacwn.test.impl.test_util.test_reverse_map = function test_reverse_map() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_util.test_reverse_map)
};
bacwn.test.impl.test_util.test_reverse_map = cljs.core.vary_meta.call(null, bacwn.test.impl.test_util.test_reverse_map, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-reverse-map", "\ufdd0:test", function test_reverse_map_test() {
  var map = cljs.core.ObjMap.fromObject(["\ufdd0:fred", "\ufdd0:sally", "\ufdd0:joey"], {"\ufdd0:fred":1, "\ufdd0:sally":2, "\ufdd0:joey":3});
  var map_1 = cljs.core.assoc.call(null, map, "\ufdd0:mary", 3);
  try {
    var values__4792__auto___5187 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.util.reverse_map.call(null, map), cljs.core.PersistentArrayMap.fromArrays([1, 2, 3], ["\ufdd0:fred", "\ufdd0:sally", "\ufdd0:joey"]));
    var result__4793__auto___5188 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5187);
    if(cljs.core.truth_(result__4793__auto___5188)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5187), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'reverse-map", "\ufdd1'map"), cljs.core.hash_map("\ufdd0:line", 44, "\ufdd0:column", 12)), cljs.core.hash_map(1, 
      "\ufdd0:fred", 2, "\ufdd0:sally", 3, "\ufdd0:joey")), cljs.core.hash_map("\ufdd0:line", 44, "\ufdd0:column", 9))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5187)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'reverse-map", "\ufdd1'map"), cljs.core.hash_map("\ufdd0:line", 44, "\ufdd0:column", 
      12)), cljs.core.hash_map(1, "\ufdd0:fred", 2, "\ufdd0:sally", 3, "\ufdd0:joey")), cljs.core.hash_map("\ufdd0:line", 44, "\ufdd0:column", 9))}))
    }
  }catch(e5185) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5185)) {
      var t__4829__auto___5189 = e5185;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5189, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'reverse-map", "\ufdd1'map"), cljs.core.hash_map("\ufdd0:line", 44, "\ufdd0:column", 12)), cljs.core.hash_map(1, "\ufdd0:fred", 2, "\ufdd0:sally", 3, "\ufdd0:joey")), 
      cljs.core.hash_map("\ufdd0:line", 44, "\ufdd0:column", 9))}))
    }else {
      if("\ufdd0:else") {
        throw e5185;
      }else {
      }
    }
  }
  try {
    var value__4795__auto__ = function() {
      var or__3943__auto__ = cljs.core._EQ_.call(null, fogus.datalog.bacwn.impl.util.reverse_map.call(null, map_1), cljs.core.PersistentArrayMap.fromArrays([1, 2, 3], ["\ufdd0:fred", "\ufdd0:sally", "\ufdd0:joey"]));
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return cljs.core._EQ_.call(null, fogus.datalog.bacwn.impl.util.reverse_map.call(null, map_1), cljs.core.PersistentArrayMap.fromArrays([1, 2, 3], ["\ufdd0:fred", "\ufdd0:sally", "\ufdd0:mary"]))
      }
    }();
    if(cljs.core.truth_(value__4795__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":value__4795__auto__, "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'or", cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'reverse-map", "\ufdd1'map-1"), cljs.core.hash_map("\ufdd0:line", 45, "\ufdd0:column", 16)), cljs.core.hash_map(1, 
      "\ufdd0:fred", 2, "\ufdd0:sally", 3, "\ufdd0:joey")), cljs.core.hash_map("\ufdd0:line", 45, "\ufdd0:column", 13)), cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'reverse-map", "\ufdd1'map-1"), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 16)), cljs.core.hash_map(1, "\ufdd0:fred", 2, "\ufdd0:sally", 3, "\ufdd0:mary")), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 45, "\ufdd0:column", 9))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":value__4795__auto__, "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'or", cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'reverse-map", "\ufdd1'map-1"), cljs.core.hash_map("\ufdd0:line", 45, "\ufdd0:column", 16)), cljs.core.hash_map(1, 
      "\ufdd0:fred", 2, "\ufdd0:sally", 3, "\ufdd0:joey")), cljs.core.hash_map("\ufdd0:line", 45, "\ufdd0:column", 13)), cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'reverse-map", "\ufdd1'map-1"), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 16)), cljs.core.hash_map(1, "\ufdd0:fred", 2, "\ufdd0:sally", 3, "\ufdd0:mary")), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 45, "\ufdd0:column", 9))}))
    }
    return value__4795__auto__
  }catch(e5186) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5186)) {
      var t__4829__auto__ = e5186;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'or", cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'reverse-map", "\ufdd1'map-1"), cljs.core.hash_map("\ufdd0:line", 45, "\ufdd0:column", 16)), cljs.core.hash_map(1, 
      "\ufdd0:fred", 2, "\ufdd0:sally", 3, "\ufdd0:joey")), cljs.core.hash_map("\ufdd0:line", 45, "\ufdd0:column", 13)), cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'reverse-map", "\ufdd1'map-1"), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 16)), cljs.core.hash_map(1, "\ufdd0:fred", 2, "\ufdd0:sally", 3, "\ufdd0:mary")), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 45, "\ufdd0:column", 9))}))
    }else {
      if("\ufdd0:else") {
        throw e5186;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-util", bacwn.test.impl.test_util.test_reverse_map);
bacwn.test.impl.test_util.some_maps = cljs.core.PersistentVector.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:a", "\ufdd0:b"], {"\ufdd0:a":1, "\ufdd0:b":2}), cljs.core.ObjMap.fromObject(["\ufdd0:c", "\ufdd0:b"], {"\ufdd0:c":3, "\ufdd0:b":3}), cljs.core.ObjMap.fromObject(["\ufdd0:d", "\ufdd0:a"], {"\ufdd0:d":4, "\ufdd0:a":1}), cljs.core.ObjMap.fromObject(["\ufdd0:g", "\ufdd0:b"], {"\ufdd0:g":4, "\ufdd0:b":4}), cljs.core.ObjMap.fromObject(["\ufdd0:a", "\ufdd0:b"], {"\ufdd0:a":2, "\ufdd0:b":1}), 
cljs.core.ObjMap.fromObject(["\ufdd0:e", "\ufdd0:f"], {"\ufdd0:e":1, "\ufdd0:f":1})], true);
bacwn.test.impl.test_util.preduced = fogus.datalog.bacwn.impl.util.preduce.call(null, cljs.core._PLUS_, bacwn.test.impl.test_util.some_maps);
bacwn.test.impl.test_util.merged = cljs.core.apply.call(null, cljs.core.merge_with, cljs.core._PLUS_, bacwn.test.impl.test_util.some_maps);
bacwn.test.impl.test_util.test_preduce = function test_preduce() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_util.test_preduce)
};
bacwn.test.impl.test_util.test_preduce = cljs.core.vary_meta.call(null, bacwn.test.impl.test_util.test_preduce, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-preduce", "\ufdd0:test", function test_preduce_test() {
  try {
    var values__4792__auto__ = cljs.core.list.call(null, bacwn.test.impl.test_util.preduced, bacwn.test.impl.test_util.merged);
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", "\ufdd1'preduced", "\ufdd1'merged"), cljs.core.hash_map("\ufdd0:line", 62, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", "\ufdd1'preduced", "\ufdd1'merged"), cljs.core.hash_map("\ufdd0:line", 62, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5191) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5191)) {
      var t__4829__auto__ = e5191;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", "\ufdd1'preduced", "\ufdd1'merged"), cljs.core.hash_map("\ufdd0:line", 62, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5191;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-util", bacwn.test.impl.test_util.test_preduce);
goog.provide("bacwn.test.impl.test_literals");
goog.require("cljs.core");
goog.require("fogus.datalog.bacwn.impl.database");
goog.require("fogus.datalog.bacwn.impl.literals");
goog.require("fogus.datalog.bacwn.impl.database");
goog.require("fogus.datalog.bacwn.impl.literals");
bacwn.test.impl.test_literals.pl = fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:fred", cljs.core.ObjMap.fromObject(["\ufdd0:z", "\ufdd0:y", "\ufdd0:x"], {"\ufdd0:z":3, "\ufdd0:y":"\ufdd1'?y", "\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal");
bacwn.test.impl.test_literals.nl = fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:fred", cljs.core.ObjMap.fromObject(["\ufdd0:z", "\ufdd0:y", "\ufdd0:x"], {"\ufdd0:z":3, "\ufdd0:y":"\ufdd1'?y", "\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/negated");
bacwn.test.impl.test_literals.cl = fogus.datalog.bacwn.impl.literals.__GT_ConditionalLiteral.call(null, function(binds__5075__auto__) {
  return cljs.core.apply.call(null, cljs.core._GT_, binds__5075__auto__)
}, "\ufdd1'>", cljs.core.with_meta(cljs.core.list("\ufdd1'?x", 3), cljs.core.hash_map("\ufdd0:line", 27, "\ufdd0:column", 165)), "\ufdd0:fogus.datalog.bacwn.impl.literals/conditional");
bacwn.test.impl.test_literals.bl = fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:fred", null, "\ufdd0:fogus.datalog.bacwn.impl.literals/literal");
bacwn.test.impl.test_literals.bns = cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y", "\ufdd0:z"], {"\ufdd0:x":"\ufdd1'?x", "\ufdd0:y":"\ufdd1'?y", "\ufdd0:z":3});
bacwn.test.impl.test_literals.test_build_literal = function test_build_literal() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_literals.test_build_literal)
};
bacwn.test.impl.test_literals.test_build_literal = cljs.core.vary_meta.call(null, bacwn.test.impl.test_literals.test_build_literal, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-build-literal", "\ufdd0:test", function test_build_literal_test() {
  try {
    var values__4792__auto___4910 = cljs.core.list.call(null, (new cljs.core.Keyword("\ufdd0:predicate")).call(null, bacwn.test.impl.test_literals.pl), "\ufdd0:fred");
    var result__4793__auto___4911 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___4910);
    if(cljs.core.truth_(result__4793__auto___4911)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___4910), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:predicate", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 10)), "\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 
      34, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___4910)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:predicate", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 
      10)), "\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 7))}))
    }
  }catch(e4901) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4901)) {
      var t__4829__auto___4912 = e4901;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___4912, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:predicate", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 10)), "\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 34, "\ufdd0:column", 
      7))}))
    }else {
      if("\ufdd0:else") {
        throw e4901;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___4913 = cljs.core.list.call(null, (new cljs.core.Keyword("\ufdd0:term-bindings")).call(null, bacwn.test.impl.test_literals.pl), bacwn.test.impl.test_literals.bns);
    var result__4793__auto___4914 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___4913);
    if(cljs.core.truth_(result__4793__auto___4914)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___4913), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:term-bindings", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 35, "\ufdd0:column", 10)), "\ufdd1'bns"), cljs.core.hash_map("\ufdd0:line", 
      35, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___4913)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:term-bindings", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 35, "\ufdd0:column", 
      10)), "\ufdd1'bns"), cljs.core.hash_map("\ufdd0:line", 35, "\ufdd0:column", 7))}))
    }
  }catch(e4902) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4902)) {
      var t__4829__auto___4915 = e4902;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___4915, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:term-bindings", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 35, "\ufdd0:column", 10)), "\ufdd1'bns"), cljs.core.hash_map("\ufdd0:line", 35, "\ufdd0:column", 
      7))}))
    }else {
      if("\ufdd0:else") {
        throw e4902;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___4916 = cljs.core.list.call(null, (new cljs.core.Keyword("\ufdd0:predicate")).call(null, bacwn.test.impl.test_literals.nl), "\ufdd0:fred");
    var result__4793__auto___4917 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___4916);
    if(cljs.core.truth_(result__4793__auto___4917)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___4916), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:predicate", "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 10)), "\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 
      36, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___4916)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:predicate", "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 
      10)), "\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 7))}))
    }
  }catch(e4903) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4903)) {
      var t__4829__auto___4918 = e4903;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___4918, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:predicate", "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 10)), "\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 36, "\ufdd0:column", 
      7))}))
    }else {
      if("\ufdd0:else") {
        throw e4903;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___4919 = cljs.core.list.call(null, (new cljs.core.Keyword("\ufdd0:term-bindings")).call(null, bacwn.test.impl.test_literals.nl), bacwn.test.impl.test_literals.bns);
    var result__4793__auto___4920 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___4919);
    if(cljs.core.truth_(result__4793__auto___4920)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___4919), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:term-bindings", "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 10)), "\ufdd1'bns"), cljs.core.hash_map("\ufdd0:line", 
      37, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___4919)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:term-bindings", "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 
      10)), "\ufdd1'bns"), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 7))}))
    }
  }catch(e4904) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4904)) {
      var t__4829__auto___4921 = e4904;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___4921, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:term-bindings", "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 10)), "\ufdd1'bns"), cljs.core.hash_map("\ufdd0:line", 37, "\ufdd0:column", 
      7))}))
    }else {
      if("\ufdd0:else") {
        throw e4904;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___4922 = cljs.core.list.call(null, (new cljs.core.Keyword("\ufdd0:symbol")).call(null, bacwn.test.impl.test_literals.cl), "\ufdd1'>");
    var result__4793__auto___4923 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___4922);
    if(cljs.core.truth_(result__4793__auto___4923)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___4922), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:symbol", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 38, "\ufdd0:column", 10)), cljs.core.list("\ufdd1'quote", 
      "\ufdd1'>")), cljs.core.hash_map("\ufdd0:line", 38, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___4922)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:symbol", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 38, "\ufdd0:column", 
      10)), cljs.core.list("\ufdd1'quote", "\ufdd1'>")), cljs.core.hash_map("\ufdd0:line", 38, "\ufdd0:column", 7))}))
    }
  }catch(e4905) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4905)) {
      var t__4829__auto___4924 = e4905;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___4924, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:symbol", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 38, "\ufdd0:column", 10)), cljs.core.list("\ufdd1'quote", "\ufdd1'>")), cljs.core.hash_map("\ufdd0:line", 
      38, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e4905;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___4925 = cljs.core.list.call(null, (new cljs.core.Keyword("\ufdd0:terms")).call(null, bacwn.test.impl.test_literals.cl), cljs.core.with_meta(cljs.core.list("\ufdd1'?x", 3), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 23)));
    var result__4793__auto___4926 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___4925);
    if(cljs.core.truth_(result__4793__auto___4926)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___4925), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:terms", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 10)), cljs.core.list("\ufdd1'quote", 
      cljs.core.with_meta(cljs.core.list("\ufdd1'?x", 3), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 23)))), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___4925)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:terms", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 
      10)), cljs.core.list("\ufdd1'quote", cljs.core.with_meta(cljs.core.list("\ufdd1'?x", 3), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 23)))), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 7))}))
    }
  }catch(e4906) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4906)) {
      var t__4829__auto___4927 = e4906;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___4927, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:terms", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 10)), cljs.core.list("\ufdd1'quote", cljs.core.with_meta(cljs.core.list("\ufdd1'?x", 
      3), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 23)))), cljs.core.hash_map("\ufdd0:line", 39, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e4906;
      }else {
      }
    }
  }
  try {
    var value__4795__auto___4928 = (new cljs.core.Keyword("\ufdd0:fun")).call(null, bacwn.test.impl.test_literals.cl).call(null, cljs.core.PersistentVector.fromArray([4, 3], true));
    if(cljs.core.truth_(value__4795__auto___4928)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":value__4795__auto___4928, "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list(cljs.core.with_meta(cljs.core.list("\ufdd0:fun", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 40, "\ufdd0:column", 8)), cljs.core.vec([4, 3])), cljs.core.hash_map("\ufdd0:line", 40, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":value__4795__auto___4928, "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list(cljs.core.with_meta(cljs.core.list("\ufdd0:fun", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 40, "\ufdd0:column", 8)), cljs.core.vec([4, 3])), cljs.core.hash_map("\ufdd0:line", 40, "\ufdd0:column", 7))}))
    }
  }catch(e4907) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4907)) {
      var t__4829__auto___4929 = e4907;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___4929, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list(cljs.core.with_meta(cljs.core.list("\ufdd0:fun", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 40, "\ufdd0:column", 8)), cljs.core.vec([4, 3])), cljs.core.hash_map("\ufdd0:line", 40, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e4907;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___4930 = cljs.core.list.call(null, (new cljs.core.Keyword("\ufdd0:fun")).call(null, bacwn.test.impl.test_literals.cl).call(null, cljs.core.PersistentVector.fromArray([2, 4], true)));
    var result__4793__auto___4931 = cljs.core.apply.call(null, cljs.core.not, values__4792__auto___4930);
    if(cljs.core.truth_(result__4793__auto___4931)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.not, values__4792__auto___4930), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list(cljs.core.with_meta(cljs.core.list("\ufdd0:fun", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 41, "\ufdd0:column", 
      13)), cljs.core.vec([2, 4])), cljs.core.hash_map("\ufdd0:line", 41, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 41, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'not", values__4792__auto___4930)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list(cljs.core.with_meta(cljs.core.list("\ufdd0:fun", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 
      41, "\ufdd0:column", 13)), cljs.core.vec([2, 4])), cljs.core.hash_map("\ufdd0:line", 41, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 41, "\ufdd0:column", 7))}))
    }
  }catch(e4908) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4908)) {
      var t__4829__auto___4932 = e4908;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___4932, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list(cljs.core.with_meta(cljs.core.list("\ufdd0:fun", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 41, "\ufdd0:column", 13)), cljs.core.vec([2, 4])), cljs.core.hash_map("\ufdd0:line", 
      41, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 41, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e4908;
      }else {
      }
    }
  }
  try {
    var values__4792__auto__ = cljs.core.list.call(null, (new cljs.core.Keyword("\ufdd0:predicate")).call(null, bacwn.test.impl.test_literals.bl), "\ufdd0:fred");
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:predicate", "\ufdd1'bl"), cljs.core.hash_map("\ufdd0:line", 42, "\ufdd0:column", 10)), "\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 
      42, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:predicate", "\ufdd1'bl"), cljs.core.hash_map("\ufdd0:line", 42, "\ufdd0:column", 
      10)), "\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 42, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e4909) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4909)) {
      var t__4829__auto__ = e4909;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:predicate", "\ufdd1'bl"), cljs.core.hash_map("\ufdd0:line", 42, "\ufdd0:column", 10)), "\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 42, "\ufdd0:column", 
      7))}))
    }else {
      if("\ufdd0:else") {
        throw e4909;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-literals", bacwn.test.impl.test_literals.test_build_literal);
bacwn.test.impl.test_literals.test_literal_predicate = function test_literal_predicate() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_literals.test_literal_predicate)
};
bacwn.test.impl.test_literals.test_literal_predicate = cljs.core.vary_meta.call(null, bacwn.test.impl.test_literals.test_literal_predicate, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-literal-predicate", "\ufdd0:test", function test_literal_predicate_test() {
  try {
    var values__4792__auto___4941 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, bacwn.test.impl.test_literals.pl), "\ufdd0:fred");
    var result__4793__auto___4942 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___4941);
    if(cljs.core.truth_(result__4793__auto___4942)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___4941), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 45, "\ufdd0:column", 10)), "\ufdd0:fred"), 
      cljs.core.hash_map("\ufdd0:line", 45, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___4941)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 45, 
      "\ufdd0:column", 10)), "\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 45, "\ufdd0:column", 7))}))
    }
  }catch(e4937) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4937)) {
      var t__4829__auto___4943 = e4937;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___4943, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 45, "\ufdd0:column", 10)), "\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 45, "\ufdd0:column", 
      7))}))
    }else {
      if("\ufdd0:else") {
        throw e4937;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___4944 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, bacwn.test.impl.test_literals.nl), "\ufdd0:fred");
    var result__4793__auto___4945 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___4944);
    if(cljs.core.truth_(result__4793__auto___4945)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___4944), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 10)), "\ufdd0:fred"), 
      cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___4944)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 46, 
      "\ufdd0:column", 10)), "\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 7))}))
    }
  }catch(e4938) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4938)) {
      var t__4829__auto___4946 = e4938;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___4946, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 10)), "\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 46, "\ufdd0:column", 
      7))}))
    }else {
      if("\ufdd0:else") {
        throw e4938;
      }else {
      }
    }
  }
  try {
    var value__4795__auto___4947 = fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, bacwn.test.impl.test_literals.cl) == null;
    if(value__4795__auto___4947) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":value__4795__auto___4947, "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'nil?", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 47, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 47, "\ufdd0:column", 
      7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":value__4795__auto___4947, "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'nil?", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 47, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 47, "\ufdd0:column", 
      7))}))
    }
  }catch(e4939) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4939)) {
      var t__4829__auto___4948 = e4939;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___4948, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'nil?", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 47, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 47, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e4939;
      }else {
      }
    }
  }
  try {
    var values__4792__auto__ = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, bacwn.test.impl.test_literals.bl), "\ufdd0:fred");
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", "\ufdd1'bl"), cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 10)), "\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 
      48, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", "\ufdd1'bl"), cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 
      10)), "\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e4940) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4940)) {
      var t__4829__auto__ = e4940;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", "\ufdd1'bl"), cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 10)), "\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 48, "\ufdd0:column", 
      7))}))
    }else {
      if("\ufdd0:else") {
        throw e4940;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-literals", bacwn.test.impl.test_literals.test_literal_predicate);
bacwn.test.impl.test_literals.test_literal_columns = function test_literal_columns() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_literals.test_literal_columns)
};
bacwn.test.impl.test_literals.test_literal_columns = cljs.core.vary_meta.call(null, bacwn.test.impl.test_literals.test_literal_columns, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-literal-columns", "\ufdd0:test", function test_literal_columns_test() {
  try {
    var values__4792__auto___4957 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.literal_columns.call(null, bacwn.test.impl.test_literals.pl), cljs.core.PersistentHashSet.fromArray(["\ufdd0:z", "\ufdd0:y", "\ufdd0:x"]));
    var result__4793__auto___4958 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___4957);
    if(cljs.core.truth_(result__4793__auto___4958)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___4957), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-columns", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 51, "\ufdd0:column", 10)), cljs.core.set(["\ufdd0:z", 
      "\ufdd0:y", "\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 51, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___4957)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-columns", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 51, "\ufdd0:column", 
      10)), cljs.core.set(["\ufdd0:z", "\ufdd0:y", "\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 51, "\ufdd0:column", 7))}))
    }
  }catch(e4953) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4953)) {
      var t__4829__auto___4959 = e4953;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___4959, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-columns", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 51, "\ufdd0:column", 10)), cljs.core.set(["\ufdd0:z", "\ufdd0:y", "\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 
      51, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e4953;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___4960 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.literal_columns.call(null, bacwn.test.impl.test_literals.nl), cljs.core.PersistentHashSet.fromArray(["\ufdd0:z", "\ufdd0:y", "\ufdd0:x"]));
    var result__4793__auto___4961 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___4960);
    if(cljs.core.truth_(result__4793__auto___4961)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___4960), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-columns", "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 10)), cljs.core.set(["\ufdd0:z", 
      "\ufdd0:y", "\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___4960)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-columns", "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 
      10)), cljs.core.set(["\ufdd0:z", "\ufdd0:y", "\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 7))}))
    }
  }catch(e4954) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4954)) {
      var t__4829__auto___4962 = e4954;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___4962, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-columns", "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 52, "\ufdd0:column", 10)), cljs.core.set(["\ufdd0:z", "\ufdd0:y", "\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 
      52, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e4954;
      }else {
      }
    }
  }
  try {
    var value__4795__auto___4963 = fogus.datalog.bacwn.impl.literals.literal_columns.call(null, bacwn.test.impl.test_literals.cl) == null;
    if(value__4795__auto___4963) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":value__4795__auto___4963, "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'nil?", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-columns", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 53, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 53, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":value__4795__auto___4963, "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'nil?", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-columns", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 53, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 53, "\ufdd0:column", 7))}))
    }
  }catch(e4955) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4955)) {
      var t__4829__auto___4964 = e4955;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___4964, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'nil?", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-columns", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 53, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 53, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e4955;
      }else {
      }
    }
  }
  try {
    var values__4792__auto__ = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.literal_columns.call(null, bacwn.test.impl.test_literals.bl));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core.empty_QMARK_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.empty_QMARK_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-columns", "\ufdd1'bl"), cljs.core.hash_map("\ufdd0:line", 54, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 
      54, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'empty?", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-columns", "\ufdd1'bl"), cljs.core.hash_map("\ufdd0:line", 54, 
      "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 54, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e4956) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4956)) {
      var t__4829__auto__ = e4956;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-columns", "\ufdd1'bl"), cljs.core.hash_map("\ufdd0:line", 54, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 54, "\ufdd0:column", 
      7))}))
    }else {
      if("\ufdd0:else") {
        throw e4956;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-literals", bacwn.test.impl.test_literals.test_literal_columns);
bacwn.test.impl.test_literals.test_literal_vars = function test_literal_vars() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_literals.test_literal_vars)
};
bacwn.test.impl.test_literals.test_literal_vars = cljs.core.vary_meta.call(null, bacwn.test.impl.test_literals.test_literal_vars, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-literal-vars", "\ufdd0:test", function test_literal_vars_test() {
  try {
    var values__4792__auto___4973 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.literal_vars.call(null, bacwn.test.impl.test_literals.pl), cljs.core.PersistentHashSet.fromArray(["\ufdd1'?y", "\ufdd1'?x"]));
    var result__4793__auto___4974 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___4973);
    if(cljs.core.truth_(result__4793__auto___4974)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___4973), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-vars", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 57, "\ufdd0:column", 10)), cljs.core.set([cljs.core.list("\ufdd1'quote", 
      "\ufdd1'?y"), cljs.core.list("\ufdd1'quote", "\ufdd1'?x")])), cljs.core.hash_map("\ufdd0:line", 57, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___4973)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-vars", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 57, "\ufdd0:column", 
      10)), cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), cljs.core.list("\ufdd1'quote", "\ufdd1'?x")])), cljs.core.hash_map("\ufdd0:line", 57, "\ufdd0:column", 7))}))
    }
  }catch(e4969) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4969)) {
      var t__4829__auto___4975 = e4969;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___4975, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-vars", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 57, "\ufdd0:column", 10)), cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), cljs.core.list("\ufdd1'quote", 
      "\ufdd1'?x")])), cljs.core.hash_map("\ufdd0:line", 57, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e4969;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___4976 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.literal_vars.call(null, bacwn.test.impl.test_literals.nl), cljs.core.PersistentHashSet.fromArray(["\ufdd1'?y", "\ufdd1'?x"]));
    var result__4793__auto___4977 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___4976);
    if(cljs.core.truth_(result__4793__auto___4977)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___4976), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-vars", "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 58, "\ufdd0:column", 10)), cljs.core.set([cljs.core.list("\ufdd1'quote", 
      "\ufdd1'?y"), cljs.core.list("\ufdd1'quote", "\ufdd1'?x")])), cljs.core.hash_map("\ufdd0:line", 58, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___4976)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-vars", "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 58, "\ufdd0:column", 
      10)), cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), cljs.core.list("\ufdd1'quote", "\ufdd1'?x")])), cljs.core.hash_map("\ufdd0:line", 58, "\ufdd0:column", 7))}))
    }
  }catch(e4970) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4970)) {
      var t__4829__auto___4978 = e4970;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___4978, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-vars", "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 58, "\ufdd0:column", 10)), cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), cljs.core.list("\ufdd1'quote", 
      "\ufdd1'?x")])), cljs.core.hash_map("\ufdd0:line", 58, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e4970;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___4979 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.literal_vars.call(null, bacwn.test.impl.test_literals.cl), cljs.core.PersistentHashSet.fromArray(["\ufdd1'?x"]));
    var result__4793__auto___4980 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___4979);
    if(cljs.core.truth_(result__4793__auto___4980)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___4979), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-vars", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 59, "\ufdd0:column", 10)), cljs.core.set([cljs.core.list("\ufdd1'quote", 
      "\ufdd1'?x")])), cljs.core.hash_map("\ufdd0:line", 59, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___4979)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-vars", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 59, "\ufdd0:column", 
      10)), cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?x")])), cljs.core.hash_map("\ufdd0:line", 59, "\ufdd0:column", 7))}))
    }
  }catch(e4971) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4971)) {
      var t__4829__auto___4981 = e4971;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___4981, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-vars", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 59, "\ufdd0:column", 10)), cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?x")])), cljs.core.hash_map("\ufdd0:line", 
      59, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e4971;
      }else {
      }
    }
  }
  try {
    var values__4792__auto__ = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.literal_vars.call(null, bacwn.test.impl.test_literals.bl));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core.empty_QMARK_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.empty_QMARK_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-vars", "\ufdd1'bl"), cljs.core.hash_map("\ufdd0:line", 60, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 
      60, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'empty?", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-vars", "\ufdd1'bl"), cljs.core.hash_map("\ufdd0:line", 60, 
      "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 60, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e4972) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4972)) {
      var t__4829__auto__ = e4972;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-vars", "\ufdd1'bl"), cljs.core.hash_map("\ufdd0:line", 60, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 60, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e4972;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-literals", bacwn.test.impl.test_literals.test_literal_vars);
bacwn.test.impl.test_literals.test_positive_vars = function test_positive_vars() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_literals.test_positive_vars)
};
bacwn.test.impl.test_literals.test_positive_vars = cljs.core.vary_meta.call(null, bacwn.test.impl.test_literals.test_positive_vars, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-positive-vars", "\ufdd0:test", function test_positive_vars_test() {
  try {
    var values__4792__auto___4990 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.positive_vars.call(null, bacwn.test.impl.test_literals.pl), fogus.datalog.bacwn.impl.literals.literal_vars.call(null, bacwn.test.impl.test_literals.pl));
    var result__4793__auto___4991 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___4990);
    if(cljs.core.truth_(result__4793__auto___4991)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___4990), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'positive-vars", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 63, "\ufdd0:column", 10)), cljs.core.with_meta(cljs.core.list("\ufdd1'literal-vars", 
      "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 63, "\ufdd0:column", 29))), cljs.core.hash_map("\ufdd0:line", 63, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___4990)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'positive-vars", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 63, "\ufdd0:column", 
      10)), cljs.core.with_meta(cljs.core.list("\ufdd1'literal-vars", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 63, "\ufdd0:column", 29))), cljs.core.hash_map("\ufdd0:line", 63, "\ufdd0:column", 7))}))
    }
  }catch(e4986) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4986)) {
      var t__4829__auto___4992 = e4986;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___4992, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'positive-vars", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 63, "\ufdd0:column", 10)), cljs.core.with_meta(cljs.core.list("\ufdd1'literal-vars", "\ufdd1'pl"), 
      cljs.core.hash_map("\ufdd0:line", 63, "\ufdd0:column", 29))), cljs.core.hash_map("\ufdd0:line", 63, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e4986;
      }else {
      }
    }
  }
  try {
    var value__4795__auto___4993 = fogus.datalog.bacwn.impl.literals.positive_vars.call(null, bacwn.test.impl.test_literals.nl) == null;
    if(value__4795__auto___4993) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":value__4795__auto___4993, "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'nil?", cljs.core.with_meta(cljs.core.list("\ufdd1'positive-vars", "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 64, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 64, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":value__4795__auto___4993, "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'nil?", cljs.core.with_meta(cljs.core.list("\ufdd1'positive-vars", "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 64, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 64, "\ufdd0:column", 7))}))
    }
  }catch(e4987) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4987)) {
      var t__4829__auto___4994 = e4987;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___4994, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'nil?", cljs.core.with_meta(cljs.core.list("\ufdd1'positive-vars", "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 64, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 64, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e4987;
      }else {
      }
    }
  }
  try {
    var value__4795__auto___4995 = fogus.datalog.bacwn.impl.literals.positive_vars.call(null, bacwn.test.impl.test_literals.cl) == null;
    if(value__4795__auto___4995) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":value__4795__auto___4995, "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'nil?", cljs.core.with_meta(cljs.core.list("\ufdd1'positive-vars", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 65, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 65, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":value__4795__auto___4995, "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'nil?", cljs.core.with_meta(cljs.core.list("\ufdd1'positive-vars", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 65, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 65, "\ufdd0:column", 7))}))
    }
  }catch(e4988) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4988)) {
      var t__4829__auto___4996 = e4988;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___4996, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'nil?", cljs.core.with_meta(cljs.core.list("\ufdd1'positive-vars", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 65, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 65, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e4988;
      }else {
      }
    }
  }
  try {
    var values__4792__auto__ = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.positive_vars.call(null, bacwn.test.impl.test_literals.bl));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core.empty_QMARK_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.empty_QMARK_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'positive-vars", "\ufdd1'bl"), cljs.core.hash_map("\ufdd0:line", 66, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 
      66, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'empty?", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'positive-vars", "\ufdd1'bl"), cljs.core.hash_map("\ufdd0:line", 66, 
      "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 66, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e4989) {
    if(cljs.core.instance_QMARK_.call(null, Error, e4989)) {
      var t__4829__auto__ = e4989;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'positive-vars", "\ufdd1'bl"), cljs.core.hash_map("\ufdd0:line", 66, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 66, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e4989;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-literals", bacwn.test.impl.test_literals.test_positive_vars);
bacwn.test.impl.test_literals.test_negative_vars = function test_negative_vars() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_literals.test_negative_vars)
};
bacwn.test.impl.test_literals.test_negative_vars = cljs.core.vary_meta.call(null, bacwn.test.impl.test_literals.test_negative_vars, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-negative-vars", "\ufdd0:test", function test_negative_vars_test() {
  try {
    var value__4795__auto___5005 = fogus.datalog.bacwn.impl.literals.negative_vars.call(null, bacwn.test.impl.test_literals.pl) == null;
    if(value__4795__auto___5005) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":value__4795__auto___5005, "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'nil?", cljs.core.with_meta(cljs.core.list("\ufdd1'negative-vars", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 69, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 69, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":value__4795__auto___5005, "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'nil?", cljs.core.with_meta(cljs.core.list("\ufdd1'negative-vars", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 69, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 69, "\ufdd0:column", 7))}))
    }
  }catch(e5001) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5001)) {
      var t__4829__auto___5006 = e5001;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5006, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'nil?", cljs.core.with_meta(cljs.core.list("\ufdd1'negative-vars", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 69, "\ufdd0:column", 13))), cljs.core.hash_map("\ufdd0:line", 69, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5001;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5007 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.negative_vars.call(null, bacwn.test.impl.test_literals.nl), fogus.datalog.bacwn.impl.literals.literal_vars.call(null, bacwn.test.impl.test_literals.nl));
    var result__4793__auto___5008 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5007);
    if(cljs.core.truth_(result__4793__auto___5008)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5007), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'negative-vars", "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 70, "\ufdd0:column", 10)), cljs.core.with_meta(cljs.core.list("\ufdd1'literal-vars", 
      "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 70, "\ufdd0:column", 29))), cljs.core.hash_map("\ufdd0:line", 70, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5007)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'negative-vars", "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 70, "\ufdd0:column", 
      10)), cljs.core.with_meta(cljs.core.list("\ufdd1'literal-vars", "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 70, "\ufdd0:column", 29))), cljs.core.hash_map("\ufdd0:line", 70, "\ufdd0:column", 7))}))
    }
  }catch(e5002) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5002)) {
      var t__4829__auto___5009 = e5002;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5009, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'negative-vars", "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 70, "\ufdd0:column", 10)), cljs.core.with_meta(cljs.core.list("\ufdd1'literal-vars", "\ufdd1'nl"), 
      cljs.core.hash_map("\ufdd0:line", 70, "\ufdd0:column", 29))), cljs.core.hash_map("\ufdd0:line", 70, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5002;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5010 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.negative_vars.call(null, bacwn.test.impl.test_literals.cl), fogus.datalog.bacwn.impl.literals.literal_vars.call(null, bacwn.test.impl.test_literals.cl));
    var result__4793__auto___5011 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5010);
    if(cljs.core.truth_(result__4793__auto___5011)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5010), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'negative-vars", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 71, "\ufdd0:column", 10)), cljs.core.with_meta(cljs.core.list("\ufdd1'literal-vars", 
      "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 71, "\ufdd0:column", 29))), cljs.core.hash_map("\ufdd0:line", 71, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5010)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'negative-vars", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 71, "\ufdd0:column", 
      10)), cljs.core.with_meta(cljs.core.list("\ufdd1'literal-vars", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 71, "\ufdd0:column", 29))), cljs.core.hash_map("\ufdd0:line", 71, "\ufdd0:column", 7))}))
    }
  }catch(e5003) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5003)) {
      var t__4829__auto___5012 = e5003;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5012, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'negative-vars", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 71, "\ufdd0:column", 10)), cljs.core.with_meta(cljs.core.list("\ufdd1'literal-vars", "\ufdd1'cl"), 
      cljs.core.hash_map("\ufdd0:line", 71, "\ufdd0:column", 29))), cljs.core.hash_map("\ufdd0:line", 71, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5003;
      }else {
      }
    }
  }
  try {
    var values__4792__auto__ = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.negative_vars.call(null, bacwn.test.impl.test_literals.bl));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core.empty_QMARK_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.empty_QMARK_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'negative-vars", "\ufdd1'bl"), cljs.core.hash_map("\ufdd0:line", 72, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 
      72, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'empty?", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'negative-vars", "\ufdd1'bl"), cljs.core.hash_map("\ufdd0:line", 72, 
      "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 72, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5004) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5004)) {
      var t__4829__auto__ = e5004;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'negative-vars", "\ufdd1'bl"), cljs.core.hash_map("\ufdd0:line", 72, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 72, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5004;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-literals", bacwn.test.impl.test_literals.test_negative_vars);
bacwn.test.impl.test_literals.test_negated_QMARK_ = function test_negated_QMARK_() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_literals.test_negated_QMARK_)
};
bacwn.test.impl.test_literals.test_negated_QMARK_ = cljs.core.vary_meta.call(null, bacwn.test.impl.test_literals.test_negated_QMARK_, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-negated?", "\ufdd0:test", function test_negated_QMARK__test() {
  try {
    var values__4792__auto___5019 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.negated_QMARK_.call(null, bacwn.test.impl.test_literals.pl));
    var result__4793__auto___5020 = cljs.core.apply.call(null, cljs.core.not, values__4792__auto___5019);
    if(cljs.core.truth_(result__4793__auto___5020)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.not, values__4792__auto___5019), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'negated?", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 75, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 
      75, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'not", values__4792__auto___5019)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'negated?", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 75, "\ufdd0:column", 
      12))), cljs.core.hash_map("\ufdd0:line", 75, "\ufdd0:column", 7))}))
    }
  }catch(e5016) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5016)) {
      var t__4829__auto___5021 = e5016;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5021, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'negated?", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 75, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 75, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5016;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5022 = cljs.core.list.call(null, bacwn.test.impl.test_literals.nl);
    var result__4793__auto___5023 = cljs.core.apply.call(null, fogus.datalog.bacwn.impl.literals.negated_QMARK_, values__4792__auto___5022);
    if(cljs.core.truth_(result__4793__auto___5023)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, fogus.datalog.bacwn.impl.literals.negated_QMARK_, values__4792__auto___5022), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'negated?", "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 76, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'negated?", values__4792__auto___5022)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'negated?", "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 76, "\ufdd0:column", 7))}))
    }
  }catch(e5017) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5017)) {
      var t__4829__auto___5024 = e5017;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5024, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'negated?", "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 76, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5017;
      }else {
      }
    }
  }
  try {
    var values__4792__auto__ = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.negated_QMARK_.call(null, bacwn.test.impl.test_literals.cl));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core.not, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.not, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'negated?", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 77, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 
      77, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'not", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'negated?", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 77, "\ufdd0:column", 
      12))), cljs.core.hash_map("\ufdd0:line", 77, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5018) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5018)) {
      var t__4829__auto__ = e5018;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'negated?", "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 77, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 77, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5018;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-literals", bacwn.test.impl.test_literals.test_negated_QMARK_);
bacwn.test.impl.test_literals.test_vs_from_cs = function test_vs_from_cs() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_literals.test_vs_from_cs)
};
bacwn.test.impl.test_literals.test_vs_from_cs = cljs.core.vary_meta.call(null, bacwn.test.impl.test_literals.test_vs_from_cs, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-vs-from-cs", "\ufdd0:test", function test_vs_from_cs_test() {
  try {
    var values__4792__auto___5033 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.get_vs_from_cs.call(null, bacwn.test.impl.test_literals.pl, cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])), cljs.core.PersistentHashSet.fromArray(["\ufdd1'?x"]));
    var result__4793__auto___5034 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5033);
    if(cljs.core.truth_(result__4793__auto___5034)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5033), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'get-vs-from-cs", "\ufdd1'pl", cljs.core.set(["\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 80, "\ufdd0:column", 
      10)), cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?x")])), cljs.core.hash_map("\ufdd0:line", 80, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5033)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'get-vs-from-cs", "\ufdd1'pl", cljs.core.set(["\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 
      80, "\ufdd0:column", 10)), cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?x")])), cljs.core.hash_map("\ufdd0:line", 80, "\ufdd0:column", 7))}))
    }
  }catch(e5029) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5029)) {
      var t__4829__auto___5035 = e5029;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5035, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'get-vs-from-cs", "\ufdd1'pl", cljs.core.set(["\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 80, "\ufdd0:column", 10)), cljs.core.set([cljs.core.list("\ufdd1'quote", 
      "\ufdd1'?x")])), cljs.core.hash_map("\ufdd0:line", 80, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5029;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5036 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.get_vs_from_cs.call(null, bacwn.test.impl.test_literals.pl, cljs.core.PersistentHashSet.fromArray(["\ufdd0:z"])));
    var result__4793__auto___5037 = cljs.core.apply.call(null, cljs.core.empty_QMARK_, values__4792__auto___5036);
    if(cljs.core.truth_(result__4793__auto___5037)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.empty_QMARK_, values__4792__auto___5036), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'get-vs-from-cs", "\ufdd1'pl", cljs.core.set(["\ufdd0:z"])), cljs.core.hash_map("\ufdd0:line", 81, 
      "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 81, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'empty?", values__4792__auto___5036)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'get-vs-from-cs", "\ufdd1'pl", cljs.core.set(["\ufdd0:z"])), cljs.core.hash_map("\ufdd0:line", 
      81, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 81, "\ufdd0:column", 7))}))
    }
  }catch(e5030) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5030)) {
      var t__4829__auto___5038 = e5030;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5038, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'get-vs-from-cs", "\ufdd1'pl", cljs.core.set(["\ufdd0:z"])), cljs.core.hash_map("\ufdd0:line", 81, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 
      81, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5030;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5039 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.get_vs_from_cs.call(null, bacwn.test.impl.test_literals.pl, cljs.core.PersistentHashSet.fromArray(["\ufdd0:r", "\ufdd0:x"])), cljs.core.PersistentHashSet.fromArray(["\ufdd1'?x"]));
    var result__4793__auto___5040 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5039);
    if(cljs.core.truth_(result__4793__auto___5040)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5039), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'get-vs-from-cs", "\ufdd1'pl", cljs.core.set(["\ufdd0:r", "\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 82, 
      "\ufdd0:column", 10)), cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?x")])), cljs.core.hash_map("\ufdd0:line", 82, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5039)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'get-vs-from-cs", "\ufdd1'pl", cljs.core.set(["\ufdd0:r", "\ufdd0:x"])), 
      cljs.core.hash_map("\ufdd0:line", 82, "\ufdd0:column", 10)), cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?x")])), cljs.core.hash_map("\ufdd0:line", 82, "\ufdd0:column", 7))}))
    }
  }catch(e5031) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5031)) {
      var t__4829__auto___5041 = e5031;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5041, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'get-vs-from-cs", "\ufdd1'pl", cljs.core.set(["\ufdd0:r", "\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 82, "\ufdd0:column", 10)), cljs.core.set([cljs.core.list("\ufdd1'quote", 
      "\ufdd1'?x")])), cljs.core.hash_map("\ufdd0:line", 82, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5031;
      }else {
      }
    }
  }
  try {
    var values__4792__auto__ = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.get_vs_from_cs.call(null, bacwn.test.impl.test_literals.pl, cljs.core.PersistentHashSet.EMPTY));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core.empty_QMARK_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.empty_QMARK_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'get-vs-from-cs", "\ufdd1'pl", cljs.core.set([])), cljs.core.hash_map("\ufdd0:line", 83, "\ufdd0:column", 
      15))), cljs.core.hash_map("\ufdd0:line", 83, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'empty?", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'get-vs-from-cs", "\ufdd1'pl", cljs.core.set([])), cljs.core.hash_map("\ufdd0:line", 
      83, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 83, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5032) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5032)) {
      var t__4829__auto__ = e5032;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'get-vs-from-cs", "\ufdd1'pl", cljs.core.set([])), cljs.core.hash_map("\ufdd0:line", 83, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 83, 
      "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5032;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-literals", bacwn.test.impl.test_literals.test_vs_from_cs);
bacwn.test.impl.test_literals.test_cs_from_vs = function test_cs_from_vs() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_literals.test_cs_from_vs)
};
bacwn.test.impl.test_literals.test_cs_from_vs = cljs.core.vary_meta.call(null, bacwn.test.impl.test_literals.test_cs_from_vs, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-cs-from-vs", "\ufdd0:test", function test_cs_from_vs_test() {
  try {
    var values__4792__auto___5048 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.get_cs_from_vs.call(null, bacwn.test.impl.test_literals.pl, cljs.core.PersistentHashSet.fromArray(["\ufdd1'?x"])), cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"]));
    var result__4793__auto___5049 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5048);
    if(cljs.core.truth_(result__4793__auto___5049)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5048), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'get-cs-from-vs", "\ufdd1'pl", cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?x")])), cljs.core.hash_map("\ufdd0:line", 
      86, "\ufdd0:column", 10)), cljs.core.set(["\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 86, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5048)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'get-cs-from-vs", "\ufdd1'pl", cljs.core.set([cljs.core.list("\ufdd1'quote", 
      "\ufdd1'?x")])), cljs.core.hash_map("\ufdd0:line", 86, "\ufdd0:column", 10)), cljs.core.set(["\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 86, "\ufdd0:column", 7))}))
    }
  }catch(e5045) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5045)) {
      var t__4829__auto___5050 = e5045;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5050, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'get-cs-from-vs", "\ufdd1'pl", cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?x")])), cljs.core.hash_map("\ufdd0:line", 86, "\ufdd0:column", 10)), cljs.core.set(["\ufdd0:x"])), 
      cljs.core.hash_map("\ufdd0:line", 86, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5045;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5051 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.get_cs_from_vs.call(null, bacwn.test.impl.test_literals.pl, cljs.core.PersistentHashSet.fromArray(["\ufdd1'?x", "\ufdd1'?r"])), cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"]));
    var result__4793__auto___5052 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5051);
    if(cljs.core.truth_(result__4793__auto___5052)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5051), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'get-cs-from-vs", "\ufdd1'pl", cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), cljs.core.list("\ufdd1'quote", 
      "\ufdd1'?r")])), cljs.core.hash_map("\ufdd0:line", 87, "\ufdd0:column", 10)), cljs.core.set(["\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 87, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5051)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'get-cs-from-vs", "\ufdd1'pl", cljs.core.set([cljs.core.list("\ufdd1'quote", 
      "\ufdd1'?x"), cljs.core.list("\ufdd1'quote", "\ufdd1'?r")])), cljs.core.hash_map("\ufdd0:line", 87, "\ufdd0:column", 10)), cljs.core.set(["\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 87, "\ufdd0:column", 7))}))
    }
  }catch(e5046) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5046)) {
      var t__4829__auto___5053 = e5046;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5053, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'get-cs-from-vs", "\ufdd1'pl", cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), cljs.core.list("\ufdd1'quote", "\ufdd1'?r")])), cljs.core.hash_map("\ufdd0:line", 
      87, "\ufdd0:column", 10)), cljs.core.set(["\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 87, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5046;
      }else {
      }
    }
  }
  try {
    var values__4792__auto__ = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.get_cs_from_vs.call(null, bacwn.test.impl.test_literals.pl, cljs.core.PersistentHashSet.EMPTY));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core.empty_QMARK_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.empty_QMARK_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'get-cs-from-vs", "\ufdd1'pl", cljs.core.set([])), cljs.core.hash_map("\ufdd0:line", 88, "\ufdd0:column", 
      15))), cljs.core.hash_map("\ufdd0:line", 88, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'empty?", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'get-cs-from-vs", "\ufdd1'pl", cljs.core.set([])), cljs.core.hash_map("\ufdd0:line", 
      88, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 88, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5047) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5047)) {
      var t__4829__auto__ = e5047;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'empty?", cljs.core.with_meta(cljs.core.list("\ufdd1'get-cs-from-vs", "\ufdd1'pl", cljs.core.set([])), cljs.core.hash_map("\ufdd0:line", 88, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 88, 
      "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5047;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-literals", bacwn.test.impl.test_literals.test_cs_from_vs);
bacwn.test.impl.test_literals.test_literal_appropriate_QMARK_ = function test_literal_appropriate_QMARK_() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_literals.test_literal_appropriate_QMARK_)
};
bacwn.test.impl.test_literals.test_literal_appropriate_QMARK_ = cljs.core.vary_meta.call(null, bacwn.test.impl.test_literals.test_literal_appropriate_QMARK_, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-literal-appropriate?", "\ufdd0:test", function test_literal_appropriate_QMARK__test() {
  try {
    var values__4792__auto___5066 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.literal_appropriate_QMARK_.call(null, cljs.core.PersistentHashSet.EMPTY, bacwn.test.impl.test_literals.pl));
    var result__4793__auto___5067 = cljs.core.apply.call(null, cljs.core.not, values__4792__auto___5066);
    if(cljs.core.truth_(result__4793__auto___5067)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.not, values__4792__auto___5066), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-appropriate?", cljs.core.set([]), "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 91, "\ufdd0:column", 
      12))), cljs.core.hash_map("\ufdd0:line", 91, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'not", values__4792__auto___5066)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-appropriate?", cljs.core.set([]), "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 
      91, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 91, "\ufdd0:column", 7))}))
    }
  }catch(e5060) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5060)) {
      var t__4829__auto___5068 = e5060;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5068, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-appropriate?", cljs.core.set([]), "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 91, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 91, 
      "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5060;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5069 = cljs.core.list.call(null, cljs.core.PersistentHashSet.fromArray(["\ufdd1'?x"]), bacwn.test.impl.test_literals.pl);
    var result__4793__auto___5070 = cljs.core.apply.call(null, fogus.datalog.bacwn.impl.literals.literal_appropriate_QMARK_, values__4792__auto___5069);
    if(cljs.core.truth_(result__4793__auto___5070)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, fogus.datalog.bacwn.impl.literals.literal_appropriate_QMARK_, values__4792__auto___5069), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'literal-appropriate?", cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?x")]), "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 
      92, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'literal-appropriate?", values__4792__auto___5069)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'literal-appropriate?", cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?x")]), "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 
      92, "\ufdd0:column", 7))}))
    }
  }catch(e5061) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5061)) {
      var t__4829__auto___5071 = e5061;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5071, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'literal-appropriate?", cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?x")]), "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 92, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5061;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5072 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.literal_appropriate_QMARK_.call(null, cljs.core.PersistentHashSet.fromArray(["\ufdd1'?x"]), bacwn.test.impl.test_literals.nl));
    var result__4793__auto___5073 = cljs.core.apply.call(null, cljs.core.not, values__4792__auto___5072);
    if(cljs.core.truth_(result__4793__auto___5073)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.not, values__4792__auto___5072), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-appropriate?", cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?x")]), "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 
      93, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 93, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'not", values__4792__auto___5072)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-appropriate?", cljs.core.set([cljs.core.list("\ufdd1'quote", 
      "\ufdd1'?x")]), "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 93, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 93, "\ufdd0:column", 7))}))
    }
  }catch(e5062) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5062)) {
      var t__4829__auto___5074 = e5062;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5074, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-appropriate?", cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?x")]), "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 93, "\ufdd0:column", 
      12))), cljs.core.hash_map("\ufdd0:line", 93, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5062;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5075 = cljs.core.list.call(null, cljs.core.PersistentHashSet.fromArray(["\ufdd1'?y", "\ufdd1'?x"]), bacwn.test.impl.test_literals.nl);
    var result__4793__auto___5076 = cljs.core.apply.call(null, fogus.datalog.bacwn.impl.literals.literal_appropriate_QMARK_, values__4792__auto___5075);
    if(cljs.core.truth_(result__4793__auto___5076)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, fogus.datalog.bacwn.impl.literals.literal_appropriate_QMARK_, values__4792__auto___5075), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'literal-appropriate?", cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), cljs.core.list("\ufdd1'quote", 
      "\ufdd1'?x")]), "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 94, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'literal-appropriate?", values__4792__auto___5075)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'literal-appropriate?", cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), cljs.core.list("\ufdd1'quote", 
      "\ufdd1'?x")]), "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 94, "\ufdd0:column", 7))}))
    }
  }catch(e5063) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5063)) {
      var t__4829__auto___5077 = e5063;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5077, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'literal-appropriate?", cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), cljs.core.list("\ufdd1'quote", "\ufdd1'?x")]), "\ufdd1'nl"), cljs.core.hash_map("\ufdd0:line", 94, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5063;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5078 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.literal_appropriate_QMARK_.call(null, cljs.core.PersistentHashSet.fromArray(["\ufdd1'?z"]), bacwn.test.impl.test_literals.cl));
    var result__4793__auto___5079 = cljs.core.apply.call(null, cljs.core.not, values__4792__auto___5078);
    if(cljs.core.truth_(result__4793__auto___5079)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core.not, values__4792__auto___5078), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-appropriate?", cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?z")]), "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 
      95, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 95, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'not", values__4792__auto___5078)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-appropriate?", cljs.core.set([cljs.core.list("\ufdd1'quote", 
      "\ufdd1'?z")]), "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 95, "\ufdd0:column", 12))), cljs.core.hash_map("\ufdd0:line", 95, "\ufdd0:column", 7))}))
    }
  }catch(e5064) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5064)) {
      var t__4829__auto___5080 = e5064;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5080, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-appropriate?", cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?z")]), "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 95, "\ufdd0:column", 
      12))), cljs.core.hash_map("\ufdd0:line", 95, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5064;
      }else {
      }
    }
  }
  try {
    var values__4792__auto__ = cljs.core.list.call(null, cljs.core.PersistentHashSet.fromArray(["\ufdd1'?x"]), bacwn.test.impl.test_literals.cl);
    var result__4793__auto__ = cljs.core.apply.call(null, fogus.datalog.bacwn.impl.literals.literal_appropriate_QMARK_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, fogus.datalog.bacwn.impl.literals.literal_appropriate_QMARK_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'literal-appropriate?", cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?x")]), "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 
      96, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'literal-appropriate?", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'literal-appropriate?", cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?x")]), "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 
      96, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5065) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5065)) {
      var t__4829__auto__ = e5065;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'literal-appropriate?", cljs.core.set([cljs.core.list("\ufdd1'quote", "\ufdd1'?x")]), "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 96, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5065;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-literals", bacwn.test.impl.test_literals.test_literal_appropriate_QMARK_);
bacwn.test.impl.test_literals.test_adorned_literal = function test_adorned_literal() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_literals.test_adorned_literal)
};
bacwn.test.impl.test_literals.test_adorned_literal = cljs.core.vary_meta.call(null, bacwn.test.impl.test_literals.test_adorned_literal, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-adorned-literal", "\ufdd0:test", function test_adorned_literal_test() {
  try {
    var values__4792__auto___5089 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, fogus.datalog.bacwn.impl.literals.adorned_literal.call(null, bacwn.test.impl.test_literals.pl, cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"]))), cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:fred", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])}));
    var result__4793__auto___5090 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5089);
    if(cljs.core.truth_(result__4793__auto___5090)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5089), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", cljs.core.with_meta(cljs.core.list("\ufdd1'adorned-literal", "\ufdd1'pl", cljs.core.set(["\ufdd0:x"])), 
      cljs.core.hash_map("\ufdd0:line", 99, "\ufdd0:column", 29))), cljs.core.hash_map("\ufdd0:line", 99, "\ufdd0:column", 10)), cljs.core.hash_map("\ufdd0:pred", "\ufdd0:fred", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"]))), cljs.core.hash_map("\ufdd0:line", 99, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5089)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", cljs.core.with_meta(cljs.core.list("\ufdd1'adorned-literal", 
      "\ufdd1'pl", cljs.core.set(["\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 99, "\ufdd0:column", 29))), cljs.core.hash_map("\ufdd0:line", 99, "\ufdd0:column", 10)), cljs.core.hash_map("\ufdd0:pred", "\ufdd0:fred", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"]))), cljs.core.hash_map("\ufdd0:line", 99, "\ufdd0:column", 7))}))
    }
  }catch(e5085) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5085)) {
      var t__4829__auto___5091 = e5085;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5091, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", cljs.core.with_meta(cljs.core.list("\ufdd1'adorned-literal", "\ufdd1'pl", cljs.core.set(["\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 
      99, "\ufdd0:column", 29))), cljs.core.hash_map("\ufdd0:line", 99, "\ufdd0:column", 10)), cljs.core.hash_map("\ufdd0:pred", "\ufdd0:fred", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"]))), cljs.core.hash_map("\ufdd0:line", 99, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5085;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5092 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, fogus.datalog.bacwn.impl.literals.adorned_literal.call(null, bacwn.test.impl.test_literals.nl, cljs.core.PersistentHashSet.fromArray(["\ufdd0:y", "\ufdd0:x", "\ufdd0:q"]))), cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:fred", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:y", "\ufdd0:x"])}));
    var result__4793__auto___5093 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5092);
    if(cljs.core.truth_(result__4793__auto___5093)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5092), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", cljs.core.with_meta(cljs.core.list("\ufdd1'adorned-literal", "\ufdd1'nl", cljs.core.set(["\ufdd0:y", 
      "\ufdd0:x", "\ufdd0:q"])), cljs.core.hash_map("\ufdd0:line", 101, "\ufdd0:column", 29))), cljs.core.hash_map("\ufdd0:line", 101, "\ufdd0:column", 10)), cljs.core.hash_map("\ufdd0:pred", "\ufdd0:fred", "\ufdd0:bound", cljs.core.set(["\ufdd0:y", "\ufdd0:x"]))), cljs.core.hash_map("\ufdd0:line", 101, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5092)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", cljs.core.with_meta(cljs.core.list("\ufdd1'adorned-literal", 
      "\ufdd1'nl", cljs.core.set(["\ufdd0:y", "\ufdd0:x", "\ufdd0:q"])), cljs.core.hash_map("\ufdd0:line", 101, "\ufdd0:column", 29))), cljs.core.hash_map("\ufdd0:line", 101, "\ufdd0:column", 10)), cljs.core.hash_map("\ufdd0:pred", "\ufdd0:fred", "\ufdd0:bound", cljs.core.set(["\ufdd0:y", "\ufdd0:x"]))), cljs.core.hash_map("\ufdd0:line", 101, "\ufdd0:column", 7))}))
    }
  }catch(e5086) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5086)) {
      var t__4829__auto___5094 = e5086;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5094, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", cljs.core.with_meta(cljs.core.list("\ufdd1'adorned-literal", "\ufdd1'nl", cljs.core.set(["\ufdd0:y", "\ufdd0:x", "\ufdd0:q"])), cljs.core.hash_map("\ufdd0:line", 
      101, "\ufdd0:column", 29))), cljs.core.hash_map("\ufdd0:line", 101, "\ufdd0:column", 10)), cljs.core.hash_map("\ufdd0:pred", "\ufdd0:fred", "\ufdd0:bound", cljs.core.set(["\ufdd0:y", "\ufdd0:x"]))), cljs.core.hash_map("\ufdd0:line", 101, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5086;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5095 = cljs.core.list.call(null, (new cljs.core.Keyword("\ufdd0:term-bindings")).call(null, fogus.datalog.bacwn.impl.literals.adorned_literal.call(null, bacwn.test.impl.test_literals.nl, cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"]))), cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y", "\ufdd0:z"], {"\ufdd0:x":"\ufdd1'?x", "\ufdd0:y":"\ufdd1'?y", "\ufdd0:z":3}));
    var result__4793__auto___5096 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5095);
    if(cljs.core.truth_(result__4793__auto___5096)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5095), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:term-bindings", cljs.core.with_meta(cljs.core.list("\ufdd1'adorned-literal", "\ufdd1'nl", cljs.core.set(["\ufdd0:x"])), 
      cljs.core.hash_map("\ufdd0:line", 103, "\ufdd0:column", 26))), cljs.core.hash_map("\ufdd0:line", 103, "\ufdd0:column", 10)), cljs.core.hash_map("\ufdd0:x", cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), "\ufdd0:y", cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), "\ufdd0:z", 3)), cljs.core.hash_map("\ufdd0:line", 103, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5095)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:term-bindings", cljs.core.with_meta(cljs.core.list("\ufdd1'adorned-literal", 
      "\ufdd1'nl", cljs.core.set(["\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 103, "\ufdd0:column", 26))), cljs.core.hash_map("\ufdd0:line", 103, "\ufdd0:column", 10)), cljs.core.hash_map("\ufdd0:x", cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), "\ufdd0:y", cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), "\ufdd0:z", 3)), cljs.core.hash_map("\ufdd0:line", 103, "\ufdd0:column", 7))}))
    }
  }catch(e5087) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5087)) {
      var t__4829__auto___5097 = e5087;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5097, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd0:term-bindings", cljs.core.with_meta(cljs.core.list("\ufdd1'adorned-literal", "\ufdd1'nl", cljs.core.set(["\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 103, 
      "\ufdd0:column", 26))), cljs.core.hash_map("\ufdd0:line", 103, "\ufdd0:column", 10)), cljs.core.hash_map("\ufdd0:x", cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), "\ufdd0:y", cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), "\ufdd0:z", 3)), cljs.core.hash_map("\ufdd0:line", 103, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5087;
      }else {
      }
    }
  }
  try {
    var values__4792__auto__ = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.adorned_literal.call(null, bacwn.test.impl.test_literals.cl, cljs.core.PersistentHashSet.EMPTY), bacwn.test.impl.test_literals.cl);
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'adorned-literal", "\ufdd1'cl", cljs.core.set([])), cljs.core.hash_map("\ufdd0:line", 105, "\ufdd0:column", 10)), "\ufdd1'cl"), 
      cljs.core.hash_map("\ufdd0:line", 105, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'adorned-literal", "\ufdd1'cl", cljs.core.set([])), cljs.core.hash_map("\ufdd0:line", 
      105, "\ufdd0:column", 10)), "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 105, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5088) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5088)) {
      var t__4829__auto__ = e5088;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'adorned-literal", "\ufdd1'cl", cljs.core.set([])), cljs.core.hash_map("\ufdd0:line", 105, "\ufdd0:column", 10)), "\ufdd1'cl"), cljs.core.hash_map("\ufdd0:line", 
      105, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5088;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-literals", bacwn.test.impl.test_literals.test_adorned_literal);
bacwn.test.impl.test_literals.test_get_adorned_bindings = function test_get_adorned_bindings() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_literals.test_get_adorned_bindings)
};
bacwn.test.impl.test_literals.test_get_adorned_bindings = cljs.core.vary_meta.call(null, bacwn.test.impl.test_literals.test_get_adorned_bindings, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-get-adorned-bindings", "\ufdd0:test", function test_get_adorned_bindings_test() {
  try {
    var values__4792__auto___5102 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.get_adorned_bindings.call(null, fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, fogus.datalog.bacwn.impl.literals.adorned_literal.call(null, bacwn.test.impl.test_literals.pl, cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])))), cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"]));
    var result__4793__auto___5103 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5102);
    if(cljs.core.truth_(result__4793__auto___5103)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5102), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'get-adorned-bindings", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", cljs.core.with_meta(cljs.core.list("\ufdd1'adorned-literal", 
      "\ufdd1'pl", cljs.core.set(["\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 109, "\ufdd0:column", 51))), cljs.core.hash_map("\ufdd0:line", 109, "\ufdd0:column", 32))), cljs.core.hash_map("\ufdd0:line", 109, "\ufdd0:column", 10)), cljs.core.set(["\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 109, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5102)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'get-adorned-bindings", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", 
      cljs.core.with_meta(cljs.core.list("\ufdd1'adorned-literal", "\ufdd1'pl", cljs.core.set(["\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 109, "\ufdd0:column", 51))), cljs.core.hash_map("\ufdd0:line", 109, "\ufdd0:column", 32))), cljs.core.hash_map("\ufdd0:line", 109, "\ufdd0:column", 10)), cljs.core.set(["\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 109, "\ufdd0:column", 7))}))
    }
  }catch(e5100) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5100)) {
      var t__4829__auto___5104 = e5100;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5104, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'get-adorned-bindings", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", cljs.core.with_meta(cljs.core.list("\ufdd1'adorned-literal", "\ufdd1'pl", 
      cljs.core.set(["\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 109, "\ufdd0:column", 51))), cljs.core.hash_map("\ufdd0:line", 109, "\ufdd0:column", 32))), cljs.core.hash_map("\ufdd0:line", 109, "\ufdd0:column", 10)), cljs.core.set(["\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 109, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5100;
      }else {
      }
    }
  }
  try {
    var values__4792__auto__ = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.get_adorned_bindings.call(null, fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, bacwn.test.impl.test_literals.pl)), null);
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'get-adorned-bindings", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 
      111, "\ufdd0:column", 32))), cljs.core.hash_map("\ufdd0:line", 111, "\ufdd0:column", 10)), null), cljs.core.hash_map("\ufdd0:line", 111, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'get-adorned-bindings", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", 
      "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 111, "\ufdd0:column", 32))), cljs.core.hash_map("\ufdd0:line", 111, "\ufdd0:column", 10)), null), cljs.core.hash_map("\ufdd0:line", 111, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5101) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5101)) {
      var t__4829__auto__ = e5101;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'get-adorned-bindings", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 111, "\ufdd0:column", 
      32))), cljs.core.hash_map("\ufdd0:line", 111, "\ufdd0:column", 10)), null), cljs.core.hash_map("\ufdd0:line", 111, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5101;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-literals", bacwn.test.impl.test_literals.test_get_adorned_bindings);
bacwn.test.impl.test_literals.test_get_base_predicate = function test_get_base_predicate() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_literals.test_get_base_predicate)
};
bacwn.test.impl.test_literals.test_get_base_predicate = cljs.core.vary_meta.call(null, bacwn.test.impl.test_literals.test_get_base_predicate, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-get-base-predicate", "\ufdd0:test", function test_get_base_predicate_test() {
  try {
    var values__4792__auto___5109 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.get_base_predicate.call(null, fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, fogus.datalog.bacwn.impl.literals.adorned_literal.call(null, bacwn.test.impl.test_literals.pl, cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])))), "\ufdd0:fred");
    var result__4793__auto___5110 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5109);
    if(cljs.core.truth_(result__4793__auto___5110)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5109), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'get-base-predicate", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", cljs.core.with_meta(cljs.core.list("\ufdd1'adorned-literal", 
      "\ufdd1'pl", cljs.core.set(["\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 115, "\ufdd0:column", 49))), cljs.core.hash_map("\ufdd0:line", 115, "\ufdd0:column", 30))), cljs.core.hash_map("\ufdd0:line", 115, "\ufdd0:column", 10)), "\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 115, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5109)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'get-base-predicate", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", 
      cljs.core.with_meta(cljs.core.list("\ufdd1'adorned-literal", "\ufdd1'pl", cljs.core.set(["\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 115, "\ufdd0:column", 49))), cljs.core.hash_map("\ufdd0:line", 115, "\ufdd0:column", 30))), cljs.core.hash_map("\ufdd0:line", 115, "\ufdd0:column", 10)), "\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 115, "\ufdd0:column", 7))}))
    }
  }catch(e5107) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5107)) {
      var t__4829__auto___5111 = e5107;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5111, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'get-base-predicate", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", cljs.core.with_meta(cljs.core.list("\ufdd1'adorned-literal", "\ufdd1'pl", 
      cljs.core.set(["\ufdd0:x"])), cljs.core.hash_map("\ufdd0:line", 115, "\ufdd0:column", 49))), cljs.core.hash_map("\ufdd0:line", 115, "\ufdd0:column", 30))), cljs.core.hash_map("\ufdd0:line", 115, "\ufdd0:column", 10)), "\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 115, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5107;
      }else {
      }
    }
  }
  try {
    var values__4792__auto__ = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.get_base_predicate.call(null, fogus.datalog.bacwn.impl.literals.literal_predicate.call(null, bacwn.test.impl.test_literals.pl)), "\ufdd0:fred");
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'get-base-predicate", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 
      117, "\ufdd0:column", 30))), cljs.core.hash_map("\ufdd0:line", 117, "\ufdd0:column", 10)), "\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 117, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'get-base-predicate", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", 
      "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 117, "\ufdd0:column", 30))), cljs.core.hash_map("\ufdd0:line", 117, "\ufdd0:column", 10)), "\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 117, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5108) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5108)) {
      var t__4829__auto__ = e5108;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'get-base-predicate", cljs.core.with_meta(cljs.core.list("\ufdd1'literal-predicate", "\ufdd1'pl"), cljs.core.hash_map("\ufdd0:line", 117, "\ufdd0:column", 
      30))), cljs.core.hash_map("\ufdd0:line", 117, "\ufdd0:column", 10)), "\ufdd0:fred"), cljs.core.hash_map("\ufdd0:line", 117, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5108;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-literals", bacwn.test.impl.test_literals.test_get_base_predicate);
bacwn.test.impl.test_literals.db1 = fogus.datalog.bacwn.impl.database.add_relation.call(null, fogus.datalog.bacwn.impl.database.add_index.call(null, fogus.datalog.bacwn.impl.database.add_relation.call(null, fogus.datalog.bacwn.impl.database.empty_database, "\ufdd0:fred", cljs.core.PersistentVector.fromArray(["\ufdd0:x", "\ufdd0:y"], true)), "\ufdd0:fred", "\ufdd0:x"), "\ufdd0:sally", cljs.core.PersistentVector.fromArray(["\ufdd0:x"], true));
bacwn.test.impl.test_literals.db2 = fogus.datalog.bacwn.impl.database.add_tuples.call(null, bacwn.test.impl.test_literals.db1, cljs.core.PersistentVector.fromArray(["\ufdd0:fred", "\ufdd0:x", 1, "\ufdd0:y", "\ufdd0:mary"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:fred", "\ufdd0:x", 1, "\ufdd0:y", "\ufdd0:becky"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:fred", "\ufdd0:x", 3, "\ufdd0:y", "\ufdd0:sally"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:fred", "\ufdd0:x", 
4, "\ufdd0:y", "\ufdd0:joe"], true), cljs.core.PersistentVector.fromArray(["\ufdd0:sally", "\ufdd0:x", 1], true), cljs.core.PersistentVector.fromArray(["\ufdd0:sally", "\ufdd0:x", 2], true));
bacwn.test.impl.test_literals.lit1 = fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:fred", cljs.core.ObjMap.fromObject(["\ufdd0:y", "\ufdd0:x"], {"\ufdd0:y":"\ufdd1'?y", "\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal");
bacwn.test.impl.test_literals.lit2 = fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:fred", cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/negated");
bacwn.test.impl.test_literals.lit3 = fogus.datalog.bacwn.impl.literals.__GT_ConditionalLiteral.call(null, function(binds__5075__auto__) {
  return cljs.core.apply.call(null, cljs.core._GT_, binds__5075__auto__)
}, "\ufdd1'>", cljs.core.with_meta(cljs.core.list("\ufdd1'?x", "\ufdd1'?y"), cljs.core.hash_map("\ufdd0:line", 144, "\ufdd0:column", 167)), "\ufdd0:fogus.datalog.bacwn.impl.literals/conditional");
bacwn.test.impl.test_literals.lit4 = fogus.datalog.bacwn.impl.literals.adorned_literal.call(null, fogus.datalog.bacwn.impl.literals.__GT_AtomicLiteral.call(null, "\ufdd0:joan", cljs.core.ObjMap.fromObject(["\ufdd0:y", "\ufdd0:x"], {"\ufdd0:y":"\ufdd1'?y", "\ufdd0:x":"\ufdd1'?x"}), "\ufdd0:fogus.datalog.bacwn.impl.literals/literal"), cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"]));
bacwn.test.impl.test_literals.test_join_literal = function test_join_literal() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_literals.test_join_literal)
};
bacwn.test.impl.test_literals.test_join_literal = cljs.core.vary_meta.call(null, bacwn.test.impl.test_literals.test_join_literal, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-join-literal", "\ufdd0:test", function test_join_literal_test() {
  try {
    var values__4792__auto___5118 = cljs.core.list.call(null, cljs.core.set.call(null, fogus.datalog.bacwn.impl.literals.join_literal.call(null, bacwn.test.impl.test_literals.db2, bacwn.test.impl.test_literals.lit1, cljs.core.PersistentVector.fromArray([cljs.core.PersistentArrayMap.fromArrays(["\ufdd1'?x"], [1]), cljs.core.PersistentArrayMap.fromArrays(["\ufdd1'?x"], [2]), cljs.core.PersistentArrayMap.fromArrays(["\ufdd1'?x"], [3])], true))), cljs.core.PersistentHashSet.fromArray([cljs.core.PersistentArrayMap.fromArrays(["\ufdd1'?x", 
    "\ufdd1'?y"], [1, "\ufdd0:mary"]), cljs.core.PersistentArrayMap.fromArrays(["\ufdd1'?x", "\ufdd1'?y"], [1, "\ufdd0:becky"]), cljs.core.PersistentArrayMap.fromArrays(["\ufdd1'?x", "\ufdd1'?y"], [3, "\ufdd0:sally"])]));
    var result__4793__auto___5119 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5118);
    if(cljs.core.truth_(result__4793__auto___5119)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5118), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'set", cljs.core.with_meta(cljs.core.list("\ufdd1'join-literal", "\ufdd1'db2", "\ufdd1'lit1", cljs.core.vec([cljs.core.hash_map(cljs.core.list("\ufdd1'quote", 
      "\ufdd1'?x"), 1), cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 2), cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 3)])), cljs.core.hash_map("\ufdd0:line", 148, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 148, "\ufdd0:column", 10)), cljs.core.set([cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 1, cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), "\ufdd0:mary"), cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 1, cljs.core.list("\ufdd1'quote", 
      "\ufdd1'?y"), "\ufdd0:becky"), cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 3, cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), "\ufdd0:sally")])), cljs.core.hash_map("\ufdd0:line", 148, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5118)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'set", cljs.core.with_meta(cljs.core.list("\ufdd1'join-literal", "\ufdd1'db2", 
      "\ufdd1'lit1", cljs.core.vec([cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 1), cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 2), cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 3)])), cljs.core.hash_map("\ufdd0:line", 148, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 148, "\ufdd0:column", 10)), cljs.core.set([cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 1, cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), "\ufdd0:mary"), 
      cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 1, cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), "\ufdd0:becky"), cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 3, cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), "\ufdd0:sally")])), cljs.core.hash_map("\ufdd0:line", 148, "\ufdd0:column", 7))}))
    }
  }catch(e5115) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5115)) {
      var t__4829__auto___5120 = e5115;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5120, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'set", cljs.core.with_meta(cljs.core.list("\ufdd1'join-literal", "\ufdd1'db2", "\ufdd1'lit1", cljs.core.vec([cljs.core.hash_map(cljs.core.list("\ufdd1'quote", 
      "\ufdd1'?x"), 1), cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 2), cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 3)])), cljs.core.hash_map("\ufdd0:line", 148, "\ufdd0:column", 15))), cljs.core.hash_map("\ufdd0:line", 148, "\ufdd0:column", 10)), cljs.core.set([cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 1, cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), "\ufdd0:mary"), cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 1, cljs.core.list("\ufdd1'quote", 
      "\ufdd1'?y"), "\ufdd0:becky"), cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 3, cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), "\ufdd0:sally")])), cljs.core.hash_map("\ufdd0:line", 148, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5115;
      }else {
      }
    }
  }
  try {
    var values__4792__auto___5121 = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.join_literal.call(null, bacwn.test.impl.test_literals.db2, bacwn.test.impl.test_literals.lit2, cljs.core.PersistentVector.fromArray([cljs.core.PersistentArrayMap.fromArrays(["\ufdd1'?x"], [1]), cljs.core.PersistentArrayMap.fromArrays(["\ufdd1'?x"], [2]), cljs.core.PersistentArrayMap.fromArrays(["\ufdd1'?x"], [3])], true)), cljs.core.PersistentVector.fromArray([cljs.core.PersistentArrayMap.fromArrays(["\ufdd1'?x"], 
    [2])], true));
    var result__4793__auto___5122 = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto___5121);
    if(cljs.core.truth_(result__4793__auto___5122)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto___5121), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'join-literal", "\ufdd1'db2", "\ufdd1'lit2", cljs.core.vec([cljs.core.hash_map(cljs.core.list("\ufdd1'quote", 
      "\ufdd1'?x"), 1), cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 2), cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 3)])), cljs.core.hash_map("\ufdd0:line", 150, "\ufdd0:column", 10)), cljs.core.vec([cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 2)])), cljs.core.hash_map("\ufdd0:line", 150, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto___5121)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'join-literal", "\ufdd1'db2", "\ufdd1'lit2", cljs.core.vec([cljs.core.hash_map(cljs.core.list("\ufdd1'quote", 
      "\ufdd1'?x"), 1), cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 2), cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 3)])), cljs.core.hash_map("\ufdd0:line", 150, "\ufdd0:column", 10)), cljs.core.vec([cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 2)])), cljs.core.hash_map("\ufdd0:line", 150, "\ufdd0:column", 7))}))
    }
  }catch(e5116) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5116)) {
      var t__4829__auto___5123 = e5116;
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto___5123, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'join-literal", "\ufdd1'db2", "\ufdd1'lit2", cljs.core.vec([cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 1), cljs.core.hash_map(cljs.core.list("\ufdd1'quote", 
      "\ufdd1'?x"), 2), cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 3)])), cljs.core.hash_map("\ufdd0:line", 150, "\ufdd0:column", 10)), cljs.core.vec([cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 2)])), cljs.core.hash_map("\ufdd0:line", 150, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5116;
      }else {
      }
    }
  }
  try {
    var values__4792__auto__ = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.join_literal.call(null, bacwn.test.impl.test_literals.db2, bacwn.test.impl.test_literals.lit3, cljs.core.PersistentVector.fromArray([cljs.core.PersistentArrayMap.fromArrays(["\ufdd1'?x", "\ufdd1'?y"], [1, 2]), cljs.core.PersistentArrayMap.fromArrays(["\ufdd1'?x", "\ufdd1'?y"], [3, 1])], true)), cljs.core.PersistentVector.fromArray([cljs.core.PersistentArrayMap.fromArrays(["\ufdd1'?x", "\ufdd1'?y"], [3, 1])], 
    true));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'join-literal", "\ufdd1'db2", "\ufdd1'lit3", cljs.core.vec([cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 
      1, cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), 2), cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 3, cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), 1)])), cljs.core.hash_map("\ufdd0:line", 152, "\ufdd0:column", 10)), cljs.core.vec([cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 3, cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), 1)])), cljs.core.hash_map("\ufdd0:line", 152, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'join-literal", "\ufdd1'db2", "\ufdd1'lit3", cljs.core.vec([cljs.core.hash_map(cljs.core.list("\ufdd1'quote", 
      "\ufdd1'?x"), 1, cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), 2), cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 3, cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), 1)])), cljs.core.hash_map("\ufdd0:line", 152, "\ufdd0:column", 10)), cljs.core.vec([cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 3, cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), 1)])), cljs.core.hash_map("\ufdd0:line", 152, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5117) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5117)) {
      var t__4829__auto__ = e5117;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'join-literal", "\ufdd1'db2", "\ufdd1'lit3", cljs.core.vec([cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 1, cljs.core.list("\ufdd1'quote", 
      "\ufdd1'?y"), 2), cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 3, cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), 1)])), cljs.core.hash_map("\ufdd0:line", 152, "\ufdd0:column", 10)), cljs.core.vec([cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 3, cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), 1)])), cljs.core.hash_map("\ufdd0:line", 152, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5117;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-literals", bacwn.test.impl.test_literals.test_join_literal);
bacwn.test.impl.test_literals.test_project_literal = function test_project_literal() {
  return cemerick.cljs.test.test_var.call(null, bacwn.test.impl.test_literals.test_project_literal)
};
bacwn.test.impl.test_literals.test_project_literal = cljs.core.vary_meta.call(null, bacwn.test.impl.test_literals.test_project_literal, cljs.core.assoc, "\ufdd0:name", "\ufdd1'test-project-literal", "\ufdd0:test", function test_project_literal_test() {
  try {
    var values__4792__auto__ = cljs.core.list.call(null, fogus.datalog.bacwn.impl.literals.project_literal.call(null, bacwn.test.impl.test_literals.db2, bacwn.test.impl.test_literals.lit4, cljs.core.PersistentVector.fromArray([cljs.core.PersistentArrayMap.fromArrays(["\ufdd1'?x", "\ufdd1'?y"], [1, 3]), cljs.core.PersistentArrayMap.fromArrays(["\ufdd1'?x", "\ufdd1'?y"], [4, 2])], true)).call(null, cljs.core.ObjMap.fromObject(["\ufdd0:pred", "\ufdd0:bound"], {"\ufdd0:pred":"\ufdd0:joan", "\ufdd0:bound":cljs.core.PersistentHashSet.fromArray(["\ufdd0:x"])})), 
    fogus.datalog.bacwn.impl.database.datalog_relation.call(null, cljs.core.PersistentHashSet.fromArray(["\ufdd0:y", "\ufdd0:x"]), cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y"], {"\ufdd0:x":1, "\ufdd0:y":3}), cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y"], {"\ufdd0:x":4, "\ufdd0:y":2})]), cljs.core.ObjMap.fromObject(["\ufdd0:x"], {"\ufdd0:x":cljs.core.PersistentArrayMap.fromArrays([4, 1], [cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:x", 
    "\ufdd0:y"], {"\ufdd0:x":4, "\ufdd0:y":2})]), cljs.core.PersistentHashSet.fromArray([cljs.core.ObjMap.fromObject(["\ufdd0:x", "\ufdd0:y"], {"\ufdd0:x":1, "\ufdd0:y":3})])])})));
    var result__4793__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__4792__auto__);
    if(cljs.core.truth_(result__4793__auto__)) {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.cons.call(null, cljs.core._EQ_, values__4792__auto__), "\ufdd0:type":"\ufdd0:pass", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list(cljs.core.with_meta(cljs.core.list("\ufdd1'project-literal", "\ufdd1'db2", "\ufdd1'lit4", cljs.core.vec([cljs.core.hash_map(cljs.core.list("\ufdd1'quote", 
      "\ufdd1'?x"), 1, cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), 3), cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 4, cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), 2)])), cljs.core.hash_map("\ufdd0:line", 156, "\ufdd0:column", 11)), cljs.core.hash_map("\ufdd0:pred", "\ufdd0:joan", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"]))), cljs.core.hash_map("\ufdd0:line", 156, "\ufdd0:column", 10)), cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-relation", cljs.core.set(["\ufdd0:y", "\ufdd0:x"]), 
      cljs.core.set([cljs.core.hash_map("\ufdd0:x", 1, "\ufdd0:y", 3), cljs.core.hash_map("\ufdd0:x", 4, "\ufdd0:y", 2)]), cljs.core.hash_map("\ufdd0:x", cljs.core.hash_map(4, cljs.core.set([cljs.core.hash_map("\ufdd0:x", 4, "\ufdd0:y", 2)]), 1, cljs.core.set([cljs.core.hash_map("\ufdd0:x", 1, "\ufdd0:y", 3)])))), cljs.core.hash_map("\ufdd0:line", 157, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 156, "\ufdd0:column", 7))}))
    }else {
      cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":cljs.core.list.call(null, "\ufdd1'not", cljs.core.cons.call(null, "\ufdd1'=", values__4792__auto__)), "\ufdd0:type":"\ufdd0:fail", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list(cljs.core.with_meta(cljs.core.list("\ufdd1'project-literal", "\ufdd1'db2", "\ufdd1'lit4", 
      cljs.core.vec([cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 1, cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), 3), cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 4, cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), 2)])), cljs.core.hash_map("\ufdd0:line", 156, "\ufdd0:column", 11)), cljs.core.hash_map("\ufdd0:pred", "\ufdd0:joan", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"]))), cljs.core.hash_map("\ufdd0:line", 156, "\ufdd0:column", 10)), cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-relation", 
      cljs.core.set(["\ufdd0:y", "\ufdd0:x"]), cljs.core.set([cljs.core.hash_map("\ufdd0:x", 1, "\ufdd0:y", 3), cljs.core.hash_map("\ufdd0:x", 4, "\ufdd0:y", 2)]), cljs.core.hash_map("\ufdd0:x", cljs.core.hash_map(4, cljs.core.set([cljs.core.hash_map("\ufdd0:x", 4, "\ufdd0:y", 2)]), 1, cljs.core.set([cljs.core.hash_map("\ufdd0:x", 1, "\ufdd0:y", 3)])))), cljs.core.hash_map("\ufdd0:line", 157, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 156, "\ufdd0:column", 7))}))
    }
    return result__4793__auto__
  }catch(e5125) {
    if(cljs.core.instance_QMARK_.call(null, Error, e5125)) {
      var t__4829__auto__ = e5125;
      return cemerick.cljs.test.do_report.call(null, cljs.core.ObjMap.fromObject(["\ufdd0:actual", "\ufdd0:type", "\ufdd0:message", "\ufdd0:expected"], {"\ufdd0:actual":t__4829__auto__, "\ufdd0:type":"\ufdd0:error", "\ufdd0:message":null, "\ufdd0:expected":cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list(cljs.core.with_meta(cljs.core.list("\ufdd1'project-literal", "\ufdd1'db2", "\ufdd1'lit4", cljs.core.vec([cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 
      1, cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), 3), cljs.core.hash_map(cljs.core.list("\ufdd1'quote", "\ufdd1'?x"), 4, cljs.core.list("\ufdd1'quote", "\ufdd1'?y"), 2)])), cljs.core.hash_map("\ufdd0:line", 156, "\ufdd0:column", 11)), cljs.core.hash_map("\ufdd0:pred", "\ufdd0:joan", "\ufdd0:bound", cljs.core.set(["\ufdd0:x"]))), cljs.core.hash_map("\ufdd0:line", 156, "\ufdd0:column", 10)), cljs.core.with_meta(cljs.core.list("\ufdd1'datalog-relation", cljs.core.set(["\ufdd0:y", "\ufdd0:x"]), cljs.core.set([cljs.core.hash_map("\ufdd0:x", 
      1, "\ufdd0:y", 3), cljs.core.hash_map("\ufdd0:x", 4, "\ufdd0:y", 2)]), cljs.core.hash_map("\ufdd0:x", cljs.core.hash_map(4, cljs.core.set([cljs.core.hash_map("\ufdd0:x", 4, "\ufdd0:y", 2)]), 1, cljs.core.set([cljs.core.hash_map("\ufdd0:x", 1, "\ufdd0:y", 3)])))), cljs.core.hash_map("\ufdd0:line", 157, "\ufdd0:column", 10))), cljs.core.hash_map("\ufdd0:line", 156, "\ufdd0:column", 7))}))
    }else {
      if("\ufdd0:else") {
        throw e5125;
      }else {
        return null
      }
    }
  }
});
cemerick.cljs.test.register_test_BANG_.call(null, "\ufdd1'bacwn.test.impl.test-literals", bacwn.test.impl.test_literals.test_project_literal);
